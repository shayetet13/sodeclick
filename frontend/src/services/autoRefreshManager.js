/**
 * Auto Refresh Manager - ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å
 * ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
 */

class AutoRefreshManager {
  constructor() {
    this.intervals = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö interval IDs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
    this.workers = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö Web Workers
    this.isVisible = true; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    this.isActive = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    this.lastActivity = Date.now(); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    this.idleThreshold = 30000; // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö idle detection
    this.serviceWorker = null; // ‡πÄ‡∏Å‡πá‡∏ö Service Worker registration
    this.stats = {
      totalRefreshes: 0,
      successfulRefreshes: 0,
      failedRefreshes: 0,
      lastRefreshTime: null
    };

    this.setupVisibilityAPI();
    this.setupActivityDetection();
    this.setupServiceWorker();
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
   * ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ‡∏à‡∏∞‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
   */
  setupVisibilityAPI() {
    document.addEventListener('visibilitychange', () => {
      this.isVisible = !document.hidden;

      if (this.isVisible) {
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        console.log('üîÑ Tab became visible, refreshing data...');
        this.forceRefresh('immediate');
      } else {
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        console.log('üò¥ Tab became hidden, reducing refresh frequency');
        this.adjustRefreshFrequency('slow');
      }
    });
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   * ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏≤‡∏ô ‡∏à‡∏∞‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
   */
  setupActivityDetection() {
    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];

    events.forEach(event => {
      document.addEventListener(event, () => {
        this.lastActivity = Date.now();
        if (!this.isActive) {
          this.adjustRefreshFrequency('normal');
        }
      }, true);
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö idle status ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setInterval(() => {
      const now = Date.now();
      const isIdle = (now - this.lastActivity) > this.idleThreshold;

      if (isIdle && this.isActive) {
        console.log('üò¥ User idle detected, reducing refresh frequency');
        this.adjustRefreshFrequency('slow');
      } else if (!isIdle && this.isActive) {
        this.adjustRefreshFrequency('normal');
      }
    }, 10000);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Service Worker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô background
   */
  async setupServiceWorker() {
    if ('serviceWorker' in navigator) {
      try {
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Service Worker ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö environment
        const swFile = import.meta.env.PROD ? '/sw-auto-refresh.js' : '/sw-auto-refresh-dev.js';

        console.log('üîß Setting up Service Worker for auto refresh...');
        console.log('üìÅ Service Worker file:', swFile);

        this.serviceWorker = await navigator.serviceWorker.register(swFile);
        console.log('‚úÖ Service Worker registered successfully');

        // ‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Service Worker
        navigator.serviceWorker.addEventListener('message', (event) => {
          this.handleServiceWorkerMessage(event.data);
        });

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Service Worker ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        await navigator.serviceWorker.ready;
        console.log('üîß Service Worker is ready');

      } catch (error) {
        console.error('‚ùå Service Worker registration failed:', error);
        console.log('üîß Will use main thread refresh only');
        this.serviceWorker = null;
      }
    } else {
      console.log('‚ÑπÔ∏è Service Worker not supported in this browser');
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Service Worker
   */
  handleServiceWorkerMessage(data) {
    if (data.type === 'CHAT_MESSAGES_UPDATED') {
      this.stats.totalRefreshes++;
      this.stats.lastRefreshTime = Date.now();

      window.dispatchEvent(new CustomEvent('chatMessagesUpdated', {
        detail: data.data
      }));
    } else if (data.type === 'ONLINE_USERS_UPDATED') {
      window.dispatchEvent(new CustomEvent('onlineUsersUpdated', {
        detail: data.data
      }));
    } else if (data.type === 'NOTIFICATIONS_UPDATED') {
      window.dispatchEvent(new CustomEvent('notificationsUpdated', {
        detail: data.data
      }));
    }
  }

  /**
   * ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  adjustRefreshFrequency(mode) {
    const frequencies = {
      immediate: 100,      // ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö)
      fast: 1000,         // ‡πÄ‡∏£‡πá‡∏ß (1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
      normal: 5000,       // ‡∏õ‡∏Å‡∏ï‡∏¥ (5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
      slow: 15000,        // ‡∏ä‡πâ‡∏≤ (15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
      background: 30000   // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    };

    Object.keys(frequencies).forEach(key => {
      if (this.intervals.has(key)) {
        clearInterval(this.intervals.get(key));
        this.intervals.delete(key);
      }
    });

    if (mode !== 'stop') {
      const interval = setInterval(() => {
        this.performRefresh(mode);
      }, frequencies[mode]);

      this.intervals.set(mode, interval);
    }
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö auto refresh ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó
   */
  async startChatRefresh(roomId, userId) {
    console.log('üöÄ Starting auto refresh for chat:', roomId);

    this.isActive = true;
    this.adjustRefreshFrequency('normal');

    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó
    this.startRefresh('chat-messages', () => this.refreshChatMessages(roomId, userId), 'normal');

    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
    this.startRefresh('online-users', () => this.refreshOnlineUsers(roomId, userId), 'slow');

    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    this.startRefresh('notifications', () => this.refreshNotifications(userId), 'slow');

    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
    this.startRefresh('room-info', () => this.refreshRoomInfo(roomId), 'background');

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° Service Worker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö background refresh ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (this.serviceWorker && this.serviceWorker.active) {
      this.serviceWorker.active.postMessage({
        type: 'START_AUTO_REFRESH',
        userId,
        roomId
      });
      console.log('üöÄ Started Service Worker background refresh');
    } else {
      console.log('üîß Service Worker not available, using main thread refresh only');
    }
  }

  /**
   * ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö auto refresh
   */
  stopChatRefresh() {
    console.log('‚èπÔ∏è Stopping auto refresh');

    this.isActive = false;
    this.adjustRefreshFrequency('stop');

    // ‡∏•‡πâ‡∏≤‡∏á intervals ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    this.intervals.forEach(interval => clearInterval(interval));
    this.intervals.clear();

    // ‡∏´‡∏¢‡∏∏‡∏î Service Worker ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (this.serviceWorker && this.serviceWorker.active) {
      this.serviceWorker.active.postMessage({
        type: 'STOP_AUTO_REFRESH'
      });
      console.log('‚èπÔ∏è Stopped Service Worker background refresh');
    }
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  startRefresh(type, callback, frequency = 'normal') {
    if (this.intervals.has(type)) {
      clearInterval(this.intervals.get(type));
    }

    const interval = setInterval(() => {
      if (this.shouldRefresh(type)) {
        callback();
      }
    }, this.getFrequencyForType(type, frequency));

    this.intervals.set(type, interval);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  shouldRefresh(type) {
    // ‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if (!this.isVisible && (Date.now() - this.lastActivity) > 300000) { // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      return false;
    }

    // ‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if ((Date.now() - this.lastActivity) > 600000) { // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
      return false;
    }

    return true;
  }

  /**
   * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  getFrequencyForType(type, baseFrequency) {
    const multipliers = {
      'chat-messages': 1,     // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó - ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      'online-users': 3,      // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå - ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
      'notifications': 2,     // ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô - ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
      'room-info': 6         // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á - ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    };

    const baseFrequencies = {
      immediate: 100,
      fast: 1000,
      normal: 5000,
      slow: 15000,
      background: 30000
    };

    return baseFrequencies[baseFrequency] * (multipliers[type] || 1);
  }

  /**
   * ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  performRefresh(mode) {
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÅ‡∏Ñ‡πà‡πÉ‡∏´‡πâ interval ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    // ‡πÅ‡∏ï‡πà‡∏•‡∏∞ interval ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó
   */
  async refreshChatMessages(roomId, userId) {
    this.stats.totalRefreshes++;

    try {
      console.log('üîÑ Auto refresh: Refreshing chat messages for room:', roomId);

      const response = await fetch(
        `${import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'}/api/messages/${roomId}?userId=${userId}&limit=10`,
        {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        }
      );

      console.log('üîÑ Auto refresh: API response status:', response.status);

      if (response.ok) {
        const data = await response.json();
        console.log('üîÑ Auto refresh: API response data:', data);

        if (data.success) {
          this.stats.successfulRefreshes++;
          this.stats.lastRefreshTime = Date.now();

          console.log('üîÑ Auto refresh: Dispatching chat messages update event');

          // ‡∏™‡πà‡∏á event ‡πÉ‡∏´‡πâ component ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          window.dispatchEvent(new CustomEvent('chatMessagesUpdated', {
            detail: { roomId, messages: data.data.messages, source: 'main-thread' }
          }));

          console.log('‚úÖ Auto refresh: Chat messages updated successfully');
        } else {
          this.stats.failedRefreshes++;
          console.error('‚ùå Auto refresh: API returned error:', data);
        }
      } else {
        this.stats.failedRefreshes++;
        console.error('‚ùå Auto refresh: API request failed with status:', response.status);
      }
    } catch (error) {
      this.stats.failedRefreshes++;
      console.error('‚ùå Auto refresh: Error refreshing chat messages:', error);
    }
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
   */
  async refreshOnlineUsers(roomId, userId) {
    this.stats.totalRefreshes++;

    try {
      const response = await fetch(
        `${import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'}/api/chatroom/${roomId}/online-users?userId=${userId}`,
        {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Cache-Control': 'no-cache'
          }
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          this.stats.successfulRefreshes++;
          this.stats.lastRefreshTime = Date.now();

          window.dispatchEvent(new CustomEvent('onlineUsersUpdated', {
            detail: { roomId, onlineUsers: data.data.onlineUsers, onlineCount: data.data.onlineCount, source: 'main-thread' }
          }));
        }
      } else {
        this.stats.failedRefreshes++;
      }
    } catch (error) {
      this.stats.failedRefreshes++;
      console.error('Error refreshing online users:', error);
    }
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   */
  async refreshNotifications(userId) {
    this.stats.totalRefreshes++;

    try {
      const response = await fetch(
        `${import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'}/api/notifications?userId=${userId}&limit=5`,
        {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Cache-Control': 'no-cache'
          }
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          this.stats.successfulRefreshes++;
          this.stats.lastRefreshTime = Date.now();

          window.dispatchEvent(new CustomEvent('notificationsUpdated', {
            detail: { notifications: data.data.notifications, source: 'main-thread' }
          }));
        }
      } else {
        this.stats.failedRefreshes++;
      }
    } catch (error) {
      this.stats.failedRefreshes++;
      console.error('Error refreshing notifications:', error);
    }
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
   */
  async refreshRoomInfo(roomId) {
    try {
      const response = await fetch(
        `${import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'}/api/chatroom/${roomId}`,
        {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Cache-Control': 'no-cache'
          }
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          window.dispatchEvent(new CustomEvent('roomInfoUpdated', {
            detail: { roomId, roomInfo: data.data }
          }));
        }
      }
    } catch (error) {
      console.error('Error refreshing room info:', error);
    }
  }

  /**
   * ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  forceRefresh(mode = 'normal') {
    console.log('üîÑ Force refresh triggered');
    this.adjustRefreshFrequency(mode);

    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setTimeout(() => {
      this.adjustRefreshFrequency('normal');
    }, 100);
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
   */
  getStats() {
    const now = Date.now();
    const uptime = now - (this.startTime || now);

    return {
      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      isActive: this.isActive,
      isVisible: this.isVisible,
      lastActivity: new Date(this.lastActivity).toISOString(),
      uptime: Math.floor(uptime / 1000),

      // ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
      activeIntervals: this.intervals.size,
      activeWorkers: this.workers.size,
      serviceWorkerSupported: !!this.serviceWorker,
      serviceWorkerActive: this.serviceWorker?.active ? true : false,

      // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
      refreshStats: {
        ...this.stats,
        successRate: this.stats.totalRefreshes > 0 ?
          Math.round((this.stats.successfulRefreshes / this.stats.totalRefreshes) * 100) : 0,
        averageRefreshTime: this.calculateAverageRefreshTime()
      },

      // ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      idleTime: now - this.lastActivity,
      memoryUsage: this.getMemoryUsage(),

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
      networkInfo: this.getNetworkInfo(),

      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
      currentFrequency: this.getCurrentFrequency()
    };
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
   */
  calculateAverageRefreshTime() {
    if (this.refreshTimes && this.refreshTimes.length > 0) {
      const sum = this.refreshTimes.reduce((a, b) => a + b, 0);
      return Math.round(sum / this.refreshTimes.length);
    }
    return 0;
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
   */
  getNetworkInfo() {
    if ('connection' in navigator) {
      const connection = navigator.connection;
      return {
        effectiveType: connection.effectiveType,
        downlink: connection.downlink,
        rtt: connection.rtt,
        saveData: connection.saveData
      };
    }
    return null;
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
   */
  getCurrentFrequency() {
    const modes = ['immediate', 'fast', 'normal', 'slow', 'background'];
    for (const mode of modes) {
      if (this.intervals.has(mode)) {
        return mode;
      }
    }
    return 'stopped';
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
   */
  resetStats() {
    this.stats = {
      totalRefreshes: 0,
      successfulRefreshes: 0,
      failedRefreshes: 0,
      lastRefreshTime: null
    };
    this.refreshTimes = [];
    console.log('üìä Auto refresh stats reset');
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
   */
  getMemoryUsage() {
    if (performance.memory) {
      return {
        used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),
        total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),
        limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)
      };
    }
    return null;
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
const autoRefreshManager = new AutoRefreshManager();

export default autoRefreshManager;

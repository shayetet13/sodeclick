/**
 * Enhanced API service with caching, retry logic, and request deduplication
 */
class EnhancedAPIService {
  constructor() {
    this.cache = new Map();
    this.pendingRequests = new Map();
    this.retryCount = 2; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 3 ‡πÄ‡∏õ‡πá‡∏ô 2
    this.retryDelay = 500; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1000ms ‡πÄ‡∏õ‡πá‡∏ô 500ms
    this.baseURL = '/api'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° base URL
    this.requestCounter = new Map(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö request
    this.lastRequestTime = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ request ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    this.backgroundRefreshQueue = new Set(); // ‡πÄ‡∏û‡∏¥‡πà‡∏° queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö background refresh
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á cache key ‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞ options
   */
  createCacheKey(url, options = {}) {
    const method = options.method || 'GET';
    const body = options.body ? JSON.stringify(options.body) : '';
    return `${method}:${url}:${body}`;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cache ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  isCacheValid(cacheKey, maxAge = 5 * 60 * 1000) { // 5 ‡∏ô‡∏≤‡∏ó‡∏µ default
    const cached = this.cache.get(cacheKey);
    if (!cached) return false;
    
    const now = Date.now();
    const isValid = (now - cached.timestamp) < maxAge;
    
    // ‡∏ñ‡πâ‡∏≤ cache ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (80% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤) ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° background refresh
    const isNearExpiry = (now - cached.timestamp) > (maxAge * 0.8);
    if (isValid && isNearExpiry && !this.backgroundRefreshQueue.has(cacheKey)) {
      this.backgroundRefreshQueue.add(cacheKey);
      // ‡∏à‡∏∞‡∏ó‡∏≥ background refresh ‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    }
    
    return isValid;
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache
   */
  getFromCache(cacheKey) {
    const cached = this.cache.get(cacheKey);
    return cached ? cached.data : null;
  }

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á cache
   */
  setCache(cacheKey, data, maxAge = 5 * 60 * 1000) {
    this.cache.set(cacheKey, {
      data,
      timestamp: Date.now(),
      maxAge
    });
  }

  /**
   * ‡∏•‡∏ö cache ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
   */
  cleanExpiredCache() {
    const now = Date.now();
    for (const [key, value] of this.cache.entries()) {
      if ((now - value.timestamp) > value.maxAge) {
        this.cache.delete(key);
      }
    }
  }

  /**
   * Retry logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö failed requests
   */
  async retryRequest(url, options, attempt = 1) {
    try {
      const response = await fetch(url, options);
      
      // ‡πÑ‡∏°‡πà retry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 401 (Unauthorized) ‡πÅ‡∏•‡∏∞ 403 (Forbidden)
      if (response.status === 401 || response.status === 403) {
        return response; // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô response ‡πÉ‡∏´‡πâ caller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
      }
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      return response;
    } catch (error) {
      if (attempt < this.retryCount && !error.message.includes('401') && !error.message.includes('403')) {
        console.log(`Retry attempt ${attempt} for ${url}`);
        await new Promise(resolve => setTimeout(resolve, this.retryDelay * attempt));
        return this.retryRequest(url, options, attempt + 1);
      }
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (Rate Limiting) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
   */
  checkRateLimit(url, minInterval = 500) { // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1000ms ‡πÄ‡∏õ‡πá‡∏ô 500ms
    const now = Date.now();
    const lastTime = this.lastRequestTime.get(url) || 0;
    
    // ‡πÅ‡∏¢‡∏Å rate limit ‡∏ï‡∏≤‡∏° endpoint - ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏∏‡∏Å endpoint
    let customInterval = minInterval;
    if (url.includes('/profile/')) {
      customInterval = 300; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 800ms ‡πÄ‡∏õ‡πá‡∏ô 300ms ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö profile
    } else if (url.includes('/messages')) {
      customInterval = 500; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 800ms ‡πÄ‡∏õ‡πá‡∏ô 500ms ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö messages
    } else if (url.includes('/conversations') || url.includes('/unread')) {
      customInterval = 600; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1000ms ‡πÄ‡∏õ‡πá‡∏ô 600ms ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö conversations/unread
    }
    
    if (now - lastTime < customInterval) {
      // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á warning ‡πÉ‡∏ô console ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î noise
      // console.debug(`‚ö†Ô∏è Rate limit: Request to ${url} too soon. Min interval: ${customInterval}ms`);
      return false;
    }
    
    this.lastRequestTime.set(url, now);
    return true;
  }

  /**
   * Enhanced fetch with caching, deduplication, and retry logic
   */
  async enhancedFetch(url, options = {}) {
    const method = options.method || 'GET';
    const cacheKey = this.createCacheKey(url, options);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rate limit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GET requests - ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if (method === 'GET' && !this.checkRateLimit(url, 300)) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ cache ‡∏´‡∏£‡∏∑‡∏≠ pending request
      const cachedData = this.getFromCache(cacheKey);
      if (cachedData) {
        console.log(`Rate limited - returning cache for ${url}`);
        return cachedData;
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ cache ‡πÉ‡∏´‡πâ‡∏£‡∏≠ pending request
      if (this.pendingRequests.has(cacheKey)) {
        console.log(`Rate limited - waiting for pending request: ${url}`);
        return this.pendingRequests.get(cacheKey);
      }
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô GET request ‡πÅ‡∏•‡∏∞ cache ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache
    if (method === 'GET' && this.isCacheValid(cacheKey)) {
      const cachedData = this.getFromCache(cacheKey);
      if (cachedData) {
        console.log(`Cache hit for ${url}`);
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cache ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (cachedData.data && Object.keys(cachedData.data).length > 0) {
          return cachedData;
        } else {
          console.warn(`‚ö†Ô∏è Cache contains empty data for ${url}, fetching fresh data`);
          // ‡∏•‡∏ö cache ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
          this.cache.delete(cacheKey);
        }
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ request ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if (this.pendingRequests.has(cacheKey)) {
      console.log(`Deduplicating request for ${url}`);
      return this.pendingRequests.get(cacheKey);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á promise ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö request ‡∏ô‡∏µ‡πâ
    const requestPromise = this.makeRequest(url, options, cacheKey);
    this.pendingRequests.set(cacheKey, requestPromise);

    try {
      const result = await requestPromise;
      return result;
    } finally {
      this.pendingRequests.delete(cacheKey);
    }
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° default headers ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á authorization
   */
  getDefaultHeaders() {
    const headers = {
      'Content-Type': 'application/json',
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° authorization token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡πÉ‡∏ä‡πâ sessionStorage ‡πÅ‡∏ó‡∏ô localStorage)
    const token = sessionStorage.getItem('token');
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    return headers;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á full URL
   */
  createFullURL(url) {
    // ‡∏ñ‡πâ‡∏≤ URL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ http ‡∏´‡∏£‡∏∑‡∏≠ https ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô absolute URL
    if (url.startsWith('http://') || url.startsWith('https://')) {
      return url;
    }
    
    // ‡πÉ‡∏ä‡πâ API_BASE_URL ‡∏à‡∏≤‡∏Å environment variable
    const apiBaseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
    
    // ‡∏ñ‡πâ‡∏≤ url ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ / ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° apiBaseUrl
    if (url.startsWith('/')) {
      return `${apiBaseUrl}${url}`;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ / ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡∏Å‡πà‡∏≠‡∏ô
    return `${apiBaseUrl}/${url}`;
  }

  /**
   * ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ request ‡∏à‡∏£‡∏¥‡∏á
   */
  async makeRequest(url, options, cacheKey) {
    try {
      const fullURL = this.createFullURL(url);
      const defaultHeaders = this.getDefaultHeaders();
      const finalOptions = {
        ...options,
        headers: {
          ...defaultHeaders,
          ...options.headers
        }
      };

      const response = await this.retryRequest(fullURL, finalOptions);
      
      // Handle 401/403 responses
      if (response.status === 401 || response.status === 403) {
        console.warn(`‚ö†Ô∏è ${response.status} response from ${fullURL}`);
        return {
          success: false,
          error: response.status === 401 ? 'Authentication required' : 'Access forbidden',
          status: response.status,
          data: null
        };
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö content type ‡∏Å‡πà‡∏≠‡∏ô parse JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        const text = await response.text();
        console.error(`Non-JSON response from ${fullURL}:`, text);
        return {
          success: false,
          error: `Expected JSON response but got ${contentType}`,
          status: response.status,
          data: text
        };
      }

      const data = await response.json();

      console.log('üì• EnhancedAPI received response:', {
        url: fullURL,
        status: response.status,
        success: data.success,
        hasData: !!data.data,
        dataKeys: data.data ? Object.keys(data.data) : [],
        hasProfile: !!(data.data && data.data.profile),
        profileKeys: data.data && data.data.profile ? Object.keys(data.data.profile) : []
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GET requests
      if (options.method === 'GET' || !options.method) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
        if (data.data && Object.keys(data.data).length > 0) {
          this.setCache(cacheKey, data);
        } else {
          console.warn(`‚ö†Ô∏è Not caching empty data for ${url}`);
        }
      }

      return {
        success: data.success !== false, // ‡∏ñ‡πâ‡∏≤ data.success ‡πÄ‡∏õ‡πá‡∏ô false ‡πÉ‡∏´‡πâ return false
        data: data,
        status: response.status
      };
    } catch (error) {
      console.error(`Request failed for ${url}:`, error);
      
      // Handle 401 errors gracefully
      if (error.message && error.message.includes('401')) {
        console.warn(`‚ö†Ô∏è Authorization failed for ${url} - may need login`);
        return {
          success: false,
          error: 'Authentication required',
          status: 401,
          data: null
        };
      }
      
      return {
        success: false,
        error: error.message || 'Request failed',
        status: 500,
        data: null
      };
    }
  }

  /**
   * ‡∏•‡∏ö cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö URL ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
   */
  invalidateCache(urlPattern) {
    for (const key of this.cache.keys()) {
      if (key.includes(urlPattern)) {
        this.cache.delete(key);
      }
    }
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  clearCache() {
    this.cache.clear();
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ retry options
   */
  setRetryOptions(retryCount, retryDelay) {
    this.retryCount = retryCount;
    this.retryDelay = retryDelay;
  }

  /**
   * GET request wrapper
   */
  async get(url, options = {}) {
    return this.enhancedFetch(url, { ...options, method: 'GET' });
  }

  /**
   * POST request wrapper
   */
  async post(url, data, options = {}) {
    return this.enhancedFetch(url, {
      ...options,
      method: 'POST',
      body: data ? JSON.stringify(data) : undefined,
      headers: {
        ...options.headers
      }
    });
  }

  /**
   * PUT request wrapper
   */
  async put(url, data, options = {}) {
    return this.enhancedFetch(url, {
      ...options,
      method: 'PUT',
      body: data ? JSON.stringify(data) : undefined,
      headers: {
        ...options.headers
      }
    });
  }

  /**
   * DELETE request wrapper
   */
  async delete(url, options = {}) {
    return this.enhancedFetch(url, { ...options, method: 'DELETE' });
  }

  /**
   * Background refresh ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cache ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
   */
  async processBackgroundRefresh() {
    if (this.backgroundRefreshQueue.size === 0) return;
    
    const refreshPromises = [];
    const keysToProcess = Array.from(this.backgroundRefreshQueue);
    this.backgroundRefreshQueue.clear();
    
    for (const cacheKey of keysToProcess) {
      // ‡πÅ‡∏¢‡∏Å URL ‡∏à‡∏≤‡∏Å cache key
      const [method, url] = cacheKey.split(':', 2);
      if (method === 'GET') {
        refreshPromises.push(
          this.enhancedFetch(url, { method: 'GET' })
            .catch(err => console.warn(`Background refresh failed for ${url}:`, err))
        );
      }
    }
    
    if (refreshPromises.length > 0) {
      console.log(`üîÑ Processing ${refreshPromises.length} background refreshes`);
      await Promise.allSettled(refreshPromises);
    }
  }

  /**
   * Preload ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ
   */
  async preloadData(urls) {
    const preloadPromises = urls.map(url => 
      this.get(url).catch(err => console.warn(`Preload failed for ${url}:`, err))
    );
    
    console.log(`üöÄ Preloading ${urls.length} resources`);
    return Promise.allSettled(preloadPromises);
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ
const enhancedAPI = new EnhancedAPIService();

// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î cache ‡πÅ‡∏•‡∏∞ background refresh ‡∏ó‡∏∏‡∏Å 3 ‡∏ô‡∏≤‡∏ó‡∏µ
setInterval(() => {
  enhancedAPI.cleanExpiredCache();
  enhancedAPI.processBackgroundRefresh();
}, 3 * 60 * 1000); // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏ô‡∏≤‡∏ó‡∏µ

export default enhancedAPI;

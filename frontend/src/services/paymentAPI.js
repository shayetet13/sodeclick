import { apiService } from '../config/api';

// Payment API Services
export const paymentAPI = {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  generateQRCode: (data) => apiService.post('/api/payment/generate-qr', data),
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  checkPaymentStatus: (transactionId) => apiService.get(`/api/payment/check-payment/${transactionId}`),
  
  // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  confirmPayment: (data) => apiService.post('/api/payment/confirm-payment', data),
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  getBanks: () => apiService.get('/api/payment/banks')
};

// Helper functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Payment
export const paymentHelpers = {
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  formatTimeRemaining: (milliseconds) => {
    if (milliseconds <= 0) return '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß';
    
    const minutes = Math.floor(milliseconds / 60000);
    const seconds = Math.floor((milliseconds % 60000) / 1000);
    
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  },

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  isQRCodeExpired: (expiryTime) => {
    if (!expiryTime) return false;
    return new Date() > new Date(expiryTime);
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å
  generatePaymentInfo: (qrData, bankName) => {
    return `
‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: ${bankName}
‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${qrData.accountNumber}
‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${qrData.accountName}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${qrData.amount.toLocaleString('th-TH', { style: 'currency', currency: 'THB' })}
‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: ${qrData.transactionId}
‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: ${qrData.planName}
    `.trim();
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á
  createQRPayload: (plan, bankId, userId) => {
    return {
      bankId: bankId,
      amount: plan.price.amount,
      planId: plan._id,
      planTier: plan.tier,
      planName: plan.name,
      userId: userId
    };
  },

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö polling
  pollPaymentStatus: async (transactionId, onStatusChange, onComplete, onError) => {
    const maxAttempts = 60; // 60 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (5 ‡∏ô‡∏≤‡∏ó‡∏µ)
    let attempts = 0;
    
    const poll = async () => {
      try {
        const response = await paymentAPI.checkPaymentStatus(transactionId);
        
        if (response.data.success) {
          const status = response.data.data.status;
          const isExpired = response.data.data.isExpired;
          
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
          if (onStatusChange) {
            onStatusChange(status, response.data.data);
          }
          
          // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î polling
          if (status === 'completed') {
            if (onComplete) {
              onComplete(response.data.data);
            }
            return;
          }
          
          if (status === 'expired' || isExpired) {
            if (onError) {
              onError('QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
            }
            return;
          }
          
          // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÉ‡∏´‡πâ polling ‡∏ï‡πà‡∏≠
          if (attempts < maxAttempts) {
            attempts++;
            setTimeout(poll, 5000); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          } else {
            if (onError) {
              onError('‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
            }
          }
        }
      } catch (error) {
        console.error('Error polling payment status:', error);
        if (onError) {
          onError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
        }
      }
    };
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏° polling
    poll();
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code image ‡∏à‡∏≤‡∏Å data URL
  createQRCodeImage: (qrCodeString, options = {}) => {
    const defaultOptions = {
      width: 300,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    };
    
    const finalOptions = { ...defaultOptions, ...options };
    
    // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ library ‡πÄ‡∏ä‡πà‡∏ô qrcode.js
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á placeholder image
    return `data:image/svg+xml;base64,${btoa(`
      <svg xmlns="http://www.w3.org/2000/svg" width="${finalOptions.width}" height="${finalOptions.width}" viewBox="0 0 ${finalOptions.width} ${finalOptions.width}">
        <rect width="${finalOptions.width}" height="${finalOptions.width}" fill="${finalOptions.color.light}"/>
        <text x="${finalOptions.width/2}" y="${finalOptions.width/2}" text-anchor="middle" dy=".3em" font-family="monospace" font-size="12" fill="${finalOptions.color.dark}">QR Code</text>
        <text x="${finalOptions.width/2}" y="${finalOptions.width/2 + 20}" text-anchor="middle" dy=".3em" font-family="monospace" font-size="8" fill="${finalOptions.color.dark}">${qrCodeString.substring(0, 20)}...</text>
      </svg>
    `)}`;
  },

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  validatePaymentData: (data) => {
    const errors = [];
    
    if (!data.bankId) {
      errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£');
    }
    
    if (!data.amount || data.amount <= 0) {
      errors.push('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    
    if (!data.planId) {
      errors.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à');
    }
    
    if (!data.userId) {
      errors.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    }
    
    return {
      isValid: errors.length === 0,
      errors: errors
    };
  },

  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  getStatusMessage: (status) => {
    const messages = {
      pending: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
      completed: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      expired: 'QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß',
      failed: '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
      cancelled: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'
    };
    
    return messages[status] || '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
  },

  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  getStatusColor: (status) => {
    const colors = {
      pending: 'text-yellow-600',
      completed: 'text-green-600',
      expired: 'text-red-600',
      failed: 'text-red-600',
      cancelled: 'text-gray-600'
    };
    
    return colors[status] || 'text-gray-600';
  },

  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  getStatusIcon: (status) => {
    const icons = {
      pending: '‚è≥',
      completed: '‚úÖ',
      expired: '‚è∞',
      failed: '‚ùå',
      cancelled: 'üö´'
    };
    
    return icons[status] || '‚ùì';
  }
};

export default paymentAPI;

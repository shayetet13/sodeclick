import { apiService } from '../config/api';

// Membership API Services
export const membershipAPI = {
  // ‡∏î‡∏∂‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  getPlans: () => apiService.get('/api/membership/plans'),
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  getUserMembership: (userId) => apiService.get(`/api/membership/user/${userId}`),
  
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  upgradeMembership: (data) => apiService.post('/api/upgrade-simple', data),
  
  // ‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
  claimDailyBonus: (userId) => apiService.post('/api/membership/daily-bonus', { userId }),
  
  // ‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç
  spinWheel: (userId) => apiService.post('/api/membership/spin-wheel', { userId }),
  
  // ‡πÇ‡∏≠‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
  transferCoins: (fromUserId, toUserId, amount) => 
    apiService.post('/api/membership/transfer-coins', { fromUserId, toUserId, amount }),
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ action
  checkAction: (userId, action) => apiService.get(`/api/membership/check-action/${userId}/${action}`)
};

// Helper functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI
export const membershipHelpers = {
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ tier ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  getTierName: (tier) => {
    const names = {
      member: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
      silver: 'Silver Member',
      gold: 'Gold Member',
      vip: 'VIP Member',
      vip1: 'VIP 1',
      vip2: 'VIP 2',
      diamond: 'Diamond Member',
      platinum: 'Platinum Member'
    };
    return names[tier] || tier;
  },

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ tier ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó (English format)
  getTierDisplayName: (tier) => {
    const names = {
      member: 'MEMBER',
      silver: 'SILVER',
      gold: 'GOLD',
      vip: 'VIP',
      vip1: 'VIP1',
      vip2: 'VIP2',
      diamond: 'DIAMOND',
      platinum: 'PLATINUM'
    };
    return names[tier] || 'MEMBER';
  },
  
  // ‡πÑ‡∏î‡πâ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á tier
  getTierColor: (tier) => {
    const colors = {
      member: 'text-slate-600',
      silver: 'text-slate-500',
      gold: 'text-yellow-500',
      vip: 'text-purple-500',
      vip1: 'text-pink-500',
      vip2: 'text-amber-500',
      diamond: 'text-cyan-500',
      platinum: 'text-indigo-500'
    };
    return colors[tier] || 'text-gray-500';
  },
  
  // ‡πÑ‡∏î‡πâ gradient ‡∏Ç‡∏≠‡∏á tier
  getTierGradient: (tier) => {
    const gradients = {
      member: 'from-slate-400 to-slate-600',
      silver: 'from-slate-300 to-slate-500',
      gold: 'from-yellow-400 to-yellow-600',
      vip: 'from-purple-400 to-purple-600',
      vip1: 'from-pink-400 to-purple-600',
      vip2: 'from-amber-400 to-orange-600',
      diamond: 'from-cyan-400 to-blue-600',
      platinum: 'from-indigo-400 to-purple-600'
    };
    return gradients[tier] || 'from-gray-400 to-gray-600';
  },
  
  // ‡πÑ‡∏î‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á tier
  getTierIcon: (tier) => {
    const icons = {
      member: 'üë§',
      silver: 'ü•à',
      gold: 'ü•á',
      vip: 'üëë',
      vip1: 'üíé',
      vip2: '‚≠ê',
      diamond: 'üíé',
      platinum: 'üèÜ'
    };
    return icons[tier] || 'üë§';
  },
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
  formatPrice: (amount, currency = 'THB') => {
    if (amount === 0) return '‡∏ü‡∏£‡∏µ';
    return new Intl.NumberFormat('th-TH', {
      style: 'currency',
      currency: currency
    }).format(amount);
  },
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
  formatCoins: (amount) => {
    if (amount >= 1000000) {
      return `${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `${(amount / 1000).toFixed(1)}K`;
    }
    return amount.toLocaleString();
  },
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  getTimeRemaining: (expiryDate, tier = 'member') => {
    if (!expiryDate) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö member tier ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      if (tier === 'member') {
        return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏';
      }
      return '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß';
    }
    
    const now = new Date();
    const expiry = new Date(expiryDate);
    const diff = expiry - now;
    
    if (diff <= 0) return '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß';
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (days > 0) {
      return `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${days} ‡∏ß‡∏±‡∏ô ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
    } else if (hours > 0) {
      return `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
    } else if (minutes > 0) {
      return `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
    }
    
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);
    return `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
  },

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á)
  getTimeRemainingDetailed: (expiryDate, tier = 'member') => {
    if (!expiryDate) {
      if (tier === 'member') {
        return { text: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏', isExpired: false };
      }
      return { text: '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß', isExpired: true };
    }
    
    const now = new Date();
    const expiry = new Date(expiryDate);
    const diff = expiry - now;
    
    if (diff <= 0) {
      return { text: '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß', isExpired: true };
    }
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);
    
    let text = '';
    if (days > 0) {
      text = `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${days} ‡∏ß‡∏±‡∏ô ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
    } else if (hours > 0) {
      text = `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
    } else if (minutes > 0) {
      text = `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ ${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
    } else {
      text = `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
    }
    
    return { text, isExpired: false, diff };
  },

  // ‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≤‡∏° tier
  getMembershipDuration: (tier, isExpired = false) => {
    if (isExpired) {
      return '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß';
    }

    const durations = {
      member: '365 ‡∏ß‡∏±‡∏ô (‡∏ü‡∏£‡∏µ)',
      silver: '7 ‡∏ß‡∏±‡∏ô',
      gold: '15 ‡∏ß‡∏±‡∏ô',
      vip: '30 ‡∏ß‡∏±‡∏ô (1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)',
      vip1: '30 ‡∏ß‡∏±‡∏ô (1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)',
      vip2: '30 ‡∏ß‡∏±‡∏ô (1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)',
      diamond: '30 ‡∏ß‡∏±‡∏ô (1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)',
      platinum: '30 ‡∏ß‡∏±‡∏ô (1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)'
    };
    return durations[tier] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  },
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tier ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
  hasFeature: (tier, feature) => {
    const tierFeatures = {
      member: [],
      silver: [],
      gold: ['profileVideo', 'verificationBadge', 'specialFrame'],
      vip: ['profileVideo', 'verificationBadge', 'specialFrame', 'pinPosts', 'blurImages', 'createChatRooms'],
      vip1: ['profileVideo', 'verificationBadge', 'specialFrame', 'pinPosts', 'blurImages', 'createChatRooms', 'hideOnlineStatus'],
      vip2: ['profileVideo', 'verificationBadge', 'specialFrame', 'pinPosts', 'blurImages', 'createChatRooms', 'hideOnlineStatus', 'unlimitedMedia'],
      diamond: ['profileVideo', 'verificationBadge', 'specialFrame', 'pinPosts', 'blurImages', 'createChatRooms', 'hideOnlineStatus', 'unlimitedMedia', 'transferCoins'],
      platinum: ['profileVideo', 'verificationBadge', 'specialFrame', 'pinPosts', 'blurImages', 'createChatRooms', 'hideOnlineStatus', 'unlimitedMedia', 'transferCoins', 'unlimited']
    };

    return tierFeatures[tier]?.includes(feature) || false;
  }
};

export default membershipAPI;

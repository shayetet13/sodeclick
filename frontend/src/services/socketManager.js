import { io } from 'socket.io-client';

// Global socket instance ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
let globalSocket = null;
let socketUsers = new Set();

/**
 * Socket Manager ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Socket.IO connections
 */
class SocketManager {
  constructor() {
    this.socket = null;
    this.isConnected = false;
    this.rooms = new Set();
    this.listeners = new Map();
    this.connectionTimeout = null;
  }

  /**
   * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Socket.IO
   */
  async connect(baseURL) {
    if (this.socket && this.socket.connected) {
      console.log('üîå Socket already connected:', this.socket.id);
      return this.socket;
    }

    console.log('üîå Creating new Socket.IO connection to:', baseURL);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö backend connection ‡∏Å‡πà‡∏≠‡∏ô
    try {
      const response = await fetch(`${baseURL}/health`, {
        method: 'GET',
        timeout: 5000
      });
      
      if (!response.ok) {
        console.warn('‚ö†Ô∏è Backend health check failed, but proceeding with socket connection');
      } else {
        console.log('‚úÖ Backend health check passed');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Backend health check error:', error.message);
      console.log('üîÑ Proceeding with socket connection anyway...');
    }
    
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡πà‡∏≤‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    if (this.socket) {
      console.log('üîå Closing existing socket connection...');
      this.socket.disconnect();
    }
    
    // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å sessionStorage
    const token = sessionStorage.getItem('token');
    console.log('üîë Connecting with token:', token ? 'available' : 'not available');

    this.socket = io(baseURL, {
      withCredentials: true,
      timeout: 30000, // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout
      reconnection: true,
      reconnectionAttempts: 3, // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
      reconnectionDelay: 3000, // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
      reconnectionDelayMax: 10000, // ‡πÄ‡∏û‡∏¥‡πà‡∏° max delay
      forceNew: false,
      transports: ['websocket', 'polling'], // ‡πÉ‡∏ä‡πâ websocket ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡πâ‡∏ß fallback ‡πÄ‡∏õ‡πá‡∏ô polling
      upgrade: true,
      rememberUpgrade: true, // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô rememberUpgrade
      autoConnect: true,
      auth: {
        token: token
      },
      // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ping
      pingTimeout: 30000, // ‡∏•‡∏î ping timeout
      pingInterval: 15000, // ‡∏•‡∏î ping interval
      allowEIO3: true,
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ polling
      polling: {
        extraHeaders: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Credentials': 'true'
        }
      }
    });

    this.socket.on('connect', () => {
      console.log('üîå Socket connected:', this.socket.id);
      this.isConnected = true;
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ connection timeout
      if (this.connectionTimeout) {
        clearTimeout(this.connectionTimeout);
      }
      this.connectionTimeout = setTimeout(() => {
        if (this.isConnected && this.socket?.connected) {
          console.log('‚úÖ Connection established successfully');
        }
      }, 1000);
      
      // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏¢‡∏π‡πà
      this.rooms.forEach(roomId => {
        this.socket.emit('join-room', { roomId, userId: this.getCurrentUserId() });
      });
    });

    this.socket.on('disconnect', (reason) => {
      console.log('üîå Socket disconnected:', reason);
      this.isConnected = false;
      
      // Clear connection timeout
      if (this.connectionTimeout) {
        clearTimeout(this.connectionTimeout);
        this.connectionTimeout = null;
      }
      
      // ‡∏ñ‡πâ‡∏≤ disconnect ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å server restart ‡∏´‡∏£‡∏∑‡∏≠ network issues ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á reconnect
      if (reason === 'io server disconnect' || reason === 'io client disconnect') {
        console.log('üîÑ Server/client disconnect, attempting reconnection...');
        setTimeout(() => {
          if (this.socket && !this.socket.connected) {
            this.socket.connect();
          }
        }, 2000);
      }
    });

    // Listen for reconnect events
    this.socket.on('reconnect', (attemptNumber) => {
      console.log('üîÑ Socket reconnected after', attemptNumber, 'attempts');
      this.isConnected = true;
    });

    this.socket.on('reconnect_attempt', (attemptNumber) => {
      console.log('üîÑ Reconnection attempt', attemptNumber);
    });

    this.socket.on('reconnect_error', (error) => {
      console.error('‚ùå Reconnection error:', error);
    });

    this.socket.on('reconnect_failed', () => {
      console.error('‚ùå Reconnection failed after all attempts');
      this.isConnected = false;
    });

    // Listen for notifications and dispatch to window
    this.socket.on('newNotification', (notification) => {
      console.log('üîî Received notification:', notification);
      window.dispatchEvent(new CustomEvent('newNotification', {
        detail: notification
      }));
    });

    this.socket.on('connect_error', (error) => {
      console.error('‚ùå Socket connection error:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        description: error.description,
        context: error.context,
        type: error.type
      });
      this.isConnected = false;
      
      // Clear connection timeout
      if (this.connectionTimeout) {
        clearTimeout(this.connectionTimeout);
        this.connectionTimeout = null;
      }
      
      // Handle specific errors
      if (error.message) {
        if (error.message.includes('WebSocket is closed') || error.message.includes('transport closed')) {
          console.log('üîÑ Transport closed, will retry with fallback transport...');
        } else if (error.message.includes('Connection refused')) {
          console.log('üîÑ Connection refused, will retry automatically...');
        } else if (error.message.includes('400') || error.message.includes('Bad Request')) {
          console.log('üîÑ Bad Request error, switching transport...');
          // ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô transport
          if (this.socket && !this.socket.connected) {
            setTimeout(() => {
              this.socket.io.opts.transports = ['websocket'];
              this.socket.connect();
            }, 3000);
          }
        }
      }
    });

    return this.socket;
  }

  /**
   * ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
   */
  joinRoom(roomId, userId, token = null) {
    if (!this.socket || !this.socket.connected) {
      console.warn('‚ö†Ô∏è Socket not connected, cannot join room');
      return;
    }

    if (!roomId || !userId) {
      console.warn('‚ö†Ô∏è Invalid roomId or userId:', { roomId, userId });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (this.socket.currentRoom === roomId && this.socket.currentUserId === userId) {
      console.log('üìù Already in room:', roomId, 'with correct userId');
      return;
    }

    // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (this.socket.currentRoom && this.socket.currentRoom !== roomId) {
      console.log('üö™ Switching from room:', this.socket.currentRoom, 'to:', roomId);
      this.leaveRoom(this.socket.currentRoom);
    }

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    this.socket.currentRoom = roomId;
    this.socket.currentUserId = userId;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ join room
    const joinData = { roomId, userId };
    if (token) {
      joinData.token = token;
    }

    console.log('üö™ Joining room:', roomId, 'with userId:', userId, 'token:', token ? 'provided' : 'not provided');
    this.socket.emit('join-room', joinData);
    this.rooms.add(roomId);
  }

  /**
   * ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null userId)
   */
  leaveRoom(roomId) {
    if (!this.socket || !this.socket.connected) {
      console.log('üö™ Socket not connected, skipping leave room');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!this.rooms.has(roomId) && this.socket.currentRoom !== roomId) {
      console.log('üö™ Not in room:', roomId, '- skipping leave');
      return;
    }

    // ‡πÉ‡∏ä‡πâ currentUserId ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠ getCurrentUserId() ‡πÄ‡∏õ‡πá‡∏ô fallback
    const userId = this.socket.currentUserId || this.getCurrentUserId();
    
    if (!userId) {
      console.warn('‚ö†Ô∏è Cannot leave room - no valid userId available');
      // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ userId
      this.rooms.delete(roomId);
      if (this.socket.currentRoom === roomId) {
        this.socket.currentRoom = null;
        this.socket.currentUserId = null;
      }
      return;
    }
    
    console.log('üö™ Leaving room:', roomId, 'with userId:', userId);
    this.socket.emit('leave-room', { roomId, userId });
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
    this.rooms.delete(roomId);
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if (this.socket.currentRoom === roomId) {
      this.socket.currentRoom = null;
      this.socket.currentUserId = null;
    }
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener
   */
  on(event, callback) {
    if (!this.socket) {
      console.warn('‚ö†Ô∏è Socket not connected, cannot add listener');
      return;
    }

    this.socket.on(event, callback);
    
    // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cleanup
    if (!this.listeners.has(event)) {
      this.listeners.set(event, []);
    }
    this.listeners.get(event).push(callback);
  }

  /**
   * ‡∏•‡∏ö event listener
   */
  off(event, callback) {
    if (!this.socket) {
      return;
    }

    this.socket.off(event, callback);
    
    if (this.listeners.has(event)) {
      const callbacks = this.listeners.get(event);
      const index = callbacks.indexOf(callback);
      if (index > -1) {
        callbacks.splice(index, 1);
      }
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   */
  emit(event, data) {
    if (!this.socket) {
      console.warn('‚ö†Ô∏è Socket instance not available');
      return false;
    }

    if (!this.socket.connected) {
      console.warn('‚ö†Ô∏è Socket not connected, attempting to reconnect...');
      this.socket.connect();
      return false;
    }

    console.log(`üì§ Emitting ${event} with data:`, data);
    this.socket.emit(event, data);
    return true;
  }

  /**
   * ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
   */
  disconnect() {
    if (this.socket) {
      console.log('üîå Disconnecting socket...');
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
      this.rooms.clear();
      this.listeners.clear();
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
   */
  getConnectionStatus() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
    const hasSocket = !!this.socket;
    const isSocketConnected = hasSocket && this.socket.connected;
    const isManagerConnected = this.isConnected;
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ socket ‡πÅ‡∏•‡∏∞ socket.connected = true ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ socket.connected ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
    const isActuallyConnected = hasSocket ? isSocketConnected : isManagerConnected;
    
    return {
      isConnected: isActuallyConnected,
      connected: isActuallyConnected, // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
      socketId: this.socket?.id || null,
      rooms: Array.from(this.rooms),
      transport: this.socket?.io?.engine?.transport?.name || null,
      readyState: this.socket?.io?.readyState || null,
      debug: {
        hasSocket,
        isSocketConnected,
        isManagerConnected,
        socketExists: !!this.socket,
        socketConnected: this.socket?.connected,
        socketId: this.socket?.id
      }
    };
  }

  /**
   * ‡∏î‡∏∂‡∏á User ID ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ï‡πâ‡∏≠‡∏á implement ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö auth)
   */
  getCurrentUserId() {
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏£‡∏∑‡∏≠ context
    const userData = localStorage.getItem('user');
    if (userData) {
      try {
        const user = JSON.parse(userData);
        return user._id || user.id;
      } catch (error) {
        console.error('Error parsing user data:', error);
      }
    }
    return null;
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á global instance
const socketManager = new SocketManager();

export default socketManager;

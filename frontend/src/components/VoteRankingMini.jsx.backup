import React, { useState, useEffect } from 'react';
import { Trophy, Heart, Users, Crown, Medal, Award, Star, ChevronLeft, ChevronRight } from 'lucide-react';
import voteAPI, { voteHelpers } from '../services/voteAPI';
import { getMainProfileImage, getMainProfileImageGuest } from '../utils/profileImageUtils';
import { useToast } from './ui/toast';

const VoteRankingMini = ({ 
  voteType = 'popularity_combined',
  limit = 5,
  className = '',
  onUserProfileClick = null
}) => {
  const [ranking, setRanking] = useState([]);
  const [loading, setLoading] = useState(true);
  const [userProfiles, setUserProfiles] = useState({});
  const [currentView, setCurrentView] = useState(0); // 0 = Top 3, 1 = Premium Members
  const { warning } = useToast();
  
  // Check if user is logged in using sessionStorage (same as HeartVote component)
  const currentUser = JSON.parse(sessionStorage.getItem('user') || '{}');
  const isLoggedIn = !!currentUser.id;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏µ avatar ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const getAvatarColor = (name) => {
    const colors = [
      'from-red-500 to-pink-500',
      'from-blue-500 to-indigo-500', 
      'from-green-500 to-teal-500',
      'from-purple-500 to-violet-500',
      'from-orange-500 to-red-500',
      'from-pink-500 to-rose-500',
      'from-indigo-500 to-purple-500',
      'from-teal-500 to-cyan-500',
      'from-yellow-500 to-orange-500',
      'from-violet-500 to-purple-500'
    ];
    const index = (name || '').charCodeAt(0) % colors.length;
    return colors[index];
  };

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
  const fetchRanking = async () => {
    try {
      setLoading(true);
      // ‡πÉ‡∏ä‡πâ voteRankingAPI ‡πÅ‡∏ó‡∏ô voteAPI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'}/api/vote/ranking?voteType=${voteType}&limit=5&sortBy=totalVotes`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      const result = await response.json();
      
      if (result.success && result.data) {
        const rankingData = result.data.rankings || [];
        
        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å vote API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å profile API ‡πÅ‡∏¢‡∏Å)
        const profilesMap = {};
        rankingData.forEach(item => {
          if (item.candidateId) {
            profilesMap[item.candidateId] = {
              userId: item.candidateId,
              profileImages: item.profileImages || [],
              mainProfileImageIndex: 0
            };
          }
        });
        
        setUserProfiles(profilesMap);
        setRanking(rankingData);
      } else {
        setRanking([]);
      }
    } catch (error) {
      console.error('Error fetching mini ranking:', error);
      // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô UX
    } finally {
      setLoading(false);
    }
  };

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    fetchRanking();
  }, [voteType, limit]);

  // Auto-switch between views every 5 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentView(prev => (prev + 1) % 2);
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  // Real-time vote updates
  useEffect(() => {
    const handleVoteUpdate = (data) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (data.voteType === voteType) {
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
        fetchRanking();
      }
    };

    // ‡πÉ‡∏ä‡πâ global socketManager ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡πÉ‡∏´‡∏°‡πà
    const setupSocketListener = () => {
      if (window.socketManager && window.socketManager.socket && window.socketManager.socket.connected) {
        console.log('üîå VoteRankingMini - Setting up socket listener on existing socket:', window.socketManager.socket.id);
        window.socketManager.socket.on('vote-updated', handleVoteUpdate);
        return true;
      } else {
        console.log('‚ö†Ô∏è VoteRankingMini - Socket not ready, will retry...');
        return false;
      }
    };

    // ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    let listenerSetup = setupSocketListener();
    
    // ‡∏ñ‡πâ‡∏≤ socket ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    if (!listenerSetup) {
      const retryInterval = setInterval(() => {
        if (setupSocketListener()) {
          clearInterval(retryInterval);
        }
      }, 1000);

      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        clearInterval(retryInterval);
      }, 10000);
    }

    // Cleanup
    return () => {
      if (window.socketManager && window.socketManager.socket) {
        window.socketManager.socket.off('vote-updated', handleVoteUpdate);
      }
    };
  }, [voteType]);


  if (loading) {
    return (
      <div className={`bg-white rounded-lg p-4 shadow-md ${className}`}>
        <div className="flex items-center space-x-2 mb-3">
          <Trophy className="h-5 w-5 text-amber-500" />
          <h3 className="font-semibold text-gray-800">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</h3>
        </div>
        {[...Array(3)].map((_, i) => (
          <div key={`loading-${i}`} className="animate-pulse flex items-center space-x-3 py-2">
            <div className="h-4 w-4 bg-gray-200 rounded-full"></div>
            <div className="flex-1 h-3 bg-gray-200 rounded"></div>
            <div className="h-3 w-8 bg-gray-200 rounded"></div>
          </div>
        ))}
      </div>
    );
  }

  // Premium badge component
  const getPremiumBadge = (tier) => {
    if (tier === 'platinum') {
      return (
        <div className="relative">
          <div className="bg-gradient-to-r from-gray-100 to-gray-300 text-gray-800 px-2 py-1 rounded-full text-xs font-bold shadow-lg border border-gray-400">
            <div className="flex items-center space-x-1">
              <div className="w-1.5 h-1.5 bg-gray-600 rounded-full"></div>
              <span>PLATINUM</span>
            </div>
          </div>
          <div className="absolute -top-0.5 -right-0.5 w-2 h-2 bg-gray-400 rounded-full animate-pulse"></div>
        </div>
      );
    } else if (tier === 'diamond') {
      return (
        <div className="relative">
          <div className="bg-gradient-to-r from-blue-100 to-blue-300 text-blue-800 px-2 py-1 rounded-full text-xs font-bold shadow-lg border border-blue-400">
            <div className="flex items-center space-x-1">
              <div className="w-1.5 h-1.5 bg-blue-600 rounded-full"></div>
              <span>DIAMOND</span>
            </div>
          </div>
          <div className="absolute -top-0.5 -right-0.5 w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
        </div>
      );
    }
    return null;
  };

  if (ranking.length === 0) {
    return (
      <div className={`bg-gradient-to-br from-purple-50 via-pink-50 to-white rounded-xl p-6 shadow-lg border border-purple-100 ${className}`}>
        <div className="flex items-center justify-center space-x-2 mb-4">
          <div className="relative">
            <Trophy className="h-8 w-8 text-amber-500 animate-pulse" />
            <div className="absolute -top-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full animate-ping"></div>
          </div>
          <h3 className="font-bold text-gray-800 text-lg">
            üèÜ {voteHelpers.getVoteTypeName(voteType)}
          </h3>
        </div>
        
        <div className="text-center space-y-3">
          <div className="animate-bounce">
            <p className="text-gray-600 font-medium">
              ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï
            </p>
          </div>
          <p className="text-sm text-gray-500 animate-pulse">
            ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°
          </p>
          
          {/* Decorative elements */}
          <div className="flex justify-center space-x-2 mt-4">
            <div className="w-2 h-2 bg-pink-400 rounded-full animate-ping" style={{animationDelay: '0s'}}></div>
            <div className="w-2 h-2 bg-purple-400 rounded-full animate-ping" style={{animationDelay: '0.2s'}}></div>
            <div className="w-2 h-2 bg-amber-400 rounded-full animate-ping" style={{animationDelay: '0.4s'}}></div>
          </div>
        </div>
      </div>
    );
  }

  // Get top 3 rankings
  const top3Rankings = ranking.slice(0, 3);
  
  // Filter for premium members only (Platinum and Diamond)
  const premiumRankings = ranking.filter(user => 
    user.membership?.tier === 'platinum' || user.membership?.tier === 'diamond'
  ).slice(0, 3);

  // Get current display data based on currentView
  const getCurrentDisplayData = () => {
    if (currentView === 0) {
      return {
        title: "üèÜ Top 3 Rankings",
        icon: <Crown className="h-5 w-5 text-yellow-500" />,
        data: top3Rankings,
        emptyMessage: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï"
      };
    } else {
      return {
        title: "üíé Premium Members",
        icon: <div className="w-5 h-5 bg-gradient-to-r from-gray-200 to-blue-200 rounded-full flex items-center justify-center">
          <span className="text-xs font-bold text-gray-700">üíé</span>
        </div>,
        data: premiumRankings,
        emptyMessage: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Premium Members"
      };
    }
  };

  const currentDisplay = getCurrentDisplayData();
  
  // Get rank icon with special styling for top 5
  const getRankIcon = (index) => {
    const rank = index + 1;
    if (rank === 1) {
      return (
        <div className="relative">
          <Crown className="h-6 w-6 text-yellow-500 animate-pulse" />
          <div className="absolute -top-1 -right-1 w-2 h-2 bg-yellow-400 rounded-full animate-ping"></div>
        </div>
      );
    } else if (rank === 2) {
      return <Medal className="h-5 w-5 text-gray-400" />;
    } else if (rank === 3) {
      return <Award className="h-5 w-5 text-amber-600" />;
    } else if (rank === 4) {
      return <Trophy className="h-5 w-5 text-blue-500" />;
    } else if (rank === 5) {
      return <Star className="h-5 w-5 text-purple-500" />;
    }
    return <span className="text-sm font-bold text-gray-600">#{rank}</span>;
  };

  // Get special styling for top 5
  const getTop5Styling = (index) => {
    const rank = index + 1;
    if (rank === 1) {
      return {
        container: "bg-gradient-to-r from-yellow-50 to-amber-50 border-2 border-yellow-200 shadow-lg",
        profile: "border-4 border-yellow-300 shadow-xl",
        badge: "bg-gradient-to-r from-yellow-500 to-amber-500 shadow-lg"
      };
    } else if (rank === 2) {
      return {
        container: "bg-gradient-to-r from-gray-50 to-slate-50 border-2 border-gray-200 shadow-md",
        profile: "border-3 border-gray-300 shadow-lg",
        badge: "bg-gradient-to-r from-gray-500 to-slate-500 shadow-md"
      };
    } else if (rank === 3) {
      return {
        container: "bg-gradient-to-r from-amber-50 to-orange-50 border-2 border-amber-200 shadow-md",
        profile: "border-3 border-amber-300 shadow-lg",
        badge: "bg-gradient-to-r from-amber-500 to-orange-500 shadow-md"
      };
    } else if (rank === 4) {
      return {
        container: "bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-200 shadow-md",
        profile: "border-3 border-blue-300 shadow-lg",
        badge: "bg-gradient-to-r from-blue-500 to-indigo-500 shadow-md"
      };
    } else if (rank === 5) {
      return {
        container: "bg-gradient-to-r from-purple-50 to-violet-50 border-2 border-purple-200 shadow-md",
        profile: "border-3 border-purple-300 shadow-lg",
        badge: "bg-gradient-to-r from-purple-500 to-violet-500 shadow-md"
      };
    }
    return {
      container: "bg-white border border-gray-100 shadow-sm",
      profile: "border-2 border-gray-200",
      badge: "bg-gradient-to-r from-pink-500 to-red-500"
    };
  };

  return (
    <div className={`bg-gradient-to-br from-purple-50 via-pink-50 to-white rounded-xl p-4 shadow-lg border border-purple-100 ${className}`}>
      {/* Header with switching controls */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <div className="relative">
            <Trophy className="h-8 w-8 text-amber-500 animate-bounce" />
            <div className="absolute -top-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full animate-ping"></div>
          </div>
          <h3 className="font-bold text-gray-800 text-xl">
            üèÜ {voteHelpers.getVoteTypeName(voteType)}
          </h3>
        </div>
        
        {/* Switching controls */}
        <div className="flex items-center space-x-2">
          <button
            onClick={() => setCurrentView(0)}
            className={`p-1 rounded-full transition-all duration-300 ${
              currentView === 0 
                ? 'bg-yellow-500 text-white shadow-lg' 
                : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
            }`}
          >
            <Crown className="h-4 w-4" />
          </button>
          <button
            onClick={() => setCurrentView(1)}
            className={`p-1 rounded-full transition-all duration-300 ${
              currentView === 1 
                ? 'bg-blue-500 text-white shadow-lg' 
                : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
            }`}
          >
            <span className="text-sm">üíé</span>
          </button>
        </div>
      </div>

      {/* Current View Title */}
      <div className="flex items-center space-x-2 mb-4">
        {currentDisplay.icon}
        <h4 className="font-bold text-gray-800 text-lg">{currentDisplay.title}</h4>
      </div>

      {/* Current View Content */}
      <div className="space-y-3">
        {currentDisplay.data.length === 0 ? (
          <div className="text-center py-8">
            <div className="animate-bounce">
              <p className="text-gray-600 font-medium">
                {currentDisplay.emptyMessage}
              </p>
            </div>
            <p className="text-sm text-gray-500 animate-pulse mt-2">
              {currentView === 0 ? '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°' : '‡∏£‡∏≠ Platinum ‡πÅ‡∏•‡∏∞ Diamond Members ‡∏°‡∏≤‡πÇ‡∏´‡∏ß‡∏ï'}
            </p>
          </div>
        ) : (
          currentDisplay.data.map((item, index) => {
          const totalVotes = item.totalVotes || 0;
          const uniqueVoters = item.uniqueVoterCount || 0;
          const styling = getTop5Styling(index);
          const rank = index + 1;

          return (
            <div
              key={item.candidateId || `ranking-${index}`}
              className={`${styling.container} rounded-xl p-3 transition-all duration-500 hover:scale-105 hover:shadow-xl cursor-pointer transform`}
              style={{
                animationDelay: `${index * 0.2}s`,
                animation: 'fadeInUp 0.6s ease-out forwards'
              }}
              onClick={() => {
                // Check if user is logged in first
                if (!isLoggedIn) {
                  warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
                  return;
                }
                
                // Navigate to user profile
                if (onUserProfileClick && item) {
                  onUserProfileClick(item);
                } else {
                  // Default navigation to profile page
                  const profileUrl = `/profile/${item._id || item.candidateId}`;
                  window.location.href = profileUrl;
                }
              }}
            >
              <div className="flex items-center space-x-3">
                {/* Rank Icon */}
                <div className="flex-shrink-0 flex items-center justify-center w-10 h-10">
                  {getRankIcon(index)}
                </div>

                {/* Profile Image */}
                <div className="flex-shrink-0">
                  <div className={`w-14 h-14 rounded-full overflow-hidden ${styling.profile} bg-gray-100 transition-all duration-300 hover:scale-110`}>
                    {(() => {
                      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å profile API
                      const userProfile = userProfiles[item.candidateId];
                      const profileImages = userProfile?.profileImages || [];
                      const mainProfileImageIndex = userProfile?.mainProfileImageIndex || 0;
                      
                      // ‡πÉ‡∏ä‡πâ getMainProfileImageGuest ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö guest mode
                      const mainImage = getMainProfileImageGuest(profileImages, mainProfileImageIndex, item.candidateId, item.gender);
                      
                      if (mainImage && mainImage.trim() !== '' && !mainImage.startsWith('data:image/svg+xml')) {
                        return (
                          <img
                            src={mainImage}
                            alt={item.displayName || item.username || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}
                            className="w-full h-full object-cover transition-transform duration-300 hover:scale-110"
                            onError={(e) => {
                              // ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á avatar ‡πÅ‡∏ó‡∏ô
                              e.target.style.display = 'none';
                              const parentDiv = e.target.parentElement;
                              if (parentDiv) {
                                const userName = item.displayName || item.username || '?';
                                const avatarColor = getAvatarColor(userName);
                                parentDiv.innerHTML = `
                                  <div class="w-full h-full bg-gradient-to-br ${avatarColor} flex items-center justify-center">
                                    <span class="text-white font-bold text-xl drop-shadow-lg">
                                      ${String(userName).charAt(0).toUpperCase()}
                                    </span>
                                  </div>
                                `;
                              }
                            }}
                          />
                        );
                      } else {
                        // Avatar ‡πÅ‡∏ó‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
                        return (
                          <div className={`w-full h-full bg-gradient-to-br ${getAvatarColor(item.displayName || item.username)} flex items-center justify-center`}>
                            <span className="text-white font-bold text-xl drop-shadow-lg">
                              {String(item.displayName || item.username || '?').charAt(0).toUpperCase()}
                            </span>
                          </div>
                        );
                      }
                    })()}
                  </div>
                </div>

                {/* User Info */}
                <div className="flex-1 min-w-0">
                  <div className="flex items-center space-x-2 mb-1">
                    <h4 className="text-base font-bold text-gray-900 truncate">
                      {item.displayName || item.username || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}
                    </h4>
                    {getPremiumBadge(item.membership?.tier)}
                  </div>
                  <div className="flex items-center space-x-1 text-xs text-gray-600">
                    <span className="flex items-center space-x-1">
                      <Users className="h-3 w-3 text-blue-500" />
                      <span>{uniqueVoters.toLocaleString()} ‡∏Ñ‡∏ô‡πÇ‡∏´‡∏ß‡∏ï</span>
                    </span>
                  </div>
                </div>

                {/* Vote Score Badge */}
                <div className="flex-shrink-0">
                  <div className={`${styling.badge} text-white px-3 py-2 rounded-lg shadow-lg transform transition-all duration-300 hover:scale-110`}>
                    <div className="text-center">
                      <div className="text-sm font-bold">
                        {totalVotes.toLocaleString()}
                      </div>
                      <div className="text-xs opacity-90">
                        ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
          })}
        )}
      </div>

      {/* View indicator dots */}
      <div className="flex justify-center space-x-2 mt-4">
        <div className={`w-2 h-2 rounded-full transition-all duration-300 ${
          currentView === 0 ? 'bg-yellow-500' : 'bg-gray-300'
        }`}></div>
        <div className={`w-2 h-2 rounded-full transition-all duration-300 ${
          currentView === 1 ? 'bg-blue-500' : 'bg-gray-300'
        }`}></div>
      </div>

      {/* Show more indicator */}
      {currentView === 0 && ranking.length > 3 && (
        <div className="text-center mt-4">
          <div className="inline-flex items-center space-x-2 text-sm text-gray-500 animate-pulse">
            <span>‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {ranking.length - 3} ‡∏Ñ‡∏ô</span>
            <div className="w-1 h-1 bg-gray-400 rounded-full animate-ping"></div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VoteRankingMini;

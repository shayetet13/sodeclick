import React, { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from './ui/dialog';
import { Badge } from './ui/badge';
import { useToast } from './ui/toast';
import { 
  Users, 
  Search, 
  Plus, 
  Edit, 
  Trash2, 
  Crown, 
  User, 
  Eye,
  Ban,
  Unlock,
  Mail,
  Clock,
  AlertTriangle,
  Key
} from 'lucide-react';

const UserManagement = () => {
  const { success, error, warning, info } = useToast();
  const [users, setUsers] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [selectedUser, setSelectedUser] = useState(null);
  const [showBanModal, setShowBanModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showProfileModal, setShowProfileModal] = useState(false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [showResetPasswordModal, setShowResetPasswordModal] = useState(false);
  const [confirmData, setConfirmData] = useState(null);

  const [banForm, setBanForm] = useState({
    isBanned: false,
    banReason: '',
    banDuration: 1,
    banDurationType: 'days'
  });

  const [editForm, setEditForm] = useState({
    username: '',
    firstName: '',
    lastName: '',
    email: '',
    role: 'user',
    membership: { tier: 'member' }
  });

  const [resetPasswordForm, setResetPasswordForm] = useState({
    newPassword: '',
    confirmPassword: ''
  });

  const [createForm, setCreateForm] = useState({
    username: '',
    email: '',
    password: '',
    firstName: '',
    lastName: '',
    dateOfBirth: '',
    gender: 'male',
    lookingFor: 'both',
    location: '',
    role: 'user',
    membership: { tier: 'member' }
  });

  useEffect(() => {
    fetchUsers();
  }, [currentPage, searchTerm]);

  const fetchUsers = async () => {
    try {
      const token = sessionStorage.getItem('token');
      const params = new URLSearchParams({
        page: currentPage,
        limit: 10,
        search: searchTerm,
        sort: '-createdAt'
      });

      const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/admin/users?${params}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (res.ok) {
        const data = await res.json();
        setUsers(data.users);
        setTotalPages(data.pagination.pages);
      }
         } catch (error) {
       console.error('Error fetching users:', error);
               error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', 5000);
     } finally {
      setIsLoading(false);
    }
  };

  const handleBanUser = async (userId) => {
    try {
      const token = sessionStorage.getItem('token');
      const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/admin/users/${userId}/ban-duration`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(banForm)
      });

      if (res.ok) {
        await fetchUsers();
        setShowBanModal(false);
        setBanForm({
          isBanned: false,
          banReason: '',
          banDuration: 1,
          banDurationType: 'days'
        });
        success(banForm.isBanned ? '‚úÖ ‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚úÖ ‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 3000);
      }
         } catch (error) {
       console.error('Error banning user:', error);
               error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', 5000);
     }
  };

  const handleEditUser = async (userId) => {
    try {
      const token = sessionStorage.getItem('token');
      const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/admin/users/${userId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(editForm)
      });

      if (res.ok) {
        await fetchUsers();
        setShowEditModal(false);
        success('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 3000);
      }
         } catch (error) {
       console.error('Error editing user:', error);
               error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', 5000);
     }
  };

  const handleCreateUser = async () => {
    // Validate required fields
    const requiredFields = ['username', 'email', 'password', 'firstName', 'lastName', 'dateOfBirth', 'gender', 'lookingFor', 'location'];
    const missingFields = requiredFields.filter(field => !createForm[field]);
    
    if (missingFields.length > 0) {
              error(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${missingFields.join(', ')}`, 5000);
      return;
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(createForm.email)) {
              error('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 5000);
      return;
    }

    // Validate username length
    if (createForm.username.length < 3) {
      error('Username ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£', 5000);
      return;
    }

    // Validate password length
    if (createForm.password.length < 6) {
      error('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£', 5000);
      return;
    }

    // Check if username or email already exists in current users list
    const existingUser = users.find(user => 
      user.username === createForm.username || user.email === createForm.email
    );
    
    if (existingUser) {
      if (existingUser.username === createForm.username) {
        error('Username ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å username ‡∏≠‡∏∑‡πà‡∏ô', 5000);
        return;
      }
      if (existingUser.email === createForm.email) {
        error('‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô', 5000);
        return;
      }
    }

    // Show confirmation with user data
    const confirmData = {
      title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà',
      message: `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà?`,
      details: [
        { label: 'Username', value: createForm.username },
        { label: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•', value: createForm.email },
        { label: '‡∏ä‡∏∑‡πà‡∏≠', value: `${createForm.firstName} ${createForm.lastName}` },
        { label: '‡πÄ‡∏û‡∏®', value: createForm.gender === 'male' ? '‡∏ä‡∏≤‡∏¢' : createForm.gender === 'female' ? '‡∏´‡∏ç‡∏¥‡∏á' : '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' },
        { label: '‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô', value: createForm.lookingFor === 'male' ? '‡∏ä‡∏≤‡∏¢' : createForm.lookingFor === 'female' ? '‡∏´‡∏ç‡∏¥‡∏á' : '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏û‡∏®' },
        { label: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', value: createForm.location },
        { label: '‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î', value: createForm.dateOfBirth },
        { label: '‡∏£‡∏∞‡∏î‡∏±‡∏ö', value: createForm.role === 'admin' ? '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' },
        { label: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', value: createForm.membership.tier.toUpperCase() }
      ],
      onConfirm: () => createUser()
    };

    setConfirmData(confirmData);
    setShowConfirmModal(true);
    return;

      };

  const createUser = async () => {
    try {
      const token = sessionStorage.getItem('token');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
      const userData = {
        username: createForm.username,
        email: createForm.email,
        password: createForm.password,
        firstName: createForm.firstName,
        lastName: createForm.lastName,
        dateOfBirth: createForm.dateOfBirth,
        gender: createForm.gender,
        lookingFor: createForm.lookingFor,
        location: createForm.location,
        role: createForm.role,
        membership: {
          tier: createForm.membership.tier
        }
      };
      
      console.log('üì§ Sending userData:', userData);
      console.log('üì§ JSON stringified:', JSON.stringify(userData));
      
      const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/admin/users`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(userData)
      });

      if (res.ok) {
        await fetchUsers();
        setShowCreateModal(false);
        setShowConfirmModal(false);
        setCreateForm({
          username: '',
          email: '',
          password: '',
          firstName: '',
          lastName: '',
          dateOfBirth: '',
          gender: 'male',
          lookingFor: 'both',
          location: '',
          role: 'user',
          membership: { tier: 'member' }
        });
        success(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n` +
          `Username: ${createForm.username}\n` +
          `‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${createForm.email}\n` +
          `‡∏ä‡∏∑‡πà‡∏≠: ${createForm.firstName} ${createForm.lastName}\n` +
          `‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${createForm.role === 'admin' ? '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}\n` +
          `‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${createForm.membership.tier.toUpperCase()}`, 8000);
      } else {
        const errorData = await res.json();
        console.error('Error response:', errorData);
        console.error('Error details:', errorData.errors);
        console.error('Full error object:', JSON.stringify(errorData, null, 2));
        
        // Handle specific error messages
        if (errorData.message === 'User with this email or username already exists') {
          error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n\n‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠ Username ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô', 8000);
        } else if (errorData.message === 'Missing required fields') {
          error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 5000);
        } else if (errorData.message === 'Invalid email format') {
          error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 5000);
        } else if (errorData.message === 'Invalid date format for dateOfBirth') {
          error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 5000);
        } else if (errorData.message === 'Username must be at least 3 characters long') {
          error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n\nUsername ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£', 5000);
        } else if (errorData.message === 'Validation failed' && errorData.errors) {
          const errorMessages = errorData.errors.map(err => {
            if (err.field === 'username' && err.message.includes('shorter than the minimum allowed length')) {
              return 'Username ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£';
            }
            return `${err.field}: ${err.message}`;
          }).join('\n');
          error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n\n${errorMessages}`, 8000);
        } else {
          error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n\n${errorData.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`, 5000);
        }
      }
    } catch (error) {
      console.error('Error creating user:', error);
      error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 5000);
    }
  };

  const handleDeleteUser = async (userId) => {
    const confirmData = {
      title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
      message: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ?',
      details: [],
      onConfirm: () => deleteUser(userId)
    };
    setConfirmData(confirmData);
    setShowConfirmModal(true);
  };

  const deleteUser = async (userId) => {

    try {
      const token = sessionStorage.getItem('token');
      const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/admin/users/${userId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (res.ok) {
        await fetchUsers();
        setShowConfirmModal(false); // ‡∏õ‡∏¥‡∏î confirm modal
        success('‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 3000); // ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
      } else {
        const errorData = await res.json();
        setShowConfirmModal(false); // ‡∏õ‡∏¥‡∏î confirm modal ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error response
        error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n\n${errorData.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`, 5000);
      }
    } catch (error) {
      console.error('Error deleting user:', error);
      setShowConfirmModal(false); // ‡∏õ‡∏¥‡∏î confirm modal ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error
      error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', 5000); // ‡πÅ‡∏™‡∏î‡∏á error 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }
  };

    const handleViewProfile = async (userId) => {
    try {
      const token = sessionStorage.getItem('token');
      const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/admin/users/${userId}/profile`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (res.ok) {
        const userData = await res.json();
        setSelectedUser(userData);
        setShowProfileModal(true);
      }
         } catch (error) {
       console.error('Error fetching user profile:', error);
               error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', 5000);
     }
  };

  const validatePassword = (password) => {
    const hasUpperCase = /[A-Z]/.test(password);
    const hasNumber = /\d/.test(password);
    return hasUpperCase && hasNumber;
  };

  const handleResetPassword = async () => {
    // Validate password requirements
    if (!validatePassword(resetPasswordForm.newPassword)) {
      error('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà 1 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ', 5000);
      return;
    }

    // Check if passwords match
    if (resetPasswordForm.newPassword !== resetPasswordForm.confirmPassword) {
      error('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 5000);
      return;
    }

    // Check password length
    if (resetPasswordForm.newPassword.length < 6) {
      error('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£', 5000);
      return;
    }

    try {
      const token = sessionStorage.getItem('token');
      const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/admin/users/${selectedUser._id}/reset-password`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ newPassword: resetPasswordForm.newPassword })
      });

      if (res.ok) {
        setShowResetPasswordModal(false);
        setResetPasswordForm({ newPassword: '', confirmPassword: '' });
        success('‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 3000);
      } else {
        const errorData = await res.json();
        error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: ${errorData.message}`, 5000);
      }
    } catch (error) {
      console.error('Error resetting password:', error);
      error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô', 5000);
    }
  };

  const getStatusBadge = (user) => {
    if (user.isBanned) {
      return <Badge variant="destructive" className="text-center">‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô</Badge>;
    }
    if (!user.isActive) {
      return <Badge variant="secondary" className="text-center">‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</Badge>;
    }
    return <Badge variant="default" className="text-center">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</Badge>;
  };

  const getRoleBadge = (role) => {
    const colors = {
      user: 'bg-blue-100 text-blue-800',
      admin: 'bg-purple-100 text-purple-800',
      // superadmin: 'bg-red-100 text-red-800' // ‡∏ã‡πà‡∏≠‡∏ô SuperAdmin
    };
    return <Badge className={`${colors[role] || 'bg-gray-100 text-gray-800'} hover:bg-opacity-100`}>{role}</Badge>;
  };

  const getMembershipBadge = (tier) => {
    const colors = {
      member: 'bg-gray-100 text-gray-800',
      silver: 'bg-slate-100 text-slate-800',
      gold: 'bg-amber-100 text-amber-800',
      vip: 'bg-purple-100 text-purple-800',
      diamond: 'bg-blue-100 text-blue-800',
      platinum: 'bg-green-100 text-green-800'
    };
    return <Badge className={`${colors[tier] || 'bg-gray-100 text-gray-800'} text-center hover:bg-opacity-100`}>{tier}</Badge>;
  };

  const formatDate = (date) => {
    return new Date(date).toLocaleDateString('th-TH', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-pink-500 mx-auto mb-4"></div>
          <h1 className="text-xl font-bold text-slate-800">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...</h1>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-white">
      {/* Header */}
      <div className="bg-white border-b border-slate-200 p-6 shadow-sm">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-serif font-bold text-slate-800 flex items-center gap-3">
              <Users size={32} />
              ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            </h1>
            <p className="text-slate-600 mt-1">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
          </div>
          <div className="flex gap-3">
            <Button 
              className="bg-gradient-to-r from-pink-500 to-violet-500 hover:from-pink-600 hover:to-violet-600 text-white"
              onClick={() => setShowCreateModal(true)}
            >
              <Plus size={16} className="mr-2" />
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            </Button>
            <Button variant="outline" onClick={() => window.location.href = '/admin'}>
              ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Dashboard
            </Button>
          </div>
        </div>
      </div>

      {/* Search */}
      <div className="max-w-7xl mx-auto p-6">
        <Card className="mb-6">
          <CardContent className="p-6">
            <div className="flex gap-4">
              <div className="flex-1">
                <Label htmlFor="search">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</Label>
                <div className="relative">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-slate-400" />
                  <Input
                    id="search"
                    placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, username..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <div className="flex items-end">
                <Button variant="outline" onClick={fetchUsers}>
                  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Users Table */}
        <Card>
          <CardHeader>
            <CardTitle>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ({users.filter(user => user.role !== 'superadmin').length} ‡∏Ñ‡∏ô)</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b border-slate-200">
                    <th className="text-left p-4 font-medium text-slate-700">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</th>
                    <th className="text-left p-4 font-medium text-slate-700">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                    <th className="text-center p-4 font-medium text-slate-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                    <th className="text-left p-4 font-medium text-slate-700">‡∏£‡∏∞‡∏î‡∏±‡∏ö</th>
                    <th className="text-left p-4 font-medium text-slate-700">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</th>
                    <th className="text-left p-4 font-medium text-slate-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</th>
                    <th className="text-left p-4 font-medium text-slate-700">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                  </tr>
                </thead>
                <tbody>
                  {users.filter(user => user.role !== 'superadmin').map((user) => (
                    <tr key={user._id} className="border-b border-slate-100 hover:bg-slate-50">
                      <td className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-gradient-to-br from-pink-400 to-violet-400 rounded-full flex items-center justify-center text-white font-semibold">
                            {user.firstName?.charAt(0) || user.username?.charAt(0) || 'U'}
                          </div>
                          <div>
                            <div className="font-medium text-slate-800">
                              {user.firstName} {user.lastName}
                            </div>
                            <div className="text-sm text-slate-500">@{user.username}</div>
                          </div>
                        </div>
                      </td>
                      <td className="p-4">
                        <div className="flex items-center gap-2">
                          <Mail size={14} className="text-slate-400" />
                          <span className="text-sm">{user.email}</span>
                        </div>
                      </td>
                      <td className="p-4 text-center">
                        {getStatusBadge(user)}
                      </td>
                      <td className="p-4">
                        {getRoleBadge(user.role)}
                      </td>
                      <td className="p-4">
                        {getMembershipBadge(user.membership?.tier)}
                      </td>
                      <td className="p-4 text-sm text-slate-600">
                        {formatDate(user.createdAt)}
                      </td>
                      <td className="p-4">
                        <div className="flex gap-2">
                          {/* ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SuperAdmin */}
                          {user.role !== 'superadmin' && (
                            <>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleViewProfile(user._id)}
                              >
                                <Eye size={14} />
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  setSelectedUser(user);
                                  setEditForm({
                                    username: user.username,
                                    firstName: user.firstName,
                                    lastName: user.lastName,
                                    email: user.email,
                                    role: user.role,
                                    membership: user.membership
                                  });
                                  setShowEditModal(true);
                                }}
                              >
                                <Edit size={14} />
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  setSelectedUser(user);
                                  setBanForm({
                                    isBanned: !user.isBanned,
                                    banReason: user.banReason || '',
                                    banDuration: 1,
                                    banDurationType: 'days'
                                  });
                                  setShowBanModal(true);
                                }}
                              >
                                {user.isBanned ? <Unlock size={14} /> : <Ban size={14} />}
                              </Button>
                                                             <Button
                                 size="sm"
                                 variant="outline"
                                 onClick={() => handleDeleteUser(user._id)}
                                 className="text-red-600 hover:text-red-700"
                               >
                                 <Trash2 size={14} />
                               </Button>
                               <Button
                                 size="sm"
                                 variant="outline"
                                 onClick={() => {
                                   setSelectedUser(user);
                                   setResetPasswordForm({ newPassword: '', confirmPassword: '' });
                                   setShowResetPasswordModal(true);
                                 }}
                                 className="text-blue-600 hover:text-blue-700"
                               >
                                 <Key size={14} />
                               </Button>
                            </>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex justify-center mt-6">
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    disabled={currentPage === 1}
                    onClick={() => setCurrentPage(currentPage - 1)}
                  >
                    ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                  </Button>
                  <span className="flex items-center px-4 text-slate-600">
                    ‡∏´‡∏ô‡πâ‡∏≤ {currentPage} ‡∏à‡∏≤‡∏Å {totalPages}
                  </span>
                  <Button
                    variant="outline"
                    disabled={currentPage === totalPages}
                    onClick={() => setCurrentPage(currentPage + 1)}
                  >
                    ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

             {/* Ban Modal */}
       <Dialog open={showBanModal} onOpenChange={setShowBanModal}>
         <DialogContent className="sm:max-w-md max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              {banForm.isBanned ? <Ban size={20} /> : <Unlock size={20} />}
              {banForm.isBanned ? '‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' : '‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}
            </DialogTitle>
            <DialogDescription>
              {banForm.isBanned ? '‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' : '‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            {banForm.isBanned && (
              <>
                <div>
                  <Label htmlFor="banReason">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</Label>
                  <Input
                    id="banReason"
                    value={banForm.banReason}
                    onChange={(e) => setBanForm({...banForm, banReason: e.target.value})}
                    placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô"
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="banDuration">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</Label>
                    <Input
                      id="banDuration"
                      type="number"
                      value={banForm.banDuration}
                      onChange={(e) => setBanForm({...banForm, banDuration: parseInt(e.target.value)})}
                      min="1"
                    />
                  </div>
                  <div>
                    <Label htmlFor="banDurationType">‡∏´‡∏ô‡πà‡∏ß‡∏¢</Label>
                    <select
                      id="banDurationType"
                      value={banForm.banDurationType}
                      onChange={(e) => setBanForm({...banForm, banDurationType: e.target.value})}
                      className="w-full p-2 border border-slate-200 rounded-md"
                    >
                      <option value="hours">‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</option>
                      <option value="days">‡∏ß‡∏±‡∏ô</option>
                      <option value="months">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
                      <option value="permanent">‡∏ñ‡∏≤‡∏ß‡∏£</option>
                    </select>
                  </div>
                </div>
              </>
            )}
            <div className="flex gap-3">
              <Button
                className="flex-1"
                onClick={() => handleBanUser(selectedUser._id)}
              >
                {banForm.isBanned ? '‡πÅ‡∏ö‡∏ô' : '‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô'}
              </Button>
              <Button
                variant="outline"
                className="flex-1"
                onClick={() => setShowBanModal(false)}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

             {/* Edit Modal */}
       <Dialog open={showEditModal} onOpenChange={setShowEditModal}>
         <DialogContent className="sm:max-w-md max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Edit size={20} />
              ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            </DialogTitle>
            <DialogDescription>
              ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡∏£‡∏∞‡∏î‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="editFirstName">‡∏ä‡∏∑‡πà‡∏≠</Label>
                <Input
                  id="editFirstName"
                  value={editForm.firstName}
                  onChange={(e) => setEditForm({...editForm, firstName: e.target.value})}
                />
              </div>
              <div>
                <Label htmlFor="editLastName">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</Label>
                <Input
                  id="editLastName"
                  value={editForm.lastName}
                  onChange={(e) => setEditForm({...editForm, lastName: e.target.value})}
                />
              </div>
            </div>
            <div>
              <Label htmlFor="editUsername">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</Label>
              <Input
                id="editUsername"
                value={editForm.username}
                disabled
                className="bg-gray-100 cursor-not-allowed"
              />
            </div>
            <div>
              <Label htmlFor="editEmail">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</Label>
              <Input
                id="editEmail"
                type="email"
                value={editForm.email}
                onChange={(e) => setEditForm({...editForm, email: e.target.value})}
              />
            </div>
            <div>
              <Label htmlFor="editRole">‡∏£‡∏∞‡∏î‡∏±‡∏ö</Label>
              <select
                id="editRole"
                value={editForm.role}
                onChange={(e) => setEditForm({...editForm, role: e.target.value})}
                className="w-full p-2 border border-slate-200 rounded-md"
              >
                <option value="user">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</option>
                <option value="admin">‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</option>
                {/* ‡∏ã‡πà‡∏≠‡∏ô SuperAdmin ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
                {/* <option value="superadmin">‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</option> */}
              </select>
            </div>
            <div>
              <Label htmlFor="editMembership">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</Label>
              <select
                id="editMembership"
                value={editForm.membership.tier}
                onChange={(e) => setEditForm({
                  ...editForm, 
                  membership: {...editForm.membership, tier: e.target.value}
                })}
                className="w-full p-2 border border-slate-200 rounded-md"
              >
                <option value="member">Member</option>
                <option value="silver">Silver</option>
                <option value="gold">Gold</option>
                <option value="vip">VIP</option>
                <option value="diamond">Diamond</option>
                <option value="platinum">Platinum</option>
              </select>
            </div>
            <div className="flex gap-3">
              <Button
                className="flex-1"
                onClick={() => handleEditUser(selectedUser._id)}
              >
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              </Button>
              <Button
                variant="outline"
                className="flex-1"
                onClick={() => setShowEditModal(false)}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Create Modal */}
      <Dialog open={showCreateModal} onOpenChange={setShowCreateModal}>
        <DialogContent className="sm:max-w-lg max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Plus size={20} />
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
            </DialogTitle>
            <DialogDescription>
              ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            </DialogDescription>
          </DialogHeader>
                     <div className="space-y-3">
             {/* Row 1: Username & Email */}
             <div className="grid grid-cols-2 gap-3">
               <div>
                 <Label htmlFor="createUsername" className="text-sm">Username</Label>
                 <Input
                   id="createUsername"
                   value={createForm.username}
                   onChange={(e) => setCreateForm({...createForm, username: e.target.value})}
                   className="h-9 text-sm"
                 />
               </div>
               <div>
                 <Label htmlFor="createEmail" className="text-sm">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</Label>
                 <Input
                   id="createEmail"
                   type="email"
                   value={createForm.email}
                   onChange={(e) => setCreateForm({...createForm, email: e.target.value})}
                   className="h-9 text-sm"
                 />
               </div>
             </div>
             
             {/* Row 2: Password & Date of Birth */}
             <div className="grid grid-cols-2 gap-3">
               <div>
                 <Label htmlFor="createPassword" className="text-sm">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</Label>
                 <Input
                   id="createPassword"
                   type="password"
                   value={createForm.password}
                   onChange={(e) => setCreateForm({...createForm, password: e.target.value})}
                   className="h-9 text-sm"
                 />
               </div>
               <div>
                 <Label htmlFor="createDateOfBirth" className="text-sm">‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î</Label>
                 <Input
                   id="createDateOfBirth"
                   type="date"
                   value={createForm.dateOfBirth}
                   onChange={(e) => setCreateForm({...createForm, dateOfBirth: e.target.value})}
                   className="h-9 text-sm"
                 />
               </div>
             </div>
             
             {/* Row 3: First Name & Last Name */}
             <div className="grid grid-cols-2 gap-3">
               <div>
                 <Label htmlFor="createFirstName" className="text-sm">‡∏ä‡∏∑‡πà‡∏≠</Label>
                 <Input
                   id="createFirstName"
                   value={createForm.firstName}
                   onChange={(e) => setCreateForm({...createForm, firstName: e.target.value})}
                   className="h-9 text-sm"
                 />
               </div>
               <div>
                 <Label htmlFor="createLastName" className="text-sm">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</Label>
                 <Input
                   id="createLastName"
                   value={createForm.lastName}
                   onChange={(e) => setCreateForm({...createForm, lastName: e.target.value})}
                   className="h-9 text-sm"
                 />
               </div>
             </div>
             
             {/* Row 4: Location & Gender */}
             <div className="grid grid-cols-2 gap-3">
               <div>
                 <Label htmlFor="createLocation" className="text-sm">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</Label>
                 <Input
                   id="createLocation"
                   value={createForm.location}
                   onChange={(e) => setCreateForm({...createForm, location: e.target.value})}
                   className="h-9 text-sm"
                 />
               </div>
               <div>
                 <Label htmlFor="createGender" className="text-sm">‡πÄ‡∏û‡∏®</Label>
                 <select
                   id="createGender"
                   value={createForm.gender}
                   onChange={(e) => setCreateForm({...createForm, gender: e.target.value})}
                   className="w-full h-9 p-2 border border-slate-200 rounded-md text-sm"
                 >
                   <option value="male">‡∏ä‡∏≤‡∏¢</option>
                   <option value="female">‡∏´‡∏ç‡∏¥‡∏á</option>
                   <option value="other">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                 </select>
               </div>
             </div>
             
             {/* Row 5: Looking For & Role */}
             <div className="grid grid-cols-2 gap-3">
               <div>
                 <Label htmlFor="createLookingFor" className="text-sm">‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô</Label>
                 <select
                   id="createLookingFor"
                   value={createForm.lookingFor}
                   onChange={(e) => setCreateForm({...createForm, lookingFor: e.target.value})}
                   className="w-full h-9 p-2 border border-slate-200 rounded-md text-sm"
                 >
                   <option value="male">‡∏ä‡∏≤‡∏¢</option>
                   <option value="female">‡∏´‡∏ç‡∏¥‡∏á</option>
                   <option value="both">‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏û‡∏®</option>
                 </select>
               </div>
               <div>
                 <Label htmlFor="createRole" className="text-sm">‡∏£‡∏∞‡∏î‡∏±‡∏ö</Label>
                 <select
                   id="createRole"
                   value={createForm.role}
                   onChange={(e) => setCreateForm({...createForm, role: e.target.value})}
                   className="w-full h-9 p-2 border border-slate-200 rounded-md text-sm"
                 >
                   <option value="user">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</option>
                   <option value="admin">‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</option>
                 </select>
               </div>
             </div>
             
             {/* Row 6: Membership */}
             <div>
               <Label htmlFor="createMembership" className="text-sm">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</Label>
               <select
                 id="createMembership"
                 value={createForm.membership.tier}
                 onChange={(e) => setCreateForm({
                   ...createForm, 
                   membership: {...createForm.membership, tier: e.target.value}
                 })}
                 className="w-full h-9 p-2 border border-slate-200 rounded-md text-sm"
               >
                 <option value="member">Member</option>
                 <option value="silver">Silver</option>
                 <option value="gold">Gold</option>
                 <option value="vip">VIP</option>
                 <option value="diamond">Diamond</option>
                 <option value="platinum">Platinum</option>
               </select>
             </div>
                                                   {/* Enhanced Preview Section */}
              <div className="border-t border-gray-200 pt-4">
                <Label className="text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á
                </Label>
                <div className="bg-gradient-to-br from-green-50 to-emerald-50 border border-green-200 rounded-lg p-4">
                  <div className="grid grid-cols-1 gap-3">
                    {/* Personal Info Group */}
                    <div className="space-y-2">
                      <div className="text-xs font-semibold text-green-700 uppercase tracking-wide">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</div>
                      <div className="grid grid-cols-2 gap-3 text-sm">
                        <div className="flex items-center justify-between bg-white/60 px-3 py-2 rounded-md">
                          <span className="font-medium text-gray-700">Username:</span>
                          <span className="text-gray-900 font-semibold">{createForm.username || '-'}</span>
                        </div>
                        <div className="flex items-center justify-between bg-white/60 px-3 py-2 rounded-md">
                          <span className="font-medium text-gray-700">‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</span>
                          <span className="text-gray-900 font-semibold">{createForm.email || '-'}</span>
                        </div>
                        <div className="flex items-center justify-between bg-white/60 px-3 py-2 rounded-md">
                          <span className="font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠:</span>
                          <span className="text-gray-900 font-semibold">{createForm.firstName || '-'} {createForm.lastName || '-'}</span>
                        </div>
                        <div className="flex items-center justify-between bg-white/60 px-3 py-2 rounded-md">
                          <span className="font-medium text-gray-700">‡πÄ‡∏û‡∏®:</span>
                          <span className="text-gray-900 font-semibold">{createForm.gender === 'male' ? '‡∏ä‡∏≤‡∏¢' : createForm.gender === 'female' ? '‡∏´‡∏ç‡∏¥‡∏á' : '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'}</span>
                        </div>
                      </div>
                    </div>

                    {/* Preferences Group */}
                    <div className="space-y-2">
                      <div className="text-xs font-semibold text-green-700 uppercase tracking-wide">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</div>
                      <div className="grid grid-cols-2 gap-3 text-sm">
                        <div className="flex items-center justify-between bg-white/60 px-3 py-2 rounded-md">
                          <span className="font-medium text-gray-700">‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô:</span>
                          <span className="text-gray-900 font-semibold">{createForm.lookingFor === 'male' ? '‡∏ä‡∏≤‡∏¢' : createForm.lookingFor === 'female' ? '‡∏´‡∏ç‡∏¥‡∏á' : '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏û‡∏®'}</span>
                        </div>
                        <div className="flex items-center justify-between bg-white/60 px-3 py-2 rounded-md">
                          <span className="font-medium text-gray-700">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</span>
                          <span className="text-gray-900 font-semibold">{createForm.location || '-'}</span>
                        </div>
                      </div>
                    </div>

                    {/* Account Group */}
                    <div className="space-y-2">
                      <div className="text-xs font-semibold text-green-700 uppercase tracking-wide">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</div>
                      <div className="grid grid-cols-2 gap-3 text-sm">
                        <div className="flex items-center justify-between bg-white/60 px-3 py-2 rounded-md">
                          <span className="font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î:</span>
                          <span className="text-gray-900 font-semibold">{createForm.dateOfBirth || '-'}</span>
                        </div>
                        <div className="flex items-center justify-between bg-white/60 px-3 py-2 rounded-md">
                          <span className="font-medium text-gray-700">‡∏£‡∏∞‡∏î‡∏±‡∏ö:</span>
                          <span className="text-gray-900 font-semibold">{createForm.role === 'admin' ? '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}</span>
                        </div>
                        <div className="flex items-center justify-between bg-white/60 px-3 py-2 rounded-md col-span-2">
                          <span className="font-medium text-gray-700">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:</span>
                          <span className="text-gray-900 font-semibold bg-gradient-to-r from-green-500 to-emerald-500 text-white px-3 py-1 rounded-full text-xs">
                            {createForm.membership.tier.toUpperCase()}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

             <div className="flex gap-2 pt-2">
               <Button
                 size="sm"
                 className="flex-1 h-9"
                 onClick={handleCreateUser}
                 disabled={!createForm.username || !createForm.email || !createForm.password || !createForm.firstName || !createForm.lastName || !createForm.dateOfBirth || !createForm.location}
               >
                 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
               </Button>
               <Button
                 size="sm"
                 variant="outline"
                 className="flex-1 h-9"
                 onClick={() => setShowCreateModal(false)}
               >
                 ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
               </Button>
             </div>
          </div>
        </DialogContent>
      </Dialog>

             {/* Profile Modal */}
       <Dialog open={showProfileModal} onOpenChange={setShowProfileModal}>
         <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <User size={20} />
              ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            </DialogTitle>
            <DialogDescription>
              ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            </DialogDescription>
          </DialogHeader>
          {selectedUser && (
            <div className="space-y-6">
              <div className="flex items-center gap-4">
                <div className="w-16 h-16 bg-gradient-to-br from-pink-400 to-violet-400 rounded-full flex items-center justify-center text-white font-semibold text-xl">
                  {selectedUser.firstName?.charAt(0) || selectedUser.username?.charAt(0) || 'U'}
                </div>
                <div>
                  <h3 className="text-xl font-semibold text-slate-800">
                    {selectedUser.firstName} {selectedUser.lastName}
                  </h3>
                  <p className="text-slate-600">@{selectedUser.username}</p>
                  <div className="flex gap-2 mt-2">
                    {getStatusBadge(selectedUser)}
                    {getRoleBadge(selectedUser.role)}
                    {getMembershipBadge(selectedUser.membership?.tier)}
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <Label className="text-sm font-medium text-slate-600">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</Label>
                    <div className="mt-2 space-y-2">
                      <div className="flex items-center gap-2">
                        <Mail size={14} className="text-slate-400" />
                        <span className="text-sm">{selectedUser.email}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock size={14} className="text-slate-400" />
                        <span className="text-sm">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠: {formatDate(selectedUser.createdAt)}</span>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div>
                    <Label className="text-sm font-medium text-slate-600">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</Label>
                    <div className="mt-2 space-y-2">
                      <div className="flex items-center gap-2">
                        <Crown size={14} className="text-slate-400" />
                        <span className="text-sm">Coins: {selectedUser.coins}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock size={14} className="text-slate-400" />
                        <span className="text-sm">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {formatDate(selectedUser.lastLogin)}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {selectedUser.bio && (
                <div>
                  <Label className="text-sm font-medium text-slate-600">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß</Label>
                  <p className="mt-2 text-sm text-slate-700 bg-slate-50 p-3 rounded-md">
                    {selectedUser.bio}
                  </p>
                </div>
              )}

              {selectedUser.isBanned && (
                <div className="bg-red-50 border border-red-200 rounded-md p-4">
                  <div className="flex items-center gap-2 text-red-800">
                    <Ban size={16} />
                    <span className="font-medium">‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô</span>
                  </div>
                  {selectedUser.banReason && (
                    <p className="text-sm text-red-700 mt-1">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {selectedUser.banReason}</p>
                  )}
                </div>
              )}
            </div>
          )}
                 </DialogContent>
       </Dialog>

       {/* Custom Confirmation Modal */}
       <Dialog open={showConfirmModal} onOpenChange={setShowConfirmModal}>
         <DialogContent className="sm:max-w-md">
           <DialogHeader>
             <DialogTitle className="flex items-center gap-2 text-orange-600">
               <AlertTriangle size={20} />
               {confirmData?.title || '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'}
             </DialogTitle>
             <DialogDescription>
               {confirmData?.message || '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?'}
             </DialogDescription>
           </DialogHeader>
           
           {confirmData?.details && confirmData.details.length > 0 && (
             <div className="bg-orange-50 border border-orange-200 rounded-md p-3">
               <Label className="text-sm font-medium text-orange-700 mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</Label>
               <div className="space-y-1 text-xs text-orange-700">
                 {confirmData.details.map((detail, index) => (
                   <div key={index} className="flex justify-between">
                     <span className="font-medium">{detail.label}:</span>
                     <span>{detail.value || '-'}</span>
                   </div>
                 ))}
               </div>
             </div>
           )}

           <div className="flex gap-3 pt-2">
             <Button
               onClick={() => {
                 confirmData?.onConfirm();
               }}
               className="flex-1 bg-orange-600 hover:bg-orange-700"
             >
               ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
             </Button>
             <Button
               variant="outline"
               onClick={() => setShowConfirmModal(false)}
               className="flex-1"
             >
               ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
             </Button>
           </div>
         </DialogContent>
       </Dialog>

       {/* Reset Password Modal */}
       <Dialog open={showResetPasswordModal} onOpenChange={setShowResetPasswordModal}>
         <DialogContent className="sm:max-w-md">
           <DialogHeader>
             <DialogTitle className="flex items-center gap-2 text-blue-600">
               <Key size={20} />
               ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
             </DialogTitle>
             <DialogDescription>
               ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {selectedUser?.firstName} {selectedUser?.lastName} (@{selectedUser?.username})
             </DialogDescription>
           </DialogHeader>
           
           <div className="space-y-4">
             <div>
               <Label htmlFor="newPassword">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</Label>
               <Input
                 id="newPassword"
                 type="password"
                 value={resetPasswordForm.newPassword}
                 onChange={(e) => setResetPasswordForm({...resetPasswordForm, newPassword: e.target.value})}
                 placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"
               />
               <div className="mt-1 text-xs text-slate-500">
                 ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà 1 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
               </div>
             </div>
             
             <div>
               <Label htmlFor="confirmPassword">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</Label>
               <Input
                 id="confirmPassword"
                 type="password"
                 value={resetPasswordForm.confirmPassword}
                 onChange={(e) => setResetPasswordForm({...resetPasswordForm, confirmPassword: e.target.value})}
                 placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
               />
             </div>

             <div className="flex gap-3">
               <Button
                 className="flex-1"
                 onClick={handleResetPassword}
                 disabled={!resetPasswordForm.newPassword || !resetPasswordForm.confirmPassword}
               >
                 ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
               </Button>
               <Button
                 variant="outline"
                 className="flex-1"
                 onClick={() => {
                   setShowResetPasswordModal(false);
                   setResetPasswordForm({ newPassword: '', confirmPassword: '' });
                 }}
               >
                 ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
               </Button>
             </div>
           </div>
         </DialogContent>
       </Dialog>
     </div>
   );
 };
 
 export default UserManagement;

import { useState, useEffect, useRef } from "react"
import { Button } from "./ui/button"
import { Card, CardHeader, CardTitle, CardContent } from "./ui/card"
import { rabbitAPI, rabbitHelpers } from "../services/rabbitAPI"

import { 
  ArrowLeft, 
  Smartphone, 
  Shield, 
  CheckCircle,
  AlertCircle,
  Loader2,
  Crown,
  Star,
  QrCode,
  Lock,
  Zap,
  Copy,
  RefreshCw,
  Timer
} from 'lucide-react'
import { useAuth } from '../contexts/AuthContext'

interface PaymentData {
  payment_id?: string;
  transaction_id?: string;
  orderId?: string;
  amount?: number;
  currency?: string;
  planId?: string;
  planTier?: string;
  planName?: string;
  userId?: string;
  status?: string;
  createdAt?: Date;
  expiryTime?: Date;
  qr_image?: string;
  qr_image_url?: string;
  qr_code_url?: string;
  vendor_qr_code?: string;
  url?: string;
  short_url?: string;
  transaction_url?: string;
  timeRemaining?: number;
  debug?: {
    hasQrImage?: boolean;
    hasQrCodeUrl?: boolean;
    hasVendorQrCode?: boolean;
    qrImageLength?: number;
    qrCodeUrlLength?: number;
    vendorQrCodeLength?: number;
  };
}

const PaymentGateway = ({ plan, onBack, onSuccess, onCancel }) => {
  const { user } = useAuth()
  const [processing, setProcessing] = useState(false)
  const [qrData, setQrData] = useState<PaymentData | null>(null)
  
  
  const [paymentStatus, setPaymentStatus] = useState('pending')
  const [timeRemaining, setTimeRemaining] = useState(300000) // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  const [currentTransaction, setCurrentTransaction] = useState<PaymentData | null>(null)
  const [paymentCheckInterval, setPaymentCheckInterval] = useState<number | null>(null)
  const [bypassMode, setBypassMode] = useState(false)

  // useRef ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR Code element
  const qrCodeRef = useRef<HTMLDivElement>(null)

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isAdmin = user?.role === 'admin' || user?.role === 'superadmin'

  // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô fallback ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  const tierPricing = {
    member: { amount: 0, currency: 'THB', name: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ü‡∏£‡∏µ' },
    silver: { amount: 20, currency: 'THB', name: 'Silver Member' },
    gold: { amount: 50, currency: 'THB', name: 'Gold Member' },
    vip: { amount: 100, currency: 'THB', name: 'VIP Member' },
    vip1: { amount: 150, currency: 'THB', name: 'VIP 1' },
    vip2: { amount: 300, currency: 'THB', name: 'VIP 2' },
    diamond: { amount: 500, currency: 'THB', name: 'Diamond Member' },
    platinum: { amount: 1000, currency: 'THB', name: 'Platinum Member' },
    coin_package: { amount: plan?.price || 0, currency: 'THB', name: plan?.name || '‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç' }
  }

  // Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR Code - ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  useEffect(() => {
    if (qrData && timeRemaining > 0) {
      const timer = setInterval(() => {
        setTimeRemaining(prev => {
          if (prev <= 1000) {
            setPaymentStatus('expired')
            return 0
          }
          return prev - 1000
        })
      }, 1000)
      return () => clearInterval(timer)
    }
  }, [qrData]) // ‡πÉ‡∏ä‡πâ qrData ‡πÄ‡∏õ‡πá‡∏ô dependency ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ timer ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ QR code

  // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Auto Polling - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡∏á
  // useEffect(() => {
  //   if (qrData && paymentStatus === 'pending') {
  //     const interval = setInterval(async () => {
  //       try {
  //         // ‡πÉ‡∏ä‡πâ rabbitAPI service
  //         const data = await rabbitAPI.checkPaymentStatus(qrData.payment_id)
  //         
  //         console.log('üîç Payment status check:', data)
  //         
  //         if (data.status === 'completed') {
  //           setPaymentStatus('completed')
  //           
  //           // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PaymentSuccess
  //           const successData = {
  //             ...currentTransaction,
  //             paymentMethod: 'rabbit_gateway',
  //             timestamp: new Date().toISOString(),
  //             status: 'completed',
  //             transactionId: data.payment_id,
  //             amount: data.amount,
  //             currency: data.currency,
  //             tier: plan.tier // ‡πÄ‡∏û‡∏¥‡πà‡∏° tier ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  //           }
  //           
  //           console.log('üéâ Payment completed! Sending success data:', successData)
  //           onSuccess && onSuccess(successData)
  //           clearInterval(interval)
  //         } else if (data.status === 'failed') {
  //           setPaymentStatus('failed')
  //           clearInterval(interval)
  //         } else if (data.status === 'expired') {
  //           setPaymentStatus('expired')
  //           clearInterval(interval)
  //         }
  //       } catch (error) {
  //         console.error('Error checking payment status:', error)
  //       }
  //     }, 5000) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  //     
  //     return () => clearInterval(interval)
  //   }
  // }, [paymentStatus, onSuccess]) // ‡∏•‡∏ö qrData ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ re-run ‡πÄ‡∏°‡∏∑‡πà‡∏≠ qrData ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô


  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î QR data ‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    const qrKey = `qr-${plan.id}-${user?._id || user?.id}`
    const savedQRData = localStorage.getItem(qrKey)
    
    if (savedQRData) {
      try {
        const parsedData = JSON.parse(savedQRData)
        setQrData(parsedData)
        setPaymentStatus(parsedData.status || 'pending')
        setTimeRemaining(parsedData.timeRemaining || 300000)
      } catch (error) {
        console.error('Error parsing saved QR data:', error)
        localStorage.removeItem(qrKey)
      }
    } else {
      // ‡∏•‡∏ö QR data ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ saved data
      setQrData(null)
      setPaymentStatus('idle')
      setTimeRemaining(0)
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤ (Auto Generate)
    if (!processing) {
      checkBypassMode()
    }
  }, [plan?.id, plan?.tier]) // ‡πÄ‡∏û‡∏¥‡πà‡∏° plan.tier ‡πÄ‡∏õ‡πá‡∏ô dependency ‡∏î‡πâ‡∏ß‡∏¢

  // Auto scroll ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Payment (‡πÑ‡∏°‡πà‡∏£‡∏≠ QR Code)
  useEffect(() => {
    // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤
    const scrollToBottom = () => {
      // ‡πÉ‡∏ä‡πâ window.innerHeight + window.scrollY ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏™‡∏∏‡∏î‡∏à‡∏≠
      const scrollHeight = Math.max(
        document.body.scrollHeight,
        document.documentElement.scrollHeight,
        document.body.offsetHeight,
        document.documentElement.offsetHeight,
        document.body.clientHeight,
        document.documentElement.clientHeight
      )
      
      // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      window.scrollTo({
        top: scrollHeight,
        left: 0,
        behavior: 'smooth'
      })
    }
    
    // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1000ms
    setTimeout(scrollToBottom, 1000)
  }, []) // ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bypass mode
  const checkBypassMode = async () => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ bypass ‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏£‡∏∑‡∏≠ API
      const bypassEnabled = localStorage.getItem('payment_bypass_enabled') === 'true'

      if (bypassEnabled) {
        console.log('üîÑ Payment bypass mode enabled')
        setBypassMode(true)
        bypassPayment()
      } else {
        console.log('üí≥ Normal payment mode')
        setBypassMode(false)
        createRabbitPayment()
      }
    } catch (error) {
      console.error('Error checking bypass mode:', error)
      createRabbitPayment()
    }
  }

  // Bypass payment (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠ admin)
  const bypassPayment = async () => {
    try {
      setProcessing(true)

      // ‡∏ï‡∏≤‡∏° RABBIT_GATEWAY_INTEGRATION_SUMMARY.md line 501-507
      const pricing = tierPricing[plan.tier] || tierPricing.vip
      const orderId = rabbitHelpers.generateOrderId()

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö coin package ‡πÉ‡∏ä‡πâ plan.price ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const amount = plan.tier === 'coin_package' ? plan.price : pricing.amount

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bypass
      const transaction = {
        id: `bypass-${Date.now()}`,
        transactionId: `bypass-${Date.now()}`,
        orderId: orderId,
        amount: amount,
        currency: 'THB',
        planId: plan.id,
        planTier: plan.tier,
        planName: plan.name,
        userId: user?._id,
        status: 'completed',
        createdAt: new Date(),
        expiryTime: new Date(Date.now() + 5 * 60 * 1000) // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      }

      setCurrentTransaction(transaction)

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á success data ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ payment)
      const successData = {
        ...transaction,
        paymentMethod: 'bypass',
        timestamp: new Date().toISOString(),
        status: 'completed',
        tier: plan.tier,
        plan: plan // ‡∏™‡πà‡∏á plan object ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ PaymentSuccess ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
      }

      console.log('üéâ Payment bypassed! Success data:', successData)
      console.log('üì¶ Plan object:', JSON.stringify(plan, null, 2))
      console.log('ü™ô Plan rewards:', JSON.stringify(plan?.rewards, null, 2))

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏ö‡∏ö manual
      if (plan?.rewards) {
        const testCoins = plan.rewards.totalCoins || plan.rewards.coins || 0
        const testVotes = plan.rewards.votePoints || 0
        console.log('üß™ Manual test - would add:', testCoins, 'coins and', testVotes, 'vote points')
      }

      // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á loading animation
      setTimeout(() => {
        onSuccess && onSuccess(successData)
      }, 1000)

    } catch (error) {
      console.error('Error in bypass payment:', error)
      setPaymentStatus('error')
    } finally {
      setProcessing(false)
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rabbit Payment
  const createRabbitPayment = async () => {
    setProcessing(true)
    
    try {
      
      // ‡∏ï‡∏≤‡∏° RABBIT_GATEWAY_INTEGRATION_SUMMARY.md line 501-507
      const pricing = tierPricing[plan.tier] || tierPricing.vip
      const orderId = rabbitHelpers.generateOrderId()
      
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö coin package ‡πÉ‡∏ä‡πâ plan.price ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const amount = plan.tier === 'coin_package' ? plan.price : pricing.amount
      
      // ‡πÉ‡∏ä‡πâ rabbitAPI service ‡∏ï‡∏≤‡∏° RABBIT_GATEWAY_INTEGRATION_SUMMARY.md
      const result = await rabbitAPI.createPayment({
        orderId: orderId,
        amount: amount
      })
      
      
      // ‡∏ï‡∏≤‡∏° RABBIT_GATEWAY_INTEGRATION_SUMMARY.md line 512-525
      const transaction = {
        id: result.payment_id,
        transactionId: result.transaction_id,
        orderId: orderId,
        amount: result.amount, // ‡πÉ‡∏ä‡πâ result.amount ‡∏ó‡∏µ‡πà backend ‡∏™‡πà‡∏á‡∏°‡∏≤ (‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡πâ‡∏ß)
        currency: result.currency || 'THB',
        planId: plan.id,
        planTier: plan.tier,
        planName: plan.name,
        userId: user?._id,
        status: result.status || 'pending',
        createdAt: new Date(),
        expiryTime: new Date(result.expire_at)
      }
      
      
      setCurrentTransaction(transaction)
      
      // ‡∏ï‡∏≤‡∏° RABBIT_GATEWAY_INTEGRATION_SUMMARY.md line 528-541
      const qrDataToSave = {
        payment_id: result.payment_id,
        transaction_id: result.transaction_id,
        orderId: orderId,
        amount: result.amount, // ‡πÉ‡∏ä‡πâ result.amount ‡∏ó‡∏µ‡πà backend ‡∏™‡πà‡∏á‡∏°‡∏≤ (‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡πâ‡∏ß)
        currency: result.currency || 'THB',
        qr_image: result.qr_image || result.qr_image_url || result.qr_code_url,
        vendor_qr_code: result.vendor_qr_code,
        qr_code: result.qr_code,
        expiryTime: new Date(result.expire_at),
        url: result.url || result.transaction_url,
        short_url: result.short_url,
        transaction_url: result.transaction_url,
        status: 'pending',
        timeRemaining: 5 * 60 * 1000 // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      }
      
      setQrData(qrDataToSave)
      setTimeRemaining(5 * 60 * 1000) // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      setPaymentStatus('pending')
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å QR data ‡∏•‡∏á localStorage
      const qrKey = `qr-${plan.id}-${user?._id || user?.id}`
      localStorage.setItem(qrKey, JSON.stringify(qrDataToSave))
      
      
    } catch (error: unknown) {
      console.error('Rabbit QR Code generation failed:', error)
      setPaymentStatus('error')
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
      if (error instanceof Error && error.message.includes('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Rabbit Gateway ‡πÑ‡∏î‡πâ')) {
      }
    } finally {
      setProcessing(false)
    }
  }


  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text)
    // ‡πÅ‡∏™‡∏î‡∏á notification ‡∏´‡∏£‡∏∑‡∏≠ toast
  }

  const refreshQR = () => {
    if (paymentCheckInterval) {
      clearInterval(paymentCheckInterval)
      setPaymentCheckInterval(null)
    }
    // ‡∏•‡πâ‡∏≤‡∏á localStorage ‡πÅ‡∏•‡∏∞ state ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÉ‡∏´‡∏°‡πà
    const qrKey = `qr-${plan.id}-${user?._id || user?.id}`
    localStorage.removeItem(qrKey)
    setQrData(null)
    setPaymentStatus('pending')
    setTimeRemaining(300000)
    setProcessing(true) // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ processing ‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏°‡∏∏‡∏ô
    createRabbitPayment()
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö manual
  const checkPaymentStatus = async () => {
    if (!qrData || !qrData.payment_id) {
      return
    }

    try {
      const data = await rabbitAPI.checkPaymentStatus(qrData.payment_id)
      
      
      if (data.status === 'completed') {
        setPaymentStatus('completed')
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PaymentSuccess
        const successData = {
          ...currentTransaction,
          paymentMethod: 'rabbit_gateway',
          timestamp: new Date().toISOString(),
          status: 'completed',
          transactionId: data.payment_id,
          amount: data.amount,
          currency: data.currency,
          tier: plan.tier, // ‡πÄ‡∏û‡∏¥‡πà‡∏° tier ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
          plan: plan // ‡∏™‡πà‡∏á plan object ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ PaymentSuccess ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
        }
        
        onSuccess && onSuccess(successData)
      } else if (data.status === 'failed') {
        setPaymentStatus('failed')
      } else if (data.status === 'expired') {
        setPaymentStatus('expired')
      } else {
      }
    } catch (error) {
      console.error('‚ùå Error checking payment status:', error)
    }
  }

  // Cleanup interval on unmount
  useEffect(() => {
    return () => {
      if (paymentCheckInterval) {
        clearInterval(paymentCheckInterval)
      }
      // ‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á localStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ QR data ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    }
  }, [paymentCheckInterval])

  const formatTime = (ms) => {
    const minutes = Math.floor(ms / 60000)
    const seconds = Math.floor((ms % 60000) / 1000)
    return `${minutes}:${seconds.toString().padStart(2, '0')}`
  }

  const getStatusMessage = (status) => {
    switch (status) {
      case 'pending':
        return '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'
      case 'completed':
        return '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      case 'failed':
        return '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'
      case 'expired':
        return 'QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏'
      case 'error':
        return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
      default:
        return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
    }
  }

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending':
        return 'text-yellow-600'
      case 'completed':
        return 'text-green-600'
      case 'failed':
        return 'text-red-600'
      case 'expired':
        return 'text-gray-600'
      case 'error':
        return 'text-red-600'
      default:
        return 'text-gray-600'
    }
  }

  const getStatusIcon = (status) => {
    switch (status) {
      case 'pending':
        return <Loader2 className="h-4 w-4 animate-spin" />
      case 'completed':
        return <CheckCircle className="h-4 w-4" />
      case 'failed':
        return <AlertCircle className="h-4 w-4" />
      case 'expired':
        return <Timer className="h-4 w-4" />
      case 'error':
        return <AlertCircle className="h-4 w-4" />
      default:
        return <AlertCircle className="h-4 w-4" />
    }
  }


  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-violet-50 to-blue-50 p-2">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-4">
          <div className="flex items-center justify-between mb-2">
            <Button
              variant="ghost"
              onClick={onBack}
              className="text-slate-600 hover:text-slate-800"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              ‡∏Å‡∏•‡∏±‡∏ö
            </Button>

            {/* Admin Controls - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin */}
            {isAdmin && (
              <div className="flex items-center gap-2">
                <Button
                  variant={bypassMode ? "default" : "outline"}
                  size="sm"
                  onClick={() => {
                    const newBypassMode = !bypassMode
                    setBypassMode(newBypassMode)
                    localStorage.setItem('payment_bypass_enabled', newBypassMode.toString())

                    if (newBypassMode) {
                      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î bypass mode ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å bypass payment ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                      bypassPayment()
                    }
                  }}
                  className={`text-xs ${bypassMode ? 'bg-yellow-500 hover:bg-yellow-600' : ''}`}
                >
                  <Shield className="h-3 w-3 mr-1" />
                  {bypassMode ? '‡∏õ‡∏¥‡∏î Bypass' : '‡πÄ‡∏õ‡∏¥‡∏î Bypass'}
                </Button>

                {/* ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö */}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    if (confirm('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏ß‡∏ï‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô 0?')) {
                      const resetUser = {
                        ...user,
                        coins: 0,
                        votePoints: 0,
                        membership: { tier: 'member' }
                      }
                      localStorage.setItem('user', JSON.stringify(resetUser))
                      if (window.updateAuthContext) {
                        window.updateAuthContext(resetUser)
                      }
                      console.log('üîÑ Reset user coins and vote points to 0')
                      alert('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!')
                    }
                  }}
                  className="text-xs bg-red-500 text-white hover:bg-red-600"
                >
                  üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
                </Button>
              </div>
            )}
          </div>
          
              <div className="text-center">
            <h1 className="text-2xl font-bold gradient-text mb-1">
              üêá Rabbit Payment Gateway
              {bypassMode && (
                <span className="ml-2 px-2 py-1 bg-yellow-500 text-white text-xs rounded-full">
                  BYPASS MODE
                </span>
              )}
              </h1>
            <p className="text-slate-600 text-sm">
              {bypassMode ? '‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á' : '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß'}
              </p>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö */}
            {user && (
              <div className="mt-4 p-3 bg-slate-50 rounded-lg text-sm">
                <div className="grid grid-cols-2 gap-4 text-center">
                  <div>
                    <div className="text-slate-600">‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç</div>
                    <div className="font-bold text-amber-600">{user.coins?.toLocaleString() || 0}</div>
                  </div>
                  <div>
                    <div className="text-slate-600">‡πÇ‡∏´‡∏ß‡∏ï</div>
                    <div className="font-bold text-purple-600">{user.votePoints?.toLocaleString() || 0}</div>
                  </div>
                </div>
                <div className="mt-2 text-center">
                  <div className="text-slate-600">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</div>
                  <div className="font-bold text-pink-600">
                    {user.membership?.tier === 'diamond' ? 'üíé Diamond' :
                     user.membership?.tier === 'gold' ? 'ü•á Gold' :
                     user.membership?.tier === 'silver' ? 'ü•à Silver' : 'üÜì Member'}
                  </div>
                </div>

                {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á */}
                <div className="mt-3 pt-3 border-t border-slate-200">
                  <div className="flex gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => {
                        const testUser = { ...user, coins: (user.coins || 0) + 1000, votePoints: (user.votePoints || 0) + 100 }
                        localStorage.setItem('user', JSON.stringify(testUser))
                        if (window.updateAuthContext) {
                          window.updateAuthContext(testUser)
                        }
                        console.log('üß™ Manual test: Added 1000 coins and 100 vote points')
                        alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô console')
                      }}
                      className="text-xs"
                    >
                      üß™ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => {
                        const currentUserData = localStorage.getItem('user')
                        console.log('üîç Current localStorage user data:', currentUserData ? JSON.parse(currentUserData) : 'No data')
                        alert('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô console ‡πÅ‡∏•‡πâ‡∏ß!')
                      }}
                      className="text-xs"
                    >
                      üîç ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• localStorage
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="grid lg:grid-cols-2 gap-4">
          {/* Payment Details */}
          <Card className="modern-card shadow-xl border border-white/30 overflow-hidden backdrop-blur-lg">
            <CardHeader className="bg-gradient-to-br from-green-50/90 via-emerald-50/90 to-teal-50/90 backdrop-blur-xl border-b border-white/30 py-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg">
                    <QrCode className="h-4 w-4 text-white" />
                  </div>
                  <div>
                    <CardTitle className="text-lg font-bold text-slate-800 flex items-center gap-1">
                      üêá Rabbit Gateway
                    </CardTitle>
                    <p className="text-xs text-slate-600 flex items-center">
                      <Lock className="h-3 w-3 mr-1 text-green-500" />
                      ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                    </p>
                  </div>
                </div>
              </div>
              </CardHeader>
            <CardContent className="space-y-4">
              {/* Rabbit Gateway Features Banner */}
              <div className="relative overflow-hidden p-4 bg-gradient-to-r from-green-500 to-emerald-600 rounded-xl shadow-lg">
                <div className="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
                <div className="relative z-10">
                  <div className="flex items-center justify-between mb-3">
                    <div>
                      <h3 className="text-lg font-bold text-white mb-1">üêá Rabbit Gateway</h3>
                      <p className="text-white/90 text-xs">‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏•‡∏∞‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏™‡∏ö‡∏≤‡∏¢</p>
                    </div>
                    <div className="hidden sm:block">
                      <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
                        <QrCode className="h-6 w-6 text-white" />
                      </div>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2 text-white/90">
                    <div className="flex items-center gap-1">
                      <Shield className="h-3 w-3" />
                      <span className="text-xs">‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ 100%</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <Zap className="h-3 w-3" />
                      <span className="text-xs">‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß</span>
                </div>
                    <div className="flex items-center gap-1">
                      <Smartphone className="h-3 w-3" />
                      <span className="text-xs">QR Code</span>
                          </div>
                    <div className="flex items-center gap-1">
                      <CheckCircle className="h-3 w-3" />
                      <span className="text-xs">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</span>
                      </div>
                  </div>
                  </div>
                </div>

              {/* Plan Details */}
              <div className="bg-slate-50/50 rounded-xl p-4 border border-slate-200/50">
                <h3 className="text-base font-semibold text-slate-800 mb-3 flex items-center gap-2">
                  <Crown className="h-4 w-4 text-yellow-500" />
                  ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                </h3>
                
                <div className="space-y-3">
                  <div className="flex items-center justify-between p-3 bg-white/70 rounded-lg border border-slate-200/50">
                    <div className="flex items-center gap-2">
                      <div className="w-8 h-8 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-lg flex items-center justify-center">
                        {plan.tier === 'coin_package' ? (
                          <span className="text-white text-lg">ü™ô</span>
                        ) : (
                          <Star className="h-4 w-4 text-white" />
                        )}
                      </div>
                    <div>
                        <h4 className="font-semibold text-slate-800 text-sm">{plan.name}</h4>
                        <p className="text-xs text-slate-600">
                          {plan.tier === 'coin_package' ? '‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç' : plan.tier.toUpperCase()}
                        </p>
                        {plan.tier === 'coin_package' && plan.rewards && (
                          <p className="text-xs text-slate-500 mt-1">
                            {plan.rewards.coins?.toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç + {plan.rewards.votePoints?.toLocaleString()} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï
                          </p>
                        )}
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-xl font-bold text-slate-800">
                        ‡∏ø{plan.tier === 'coin_package' ? plan.price : (tierPricing[plan.tier]?.amount || 0)}
                        </div>
                      <div className="text-xs text-slate-600">THB</div>
                    </div>
                  </div>
                </div>
          </div>

              {/* Payment Status */}
              <div className="bg-slate-50/50 rounded-xl p-4 border border-slate-200/50">
                <h3 className="text-base font-semibold text-slate-800 mb-3 flex items-center gap-2">
                  <Timer className="h-4 w-4 text-blue-500" />
                  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                </h3>
                
                {qrData ? (
                  <div className="space-y-3">
                    <div className="flex items-center justify-between p-3 bg-white/70 rounded-lg border border-slate-200/50">
                      <div className="flex items-center gap-2">
                        <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${
                          paymentStatus === 'completed' ? 'bg-green-500' :
                          paymentStatus === 'failed' ? 'bg-red-500' :
                          paymentStatus === 'expired' ? 'bg-gray-500' :
                          'bg-yellow-500'
                        }`}>
                          {getStatusIcon(paymentStatus)}
                    </div>
                        <div>
                          <h4 className="font-semibold text-slate-800 text-sm">
                            {getStatusMessage(paymentStatus)}
                          </h4>
                          <p className="text-xs text-slate-600">
                            Order ID: {qrData.orderId}
                          </p>
                  </div>
                      </div>
                      <div className="text-right">
                        <div className={`text-base font-bold ${getStatusColor(paymentStatus)}`}>
                          {paymentStatus === 'pending' && timeRemaining > 0 ? formatTime(timeRemaining) : ''}
                          </div>
                        <div className="text-xs text-slate-600">
                          {paymentStatus === 'pending' ? '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠' : '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'}
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="flex items-center justify-center p-4">
                    <div className="text-center">
                      <Loader2 className="h-6 w-6 text-blue-500 mx-auto mb-2 animate-spin" />
                      <p className="text-sm text-slate-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code...</p>
                    </div>
                  </div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="space-y-2">
                <div className="flex gap-2">
                  <Button
                    onClick={onCancel}
                    variant="outline"
                    className="flex-1 border-slate-300 text-slate-600 hover:bg-slate-50"
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </Button>
                </div>
                
                {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ QR Code ‡πÅ‡∏•‡πâ‡∏ß) */}
                {qrData && paymentStatus === 'pending' && (
                  <div className="flex gap-2">
                    <Button
                      onClick={checkPaymentStatus}
                      className="flex-1 modern-button bg-blue-500 hover:bg-blue-600"
                    >
                      <CheckCircle className="h-4 w-4 mr-2" />
                      ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                    </Button>
                    
                    <Button
                      onClick={refreshQR}
                      disabled={processing}
                      variant="outline"
                      className="flex-1 border-blue-300 text-blue-600 hover:bg-blue-50"
                    >
                      <RefreshCw 
                        className="h-4 w-4 mr-2" 
                        style={processing ? { animation: 'spin 1s linear infinite' } : {}}
                      />
                      ‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÉ‡∏´‡∏°‡πà
                    </Button>
                  </div>
                )}
                
                
              </div>
            </CardContent>
          </Card>

          {/* QR Code Display */}
          <Card className="modern-card shadow-xl border border-white/30 overflow-hidden backdrop-blur-lg" ref={qrCodeRef}>
            <CardHeader className="bg-gradient-to-br from-blue-50/90 via-indigo-50/90 to-purple-50/90 backdrop-blur-xl border-b border-white/30 py-3">
              <CardTitle className="text-lg font-bold text-slate-800 flex items-center gap-2">
                <QrCode className="h-5 w-5 text-blue-500" />
                QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </CardTitle>
              <p className="text-xs text-slate-600">
                ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
              </p>
            </CardHeader>
            <CardContent className="space-y-4">
              {processing ? (
                <div className="flex flex-col items-center justify-center py-8">
                  <Loader2 className="h-8 w-8 text-blue-500 mb-3 animate-spin" />
                  <h3 className="text-base font-semibold text-slate-800 mb-2">
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code...
                        </h3>
                  <p className="text-slate-600 text-center text-sm">
                    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                  </p>
                      </div>
              ) : !qrData ? (
                <div className="flex flex-col items-center justify-center py-8">
                  <Loader2 className="h-12 w-12 text-blue-500 mb-3 animate-spin" />
                  <h3 className="text-base font-semibold text-slate-800 mb-2">
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code...
                        </h3>
                  <p className="text-slate-600 text-center text-sm">
                    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                  </p>
                      </div>
              ) : qrData ? (
                <div className="space-y-4">
                  
                  {/* QR Code Image */}
                  <div className="flex justify-center">
                    <div className="relative">
                      {/* ‡πÅ‡∏™‡∏î‡∏á QR Image ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
                      {(qrData.qr_image || qrData.qr_image_url || qrData.qr_code_url) && (
                        <img
                          src={qrData.qr_image || qrData.qr_image_url || qrData.qr_code_url}
                          alt="QR Code for Payment"
                          className="w-48 h-48 border-2 border-white rounded-xl shadow-lg"
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.style.display = 'none';
                            // ‡πÅ‡∏™‡∏î‡∏á fallback div
                            const fallbackDiv = target.parentElement?.querySelector('.qr-fallback') as HTMLElement;
                            if (fallbackDiv) {
                              fallbackDiv.style.display = 'flex';
                            }
                          }}
                        />
                      )}
                      
                      {/* Fallback: ‡πÅ‡∏™‡∏î‡∏á vendor QR code ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
                      <div 
                        className="qr-fallback w-48 h-48 border-2 border-white rounded-xl shadow-lg bg-white flex items-center justify-center"
                        style={{ display: (qrData.qr_image || qrData.qr_image_url || qrData.qr_code_url) ? 'none' : 'flex' }}
                      >
                        {qrData.vendor_qr_code ? (
                          <div className="text-center p-3">
                            <QrCode className="h-12 w-12 text-gray-400 mx-auto mb-2" />
                            <p className="text-xs text-gray-600 mb-1">QR Code String:</p>
                            <p className="text-xs text-gray-500 break-all font-mono">
                              {qrData.vendor_qr_code.substring(0, 30)}...
                            </p>
                            <p className="text-xs text-blue-600 mt-1">
                              ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏ô‡∏µ‡πâ
                            </p>
                            <div className="mt-2">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => copyToClipboard(qrData.vendor_qr_code)}
                                className="text-xs"
                              >
                                <Copy className="h-3 w-3 mr-1" />
                                Copy QR String
                              </Button>
                            </div>
                          </div>
                        ) : (
                          <div className="text-center">
                            <QrCode className="h-12 w-12 text-gray-400 mx-auto mb-2" />
                            <p className="text-xs text-gray-600">‡πÑ‡∏°‡πà‡∏°‡∏µ QR Code</p>
                            <p className="text-xs text-gray-500 mt-1">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                          </div>
                        )}
                      </div>
                      
                      {/* Overlay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ */}
                      {paymentStatus === 'expired' && (
                        <div className="absolute inset-0 bg-black/50 rounded-xl flex items-center justify-center">
                          <div className="text-white text-center">
                            <Timer className="h-6 w-6 mx-auto mb-1" />
                            <p className="font-semibold text-sm">QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Power By Text */}
                  <div className="text-center mt-4">
                    <div className="inline-block bg-gradient-to-r from-blue-600 to-purple-600 px-4 py-2 rounded-lg shadow-lg">
                      <p className="text-sm text-white font-bold">
                        Power By <span className="text-yellow-300 font-extrabold">DevNid</span> & <span className="text-pink-300 font-extrabold">Kao</span>
                      </p>
                    </div>
                  </div>

                  {/* Payment Information */}
                  <div className="bg-slate-50/50 rounded-xl p-3 border border-slate-200/50">
                    <div className="space-y-3 text-sm">
                      <div className="flex justify-between items-center">
                        <span className="text-slate-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</span>
                        <span className="font-semibold text-slate-800">
                          ‡∏ø{qrData.amount} {qrData.currency}
                        </span>
                      </div>
                    </div>
                    
                    <div className="mt-3 pt-3 border-t border-slate-200/50">
                      <div className="flex justify-between items-center text-xs">
                        <span className="text-slate-600">Order ID:</span>
                        <div className="flex items-center gap-1">
                          <span className="font-mono text-slate-800">
                            {qrData.orderId}
                          </span>
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => copyToClipboard(qrData.orderId)}
                            className="h-4 w-4 p-0"
                          >
                            <Copy className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>

                </div>
              ) : (
                <div className="flex flex-col items-center justify-center py-8">
                  <AlertCircle className="h-8 w-8 text-red-500 mb-3" />
                  <h3 className="text-base font-semibold text-slate-800 mb-2">
                    ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ
                  </h3>
                  <p className="text-slate-600 text-center mb-3 text-sm">
                    ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
                  </p>
                  
                  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° setup instructions */}
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-3 max-w-sm">
                    <h4 className="font-semibold text-yellow-800 mb-2 text-sm">üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Rabbit Gateway</h4>
                    <div className="text-xs text-yellow-700 space-y-1">
                      <p>1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Rabbit Gateway Dashboard</p>
                      <p>2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Application ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö Application ID</p>
                      <p>3. ‡∏£‡∏±‡∏ö Public Key ‡πÅ‡∏•‡∏∞ Secret Key</p>
                      <p>4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå backend/env.development</p>
                      <p>5. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó server</p>
                    </div>
                  </div>
                  
                  <Button
                    onClick={createRabbitPayment}
                    disabled={processing}
                    className="modern-button bg-blue-500 hover:bg-blue-600"
                  >
                    <RefreshCw 
                      className="h-4 w-4 mr-2" 
                      style={processing ? { animation: 'spin 1s linear infinite' } : {}}
                    />
                    ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                  </Button>
                </div>
              )}
              </CardContent>
            </Card>
        </div>
      </div>
    </div>
  )
}

export default PaymentGateway
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Button } from './ui/button';
import autoRefreshManager from '../services/autoRefreshManager';
import { Activity, Wifi, Clock, RefreshCw, Zap, TrendingUp } from 'lucide-react';

/**
 * Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö Auto Refresh
 * ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
const AutoRefreshStats = ({ className = '' }) => {
  const [stats, setStats] = useState(null);
  const [isVisible, setIsVisible] = useState(false);
  const [lastUpdate, setLastUpdate] = useState(Date.now());

  useEffect(() => {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const interval = setInterval(() => {
      const newStats = autoRefreshManager.getStats();
      setStats(newStats);
      setLastUpdate(Date.now());
    }, 5000);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    const initialStats = autoRefreshManager.getStats();
    setStats(initialStats);

    return () => clearInterval(interval);
  }, []);

  const formatUptime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours}‡∏ä‡∏° ${minutes}‡∏ô‡∏≤‡∏ó‡∏µ ${secs}‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
    } else if (minutes > 0) {
      return `${minutes}‡∏ô‡∏≤‡∏ó‡∏µ ${secs}‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
    } else {
      return `${secs}‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
    }
  };

  const formatMemoryUsage = (mb) => {
    if (mb >= 1024) {
      return `${(mb / 1024).toFixed(1)} GB`;
    }
    return `${mb} MB`;
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'immediate': return 'bg-red-100 text-red-800';
      case 'fast': return 'bg-orange-100 text-orange-800';
      case 'normal': return 'bg-green-100 text-green-800';
      case 'slow': return 'bg-blue-100 text-blue-800';
      case 'background': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getConnectionIcon = (effectiveType) => {
    switch (effectiveType) {
      case '4g': return <Wifi className="w-4 h-4 text-green-600" />;
      case '3g': return <Wifi className="w-4 h-4 text-yellow-600" />;
      case '2g': return <Wifi className="w-4 h-4 text-orange-600" />;
      case 'slow-2g': return <Wifi className="w-4 h-4 text-red-600" />;
      default: return <Wifi className="w-4 h-4 text-gray-600" />;
    }
  };

  if (!stats) {
    return (
      <Card className={`${className}`}>
        <CardContent className="p-4">
          <div className="animate-pulse flex space-x-4">
            <div className="rounded-full bg-gray-200 h-4 w-4"></div>
            <div className="flex-1 space-y-2 py-1">
              <div className="h-4 bg-gray-200 rounded w-3/4"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2"></div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={`${className} transition-all duration-300 hover:shadow-md`}>
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm font-medium flex items-center gap-2">
            <Activity className="w-4 h-4" />
            Auto Refresh Status
          </CardTitle>
          <Badge
            variant={stats.isActive ? 'default' : 'secondary'}
            className="text-xs"
          >
            {stats.isActive ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : '‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô'}
          </Badge>
        </div>
        <CardDescription className="text-xs">
          ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠ {new Date(lastUpdate).toLocaleTimeString()}
          {import.meta.env.DEV && (
            <span className="block text-blue-600 mt-1">
              üîß Development Mode: ‡πÉ‡∏ä‡πâ Polling ‡πÅ‡∏ó‡∏ô Service Worker
            </span>
          )}
          {import.meta.env.PROD && !stats.serviceWorkerActive && (
            <span className="block text-red-600 mt-1">
              ‚ö†Ô∏è Service Worker ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Production
            </span>
          )}
        </CardDescription>
      </CardHeader>

      <CardContent className="space-y-3">
        {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */}
        <div className="grid grid-cols-2 gap-2 text-xs">
          <div className="flex items-center gap-2">
            <div className={`w-2 h-2 rounded-full ${stats.isVisible ? 'bg-green-500' : 'bg-yellow-500'}`}></div>
            <span>{stats.isVisible ? '‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•' : '‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà'}</span>
          </div>
          <div className="flex items-center gap-2">
            <Badge className={`text-xs ${getStatusColor(stats.currentFrequency)}`}>
              {stats.currentFrequency === 'immediate' ? '‡∏ó‡∏±‡∏ô‡∏ó‡∏µ' :
               stats.currentFrequency === 'fast' ? '‡πÄ‡∏£‡πá‡∏ß' :
               stats.currentFrequency === 'normal' ? '‡∏õ‡∏Å‡∏ï‡∏¥' :
               stats.currentFrequency === 'slow' ? '‡∏ä‡πâ‡∏≤' : '‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á'}
            </Badge>
          </div>
        </div>

        {/* ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä */}
        <div className="space-y-2">
          <div className="flex justify-between text-xs">
            <span className="text-gray-600">‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
            <span className="font-medium">{stats.refreshStats.totalRefreshes}</span>
          </div>
          <div className="flex justify-between text-xs">
            <span className="text-gray-600">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</span>
            <span className="font-medium text-green-600">{stats.refreshStats.successfulRefreshes}</span>
          </div>
          <div className="flex justify-between text-xs">
            <span className="text-gray-600">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</span>
            <span className="font-medium">{stats.refreshStats.successRate}%</span>
          </div>
        </div>

        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û */}
        <div className="grid grid-cols-2 gap-2 text-xs">
          <div className="flex items-center gap-1">
            {stats.networkInfo && getConnectionIcon(stats.networkInfo.effectiveType)}
            <span className="text-gray-600">
              {stats.networkInfo?.effectiveType?.toUpperCase() || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}
            </span>
          </div>
          <div className="flex items-center gap-1">
            <Clock className="w-3 h-3 text-gray-400" />
            <span className="text-gray-600">
              {formatUptime(stats.uptime)}
            </span>
          </div>
        </div>

        {/* ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ */}
        {stats.memoryUsage && (
          <div className="flex justify-between text-xs">
            <span className="text-gray-600">‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥:</span>
            <span className="font-medium">
              {formatMemoryUsage(stats.memoryUsage.used)} / {formatMemoryUsage(stats.memoryUsage.total)}
            </span>
          </div>
        )}

        {/* Service Worker Status */}
        <div className="flex justify-between text-xs">
          <span className="text-gray-600">Service Worker:</span>
          <Badge
            variant={
              import.meta.env.PROD
                ? (stats.serviceWorkerActive ? 'default' : 'outline')
                : (stats.serviceWorkerSupported ? 'secondary' : 'outline')
            }
            className="text-xs"
          >
            {import.meta.env.PROD
              ? (stats.serviceWorkerActive ? '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : '‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô')
              : (stats.serviceWorkerSupported ? '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö')
            }
          </Badge>
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° */}
        <div className="flex gap-2 pt-2">
          <Button
            size="sm"
            variant="outline"
            className="text-xs h-7"
            onClick={() => autoRefreshManager.forceRefresh('immediate')}
          >
            <RefreshCw className="w-3 h-3 mr-1" />
            ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          </Button>
          <Button
            size="sm"
            variant="outline"
            className="text-xs h-7"
            onClick={() => autoRefreshManager.resetStats()}
          >
            ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default AutoRefreshStats;

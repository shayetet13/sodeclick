import React, { useState, useEffect, useRef, useCallback } from 'react'
import { Button } from './ui/button'
import { Card, CardContent } from './ui/card'
import {
  CheckCircle,
  Crown,
  Star,
  Gift,
  ArrowRight,
  Download,
  Share2,
  AlertCircle,
  RefreshCw,
  Coins,
  Vote,
  Zap,
  Shield,
  TrendingUp
} from 'lucide-react'
import { useAuth } from '../contexts/AuthContext'
// @ts-ignore
import { membershipHelpers } from '../services/membershipAPI'

interface TransactionData {
  transactionId: string
  amount: number
  currency: string
  paymentMethod?: string
  timestamp: string | Date
}

interface PlanFeatures {
  dailyChats: number
  dailyBonus: number
  specialFeatures: Array<{ description: string }>
  bonusCoins: number
}

interface PlanRewards {
  coins: number
  votePoints: number
  bonusPercentage: number
  totalCoins: number
}

interface Plan {
  name: string
  tier: string
  price: number
  currency: string
  duration?: {
    description: string
  }
  features?: PlanFeatures
  rewards?: PlanRewards
}

interface PaymentSuccessProps {
  transactionData: TransactionData
  plan: Plan
  onContinue: () => void
}

const PaymentSuccess = ({ transactionData, plan, onContinue }: PaymentSuccessProps) => {
  const { user, updateUser } = useAuth()

  const [upgrading, setUpgrading] = useState(false)
  const [upgradeComplete, setUpgradeComplete] = useState(false)
  const [upgradeError] = useState<string | null>(null)
  const [showBenefitNotification, setShowBenefitNotification] = useState(false)
  const [newBenefits, setNewBenefits] = useState<any[]>([])
  const [syncingData, setSyncingData] = useState(false)
  const [, setPreviousTier] = useState<string | null>(null)
  const syncTimeoutRef = useRef<number | null>(null)

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å localStorage
  const getCurrentUser = useCallback(() => {
    try {
      const savedUser = localStorage.getItem('user')
      return savedUser ? JSON.parse(savedUser) : user
    } catch (error) {
      console.error('Error parsing user from localStorage:', error)
      return user
    }
  }, [user])

  const currentUser = getCurrentUser()
  const [displayUser, setDisplayUser] = useState(currentUser)

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
  const checkNewBenefits = (oldUser: any, newUser: any): Array<{
    type: string;
    title: string;
    description: string;
    icon: React.ReactElement;
  }> => {
    const oldTier = oldUser?.membership?.tier || 'member'
    const newTier = newUser?.membership?.tier || 'member'

    if (oldTier === newTier) return []

    const benefits: Array<{
      type: string;
      title: string;
      description: string;
      icon: React.ReactElement;
    }> = []

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    const tierFeatures = {
      member: [],
      silver: [],
      gold: ['profileVideo', 'verificationBadge', 'specialFrame'],
      vip: ['profileVideo', 'verificationBadge', 'specialFrame', 'pinPosts', 'blurImages', 'createChatRooms'],
      vip1: ['profileVideo', 'verificationBadge', 'specialFrame', 'pinPosts', 'blurImages', 'createChatRooms', 'hideOnlineStatus'],
      vip2: ['profileVideo', 'verificationBadge', 'specialFrame', 'pinPosts', 'blurImages', 'createChatRooms', 'hideOnlineStatus', 'unlimitedMedia'],
      diamond: ['profileVideo', 'verificationBadge', 'specialFrame', 'pinPosts', 'blurImages', 'createChatRooms', 'hideOnlineStatus', 'unlimitedMedia', 'transferCoins'],
      platinum: ['profileVideo', 'verificationBadge', 'specialFrame', 'pinPosts', 'blurImages', 'createChatRooms', 'hideOnlineStatus', 'unlimitedMedia', 'transferCoins', 'unlimited']
    };
    const newFeatures = tierFeatures[newTier] || []

    if (newFeatures.length > 0) {
      benefits.push({
        type: 'features',
        title: `‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á ${membershipHelpers.getTierName(newTier)}`,
        description: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà: ${newFeatures.join(', ')}`,
        icon: <Crown className="h-4 w-4" />
      })
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï
    const coinDiff = (newUser?.coins || 0) - (oldUser?.coins || 0)
    const voteDiff = (newUser?.votePoints || 0) - (oldUser?.votePoints || 0)

    if (coinDiff > 0) {
      benefits.push({
        type: 'coins',
        title: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö',
        description: `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° ${coinDiff.toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`,
        icon: <Coins className="h-4 w-4" />
      })
    }

    if (voteDiff > 0) {
      benefits.push({
        type: 'votes',
        title: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö',
        description: `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° ${voteDiff.toLocaleString()} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï`,
        icon: <Vote className="h-4 w-4" />
      })
    }

    return benefits
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡∏¥‡∏á‡πÇ‡∏Ñ‡∏£‡πÑ‡∏ô‡∏ã‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
  const syncUserData = useCallback(async () => {
    if (!currentUser?._id) return

    setSyncingData(true)
    try {
      console.log('üîÑ Syncing user data with server...')
      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'}/api/profile/user/${currentUser._id}`, {
        headers: {
          'Authorization': `Bearer ${sessionStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success && data.data) {
          console.log('‚úÖ User data synced successfully:', data.data)

          // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å localStorage ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
          const currentLocalUser = getCurrentUser()
          const localCoins = currentLocalUser?.coins || 0
          const localVotePoints = currentLocalUser?.votePoints || 0
          const serverCoins = data.data.coins || 0
          const serverVotePoints = data.data.votePoints || 0

          console.log('üîç Coin comparison:', {
            localCoins,
            serverCoins,
            difference: localCoins - serverCoins
          })

          console.log('üîç Vote points comparison:', {
            localVotePoints,
            serverVotePoints,
            difference: localVotePoints - serverVotePoints
          })

          // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô localStorage ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
          // ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          if (serverCoins < localCoins || serverVotePoints < localVotePoints) {
            console.log('‚ö†Ô∏è Server data seems outdated, keeping local data')

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏á‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏à‡∏≤‡∏Å localStorage
            const correctedUserData = {
              ...data.data,
              coins: Math.max(serverCoins, localCoins), // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
              votePoints: Math.max(serverVotePoints, localVotePoints) // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô AuthContext ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            updateUser(correctedUserData)
            setDisplayUser(correctedUserData)

            console.log('‚úÖ Used corrected user data with local coins/vote points')
          } else {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô AuthContext ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
            updateUser(data.data)

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
            const benefits = checkNewBenefits(displayUser, data.data)
            if (benefits.length > 0) {
              setNewBenefits(benefits)
              setPreviousTier(displayUser?.membership?.tier || 'member')
              setShowBenefitNotification(true)
            }

            setDisplayUser(data.data)
          }
        }
      } else {
        console.warn('‚ö†Ô∏è Failed to sync user data:', response.status)
      }
    } catch (error) {
      console.error('‚ùå Error syncing user data:', error)
    } finally {
      setSyncingData(false)
    }
  }, [currentUser, updateUser, displayUser, setDisplayUser, setNewBenefits, setShowBenefitNotification, getCurrentUser])

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
  const renderBenefitNotification = () => {
    if (!showBenefitNotification || newBenefits.length === 0) return null

    return (
      <div className="mb-6 p-4 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl">
        <div className="flex items-start">
          <div className="w-10 h-10 bg-gradient-to-r from-green-400 to-emerald-400 rounded-full flex items-center justify-center text-white mr-4 flex-shrink-0">
            <Zap className="h-5 w-5" />
          </div>
          <div className="flex-1">
            <h3 className="font-bold text-green-800 mb-2 flex items-center">
              <Crown className="h-4 w-4 mr-2" />
              ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏´‡∏°‡πà
            </h3>
            <div className="space-y-2">
              {newBenefits.map((benefit, index) => (
                <div key={index} className="flex items-center p-2 bg-white/50 rounded-lg">
                  <div className="w-8 h-8 bg-gradient-to-r from-green-100 to-emerald-100 rounded-full flex items-center justify-center text-green-600 mr-3">
                    {benefit.icon}
                  </div>
                  <div>
                    <p className="font-medium text-green-800">{benefit.title}</p>
                    <p className="text-sm text-green-600">{benefit.description}</p>
                  </div>
                </div>
              ))}
            </div>
            <Button
              onClick={() => setShowBenefitNotification(false)}
              variant="outline"
              size="sm"
              className="mt-3 text-green-600 border-green-300 hover:bg-green-50"
            >
              ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß
            </Button>
          </div>
        </div>
      </div>
    )
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡πÇ‡∏Ñ‡∏£‡πÑ‡∏ô‡∏ã‡πå‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
  useEffect(() => {
    const checkForUpdates = () => {
      const latestUser = getCurrentUser()
      if (JSON.stringify(latestUser) !== JSON.stringify(displayUser)) {
        console.log('üîÑ PaymentSuccess: User data updated:', latestUser)

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô tier
        if (latestUser?.membership?.tier !== displayUser?.membership?.tier) {
          const benefits = checkNewBenefits(displayUser, latestUser)
          if (benefits.length > 0) {
            setNewBenefits(benefits)
            setPreviousTier(displayUser?.membership?.tier || 'member')
            setShowBenefitNotification(true)
          }
        }

        setDisplayUser(latestUser)
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 500ms
    const interval = setInterval(checkForUpdates, 500)

    // ‡∏ã‡∏¥‡∏á‡πÇ‡∏Ñ‡∏£‡πÑ‡∏ô‡∏ã‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å delay 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß)
    if (upgradeComplete && !syncingData) {
      syncTimeoutRef.current = setTimeout(() => {
        syncUserData()
      }, 5000) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß
    }

    return () => {
      clearInterval(interval)
      if (syncTimeoutRef.current) {
        clearTimeout(syncTimeoutRef.current)
      }
    }
  }, [displayUser, upgradeComplete, syncingData, getCurrentUser, syncUserData])

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö coin package ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á
  // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô App.tsx ‡πÅ‡∏•‡πâ‡∏ß
  useEffect(() => {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô
    setUpgrading(false)
    setUpgradeComplete(false)

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö coin package ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (plan?.tier === 'coin_package') {
      setUpgrading(true)

      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î (1-2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
      const timer = setTimeout(() => {
        setUpgrading(false)
        setUpgradeComplete(true)
      }, 1500)

      return () => clearTimeout(timer)
    }
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á return cleanup function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ timer
  }, [plan?.tier])

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏ß‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  const calculateCoinDisplay = () => {
    if (plan?.tier !== 'coin_package' || !plan?.rewards) return null

    const baseCoins = plan.rewards.coins || 0
    const bonusPercentage = plan.rewards.bonusPercentage || 0
    const bonusCoins = Math.floor(baseCoins * (bonusPercentage / 100))
    const totalCoins = baseCoins + bonusCoins
    const votePoints = plan.rewards.votePoints || 0

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠ 1,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
    const valuePer1000 = (plan.price / totalCoins) * 1000

    return {
      baseCoins,
      bonusCoins,
      totalCoins,
      votePoints,
      valuePer1000,
      bonusPercentage
    }
  }

  const coinDisplay = calculateCoinDisplay()

  const benefits: Array<{
    icon: React.ReactElement;
    title: string;
    description: string;
  }> = plan?.tier === 'coin_package' && coinDisplay
    ? [
        {
          icon: <Coins className="h-5 w-5" />,
          title: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö',
          description: `‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ${coinDisplay.baseCoins.toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç${coinDisplay.bonusCoins > 0 ? ` + ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ ${coinDisplay.bonusCoins.toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (${coinDisplay.bonusPercentage}%)` : ''} = ‡∏£‡∏ß‡∏° ${coinDisplay.totalCoins.toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`
        },
        {
          icon: <Vote className="h-5 w-5" />,
          title: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö',
          description: `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${coinDisplay.votePoints.toLocaleString()} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`
        },
        {
          icon: <Gift className="h-5 w-5" />,
          title: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
          description: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ'
        },
        {
          icon: <TrendingUp className="h-5 w-5" />,
          title: '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠ 1,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç',
          description: `‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ ${coinDisplay.valuePer1000?.toFixed(2) || '0.00'} ‡∏ö‡∏≤‡∏ó ‡∏ï‡πà‡∏≠ 1,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`
        }
      ]
    : [
        {
          icon: <Star className="h-5 w-5" />,
          title: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©',
          description: `‡πÅ‡∏ä‡∏ó‡πÑ‡∏î‡πâ ${plan?.features?.dailyChats === -1 ? '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î' : (plan?.features?.dailyChats || 0)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô`
        },
        {
          icon: <Gift className="h-5 w-5" />,
          title: '‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç',
          description: `‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™ ${(plan?.features?.dailyBonus || 0).toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô`
        },
        {
          icon: <Crown className="h-5 w-5" />,
          title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©',
          description: '‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'
        }
      ]

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
  const renderUpgradeStatus = () => {
    if (plan.tier !== 'coin_package') return null

    if (upgrading) {
      return (
        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-center">
            <RefreshCw className="h-5 w-5 text-blue-500 animate-spin mr-3" />
            <div>
              <h3 className="font-semibold text-blue-800">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï...</h3>
              <p className="text-sm text-blue-600">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì</p>
            </div>
          </div>
        </div>
      )
    }

    if (upgradeError) {
      return (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center">
            <AlertCircle className="h-5 w-5 text-red-500 mr-3" />
            <div className="flex-1">
              <h3 className="font-semibold text-red-800">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î</h3>
              <p className="text-sm text-red-600">{upgradeError}</p>
            </div>
            <Button
              onClick={() => window.location.reload()}
              variant="outline"
              size="sm"
              className="ml-3"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            </Button>
          </div>
        </div>
      )
    }

    if (upgradeComplete) {
      return (
        <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-center">
            <CheckCircle className="h-5 w-5 text-green-500 mr-3" />
            <div>
              <h3 className="font-semibold text-green-800">‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
              <p className="text-sm text-green-600">‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß</p>
            </div>
          </div>
        </div>
      )
    }

    return null
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!plan || !transactionData) {
    console.error('PaymentSuccess: Missing required props', { plan, transactionData });
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-50 via-violet-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-bold text-slate-800 mb-2">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
          <p className="text-slate-600 mb-4">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
          <button
            onClick={onContinue}
            className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-emerald-50 relative overflow-hidden">

      <div className="container mx-auto px-4 py-12 max-w-4xl relative z-10">
        {/* Success Header */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center justify-center w-20 h-20 bg-green-100 rounded-full mb-6">
            <CheckCircle className="h-12 w-12 text-green-500" />
          </div>
          <h1 className="text-4xl md:text-5xl font-light text-slate-800 mb-4">
            ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ
          </h1>
          <p className="text-xl text-slate-600 mb-2">
            ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô {plan?.name || '‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'} ‡πÅ‡∏•‡πâ‡∏ß
          </p>
          <p className="text-slate-500">
            ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          </p>
        </div>

        {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç */}
        {renderUpgradeStatus()}

        {/* ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà */}
        {renderBenefitNotification()}

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö */}
        {displayUser && (
          <div className="bg-green-50 border border-green-200 rounded-xl p-4 mb-6">
            <div className="flex items-center justify-between">
              <div className="text-sm text-green-800">
                <p className="font-medium">‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏ß‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</p>
                <div className="flex gap-4 mt-2">
                  <div className="text-center">
                    <div className="text-lg font-bold text-amber-600">
                      {(() => {
                        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠
                        const latestUser = getCurrentUser()
                        return (latestUser?.coins || 0).toLocaleString()
                      })()}
                    </div>
                    <div className="text-xs text-green-600">‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏ß‡∏°</div>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-bold text-purple-600">
                      {(() => {
                        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠
                        const latestUser = getCurrentUser()
                        return (latestUser?.votePoints || 0).toLocaleString()
                      })()}
                    </div>
                    <div className="text-xs text-green-600">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï</div>
                  </div>
                </div>

                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô coin package */}
                {coinDisplay && (
                  <div className="mt-3 p-3 bg-amber-50 border border-amber-200 rounded-lg">
                    <p className="text-xs font-medium text-amber-800 mb-1">‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏ô‡∏µ‡πâ:</p>
                    <div className="flex gap-3 text-xs">
                      <div className="text-center">
                        <div className="font-semibold text-amber-700">{coinDisplay.totalCoins.toLocaleString()}</div>
                        <div className="text-amber-600">‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏ß‡∏°</div>
                      </div>
                      {coinDisplay.bonusCoins > 0 && (
                        <div className="text-center">
                          <div className="font-semibold text-green-700">+{coinDisplay.bonusCoins.toLocaleString()}</div>
                          <div className="text-green-600">‡πÇ‡∏ö‡∏ô‡∏±‡∏™</div>
                        </div>
                      )}
                      <div className="text-center">
                        <div className="font-semibold text-purple-700">{coinDisplay.votePoints.toLocaleString()}</div>
                        <div className="text-purple-600">‡πÇ‡∏´‡∏ß‡∏ï</div>
                      </div>
                    </div>
                  </div>
                )}

                <div className="mt-2 text-xs text-slate-500">
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å localStorage ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
                </div>
              </div>
              <div className="flex gap-2">
                <Button
                  onClick={() => {
                    // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage
                    const latestUser = getCurrentUser()
                    console.log('üîÑ Reloaded user data:', latestUser)
                    setDisplayUser(latestUser)
                  }}
                  variant="outline"
                  size="sm"
                  className="text-green-600 border-green-300 hover:bg-green-100"
                  disabled={syncingData}
                >
                  ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                </Button>
                <Button
                  onClick={syncUserData}
                  variant="outline"
                  size="sm"
                  className="text-blue-600 border-blue-300 hover:bg-blue-100"
                  disabled={syncingData}
                >
                  {syncingData ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Ñ‡πå...
                    </>
                  ) : (
                    <>
                      <Shield className="h-4 w-4 mr-2" />
                      ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
                    </>
                  )}
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö */}
        <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 mb-6">
          <div className="flex items-start">
            <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-blue-600 text-sm mr-3 flex-shrink-0">
              ‚ÑπÔ∏è
            </div>
            <div className="text-sm text-blue-800">
              <p className="font-medium mb-1">‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£:</p>
              <ul className="space-y-1 text-blue-700">
                <li>‚Ä¢ <strong>‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏ß‡∏°:</strong> ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô + ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</li>
                <li>‚Ä¢ <strong>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï:</strong> ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à</li>
                <li>‚Ä¢ <strong>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠ 1,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç:</strong> ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠ 1,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</li>
                <li>‚Ä¢ <strong>‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç:</strong> ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà)</li>
                <li>‚Ä¢ <strong>‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô localStorage ‡πÅ‡∏•‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô</li>
                <li>‚Ä¢ <strong>‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏¢:</strong> ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ localStorage ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤</li>
                <li>‚Ä¢ <strong>‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥:</strong> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠</li>
                <li>‚Ä¢ <strong>‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:</strong> ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° "‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Transaction Details */}
          <Card className="bg-white/80 backdrop-blur-sm border border-white/20 shadow-lg">
            <CardContent className="p-6">
              <h2 className="text-xl font-semibold text-slate-800 mb-6 flex items-center">
                <CheckCircle className="h-5 w-5 mr-2 text-green-500" />
                ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </h2>
              
              <div className="space-y-4">
                <div className="flex justify-between py-2 border-b border-slate-100">
                  <span className="text-slate-600">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                  <span className="font-mono text-sm text-slate-800">{transactionData.transactionId}</span>
                </div>
                
                <div className="flex justify-between py-2 border-b border-slate-100">
                  <span className="text-slate-600">‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à</span>
                  <span className="font-semibold text-slate-800">{plan?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
                </div>

                {coinDisplay && (
                  <>
                    <div className="flex justify-between py-2 border-b border-slate-100">
                      <span className="text-slate-600">‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</span>
                      <span className="font-semibold text-slate-800">
                        {coinDisplay.baseCoins.toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
                        {coinDisplay.bonusCoins > 0 && (
                          <span className="text-green-600 text-sm ml-1">
                            (+{coinDisplay.bonusCoins.toLocaleString()} ‡πÇ‡∏ö‡∏ô‡∏±‡∏™)
                          </span>
                        )}
                      </span>
                    </div>
                    <div className="flex justify-between py-2 border-b border-slate-100">
                      <span className="text-slate-600">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</span>
                      <span className="font-semibold text-slate-800">{coinDisplay.votePoints.toLocaleString()} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</span>
                    </div>
                  </>
                )}

                <div className="flex justify-between py-2 border-b border-slate-100">
                  <span className="text-slate-600">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</span>
                  <span className="text-slate-800">{plan?.duration?.description || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
                </div>

                <div className="flex justify-between py-2 border-b border-slate-100">
                  <span className="text-slate-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</span>
                  <span className="text-xl font-bold text-slate-800">
                    ‡∏ø{transactionData.amount.toLocaleString()} {transactionData.currency}
                  </span>
                </div>

                {coinDisplay && (
                  <div className="flex justify-between py-2 border-b border-slate-100">
                    <span className="text-slate-600">‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠ 1,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç</span>
                    <span className="font-semibold text-slate-800">
                      ‡∏ø{coinDisplay.valuePer1000?.toFixed(2) || '0.00'}
                    </span>
                  </div>
                )}
                
                <div className="flex justify-between py-2 border-b border-slate-100">
                  <span className="text-slate-600">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞</span>
                  <span className="text-slate-800 capitalize">
                    {transactionData.paymentMethod ? transactionData.paymentMethod.replace('_', ' ') : 'Rabbit Gateway'}
                  </span>
                </div>
                
                <div className="flex justify-between py-2 border-b border-slate-100">
                  <span className="text-slate-600">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                  <span className="text-slate-800">
                    {new Date(transactionData.timestamp).toLocaleString('th-TH')}
                  </span>
                </div>
                
                <div className="flex justify-between py-2">
                  <span className="text-slate-600">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</span>
                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    <CheckCircle className="h-3 w-3 mr-1" />
                    ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                  </span>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-3 mt-6">
                <Button variant="outline" className="flex-1" size="sm">
                  <Download className="h-4 w-4 mr-2" />
                  ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
                </Button>
                <Button variant="outline" className="flex-1" size="sm">
                  <Share2 className="h-4 w-4 mr-2" />
                  ‡πÅ‡∏ä‡∏£‡πå
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Benefits & Features */}
          <Card className="bg-white/80 backdrop-blur-sm border border-white/20 shadow-lg">
            <CardContent className="p-6">
              <h2 className="text-xl font-semibold text-slate-800 mb-6 flex items-center">
                <Crown className="h-5 w-5 mr-2 text-pink-500" />
                ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
              </h2>

              <div className="space-y-4 mb-6">
                {benefits.map((benefit, index) => (
                  <div key={index} className="flex items-start p-3 bg-gradient-to-r from-pink-50 to-violet-50 rounded-lg">
                    <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-pink-400 to-violet-400 rounded-lg flex items-center justify-center text-white mr-3">
                      {benefit.icon}
                    </div>
                    <div>
                      <h3 className="font-semibold text-slate-800">{benefit.title}</h3>
                      <p className="text-sm text-slate-600">{benefit.description}</p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Special Features */}
              {plan?.features?.specialFeatures && plan.features.specialFeatures.length > 0 && (
                <div className="border-t border-slate-200 pt-4">
                  <h3 className="font-medium text-slate-700 mb-3">‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©</h3>
                  <div className="space-y-2">
                    {plan.features.specialFeatures.map((feature, index) => (
                      <div key={index} className="flex items-center text-sm">
                        <CheckCircle className="h-4 w-4 mr-2 text-green-500" />
                        <span className="text-slate-600">{typeof feature === 'string' ? feature : feature?.description || '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©'}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Bonus Coins */}
              {plan?.features && plan.features.bonusCoins && plan.features.bonusCoins > 0 && (
                <div className="mt-6 p-4 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg border border-yellow-200">
                  <div className="flex items-center">
                    <Gift className="h-5 w-5 text-yellow-500 mr-2" />
                    <div>
                      <h3 className="font-semibold text-yellow-800">‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©!</h3>
                      <p className="text-sm text-yellow-700">
                        ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÇ‡∏ö‡∏ô‡∏±‡∏™ {(plan?.features?.bonusCoins || 0).toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Continue Button */}
        <div className="text-center mt-12">
          <Button
            onClick={onContinue}
            size="lg"
            className="bg-gradient-to-r from-pink-500 to-violet-500 px-8 py-3"
          >
            ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©
            <ArrowRight className="h-5 w-5 ml-2" />
          </Button>
          <p className="text-sm text-slate-500 mt-3">
            ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
          </p>
        </div>

        {/* Support Info */}
        <div className="mt-12 text-center">
          <Card className="bg-slate-50/80 backdrop-blur-sm border border-slate-200/50">
            <CardContent className="p-6">
              <h3 className="font-semibold text-slate-800 mb-2">‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠?</h3>
              <p className="text-slate-600 mb-4">
                ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ
              </p>
              <div className="flex justify-center gap-4">
                <Button variant="outline" size="sm">
                  üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                </Button>
                <Button variant="outline" size="sm">
                  üí¨ ‡πÅ‡∏ä‡∏ó
                </Button>
                <Button variant="outline" size="sm">
                  üìû ‡πÇ‡∏ó‡∏£
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}

export default PaymentSuccess

import { useState, useEffect, useRef, Suspense, lazy } from 'react'

// Loading component for Suspense fallbacks
const LoadingSpinner = ({ size = 'h-8 w-8' }: { size?: string }) => (
  <div className="flex items-center justify-center p-8">
    <div className={`animate-spin rounded-full border-b-2 border-pink-500 ${size}`}></div>
  </div>
)
import { Button } from './components/ui/button'
import { Avatar, AvatarImage, AvatarFallback } from './components/ui/avatar'
import { Badge } from './components/ui/badge'
import { Tabs, TabsList, TabsTrigger, TabsContent } from './components/ui/tabs'
import { Dialog, DialogContent, DialogTitle, DialogDescription, VisuallyHidden } from './components/ui/dialog'
import LoginModal from './components/LoginModal'
import IdleWarningModal from './components/IdleWarningModal'
import { DataCacheProvider } from './hooks/useGlobalCache'
import { useRealTimeUpdate, useNotificationUpdates } from './hooks/useRealTimeUpdates'
import { getProfileImageUrl, getMainProfileImage } from './utils/profileImageUtils'
import socketManager from './services/socketManager'

// Lazy load heavy components with type assertions
const MembershipDashboard = lazy(() => import('./components/MembershipDashboard.jsx')) as any
const MembershipPlans = lazy(() => import('./components/MembershipPlans.jsx')) as any
const CoinShop = lazy(() => import('./components/CoinShop.jsx')) as any
const PaymentWithAnimation = lazy(() => import('./components/PaymentWithAnimation.tsx'))
const PaymentSuccess = lazy(() => import('./components/PaymentSuccess.tsx')) as any
const UserProfile = lazy(() => import('./components/UserProfile.jsx')) as any
const ChatRoomList = lazy(() => import('./components/ChatRoomList.jsx')) as any
const RealTimeChat = lazy(() => import('./components/RealTimeChat.jsx')) as any
const CreatePrivateRoomModal = lazy(() => import('./components/CreatePrivateRoomModal.jsx')) as any
const AIMatchingSystem = lazy(() => import('./components/AIMatchingSystem.jsx')) as any
const PrivateChatList = lazy(() => import('./components/PrivateChatList.jsx')) as any
const PrivateChat = lazy(() => import('./components/PrivateChat.jsx')) as any
const NewPrivateChatModal = lazy(() => import('./components/NewPrivateChatModal.jsx')) as any
const HeartVote = lazy(() => import('./components/HeartVote.jsx')) as any
const VoteRanking = lazy(() => import('./components/VoteRanking.jsx')) as any
const VoteRankingMini = lazy(() => import('./components/VoteRankingMini.jsx')) as any
import ErrorBoundary from './components/ErrorBoundary.jsx'
const TopVotedCarousel = lazy(() => import('./components/TopVotedCarousel.jsx')) as any
import { useAuth } from './contexts/AuthContext'
import { membershipAPI } from './services/membershipAPI'
import { paymentAPI } from './services/paymentAPI'
import { useToast, ToastProvider } from './components/ui/toast'
import MaintenanceMode from './components/MaintenanceMode'

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { 
  faSearch, 
  faHeart, 
  faComments, 
  faUser, 
  faGem,
  faBell,
  faShoppingCart,
  faTrophy
} from '@fortawesome/free-solid-svg-icons'

import { 
  Heart, 
  Search, 
  MessageCircle, 
  User, 
  Settings, 
  LogIn, 
  ChevronRight, 
  Filter, 
  MapPin, 
  Calendar, 
  Utensils, 
  Sparkles,
  CheckCircle,
  X,
  ArrowLeft,
  Users,
  Crown,
  RefreshCw,
  Briefcase,
  Languages,
  GraduationCap,
  Building,
  PawPrint,
  Dumbbell,
  Wine,
  Cigarette,
  Church,
  Baby
} from 'lucide-react'

type PublicUser = {
  _id?: string
  firstName?: string
  lastName?: string
  nickname?: string
  age?: number
  location?: string
  profileImages?: string[]
  bio?: string
  interests?: any[]
  membership?: { tier?: string }
  gender?: string
}

type FeaturedProfile = {
  id?: string | number
  name: string
  age?: number
  location?: string
  distance?: string
  bio?: string
  interests: string[]
  images: string[]
  verified?: boolean
  online?: boolean
  lastActive?: string
  height?: string
  education?: string
  job?: string
  lifestyle?: string
  lookingFor?: string
  languages?: string[]
  personality?: string
  membershipTier?: string
  membership?: { tier?: string }
  username?: string
  firstName?: string
  lastName?: string
  email?: string
  phone?: string
  occupation?: string
  weight?: string
  relationshipStatus?: string
}

// Sample profile data - Not used in production, kept for reference
// @ts-ignore - Unused variable kept for reference
const profiles: FeaturedProfile[] = [
  {
    id: 1,
    name: 'Sophie',
    age: 28,
    location: 'Bangkok',
    distance: '3 km',
    bio: 'Coffee enthusiast, book lover, and adventure seeker. Looking for someone who enjoys meaningful conversations and creating lasting memories together.',
    interests: ['Reading', 'Coffee', 'Travel', 'Hiking', 'Photography'],
    images: [],
    verified: true,
    online: true,
    lastActive: 'Online now',
    height: "5'6\"",
    education: 'Master\'s Degree',
    job: 'Graphic Designer',
    lifestyle: 'Non-smoker, occasional drinker',
    lookingFor: 'Long-term relationship',
    languages: ['English', 'Thai'],
    personality: 'Introverted but social when comfortable'
  },
  {
    id: 2,
    name: 'Alex',
    age: 31,
    location: 'Bangkok',
    distance: '5 km',
    bio: 'Photographer and foodie. Let\'s explore new restaurants and capture beautiful moments together. Passionate about art, music, and creating authentic experiences.',
    interests: ['Photography', 'Food', 'Art', 'Music', 'Concerts'],
    images: [],
    verified: true,
    online: false,
    lastActive: '2 hours ago',
    height: "5'11\"",
    education: 'Bachelor\'s Degree',
    job: 'Professional Photographer',
    lifestyle: 'Non-smoker, enjoys wine',
    lookingFor: 'Serious relationship',
    languages: ['English', 'Spanish'],
    personality: 'Extroverted and adventurous'
  },
  {
    id: 3,
    name: 'Emma',
    age: 26,
    location: 'Bangkok',
    distance: '7 km',
    bio: 'Yoga instructor and plant mom. Seeking someone with positive energy and an open mind. Let\'s grow together, both literally and figuratively.',
    interests: ['Yoga', 'Plants', 'Meditation', 'Cooking', 'Nature'],
    images: [],
    verified: true,
    online: true,
    lastActive: 'Online now',
    height: "5'4\"",
    education: 'Certified Yoga Instructor',
    job: 'Wellness Coach',
    lifestyle: 'Vegetarian, non-smoker',
    lookingFor: 'Meaningful connection',
    languages: ['English', 'Mandarin'],
    personality: 'Calm and empathetic'
  },
  {
    id: 4,
    name: 'Daniel',
    age: 30,
    location: 'Bangkok',
    distance: '4 km',
    bio: 'Software engineer by day, musician by night. Looking for someone to share both quiet evenings and concert adventures. Let\'s create our own soundtrack.',
    interests: ['Music', 'Technology', 'Concerts', 'Gaming', 'Coding'],
    images: [],
    verified: true,
    online: false,
    lastActive: '5 hours ago',
    height: "6'0\"",
    education: 'Computer Science Degree',
    job: 'Senior Developer',
    lifestyle: 'Occasional drinker, non-smoker',
    lookingFor: 'Relationship with growth potential',
    languages: ['English', 'Japanese'],
    personality: 'Thoughtful and analytical'
  },
  {
    id: 5,
    name: 'Lily',
    age: 27,
    location: 'Bangkok',
    distance: '6 km',
    bio: 'Art lover and coffee connoisseur. Let\'s create beautiful memories together. I believe every day is an opportunity for inspiration and connection.',
    interests: ['Art', 'Coffee', 'Music', 'Travel', 'Painting'],
    images: [],
    verified: true,
    online: true,
    lastActive: 'Online now',
    height: "5'5\"",
    education: 'Fine Arts Degree',
    job: 'Gallery Curator',
    lifestyle: 'Non-smoker, enjoys craft coffee',
    lookingFor: 'Creative partnership',
    languages: ['English', 'French'],
    personality: 'Expressive and intuitive'
  },
  {
    id: 6,
    name: 'James',
    age: 32,
    location: 'Bangkok',
    distance: '8 km',
    bio: 'Adventure seeker and food explorer. Looking for someone to share life\'s journeys with. Let\'s make every meal an adventure and every weekend a discovery.',
    interests: ['Adventure', 'Food', 'Travel', 'Photography', 'Scuba Diving'],
    images: [],
    verified: true,
    online: false,
    lastActive: '1 day ago',
    height: "6'2\"",
    education: 'Tourism Management',
    job: 'Travel Blogger',
    lifestyle: 'Non-smoker, occasional drinker',
    lookingFor: 'Adventure partner for life',
    languages: ['English', 'German'],
    personality: 'Bold and spontaneous'
  }
]

// Sample messages

function App() {
  const { user, login, logout, showIdleWarning, dismissIdleWarning } = useAuth()
  const { success, error, warning, ToastContainer } = useToast()
  const { updateNotification } = useNotificationUpdates()

  const [activeTab, setActiveTab] = useState<'discover' | 'matches' | 'messages' | 'ranking' | 'membership' | 'profile' | 'payment'>('discover')
  
  // Vote ranking profile navigation states
  const [selectedVoteUser, setSelectedVoteUser] = useState<any>(null)
  const [showVoteUserProfile, setShowVoteUserProfile] = useState(false)
  
  // Real-time event handlers
  useRealTimeUpdate('userLoggedIn', (data) => {
    console.log('User logged in:', data);
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    success('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setIsAuthenticated(true);
    
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login (‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á performance warning)
    if (activeTab === 'discover') {
      console.log('üîÑ Refreshing user data after login...');
      // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UI ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      setTimeout(() => {
        window.dispatchEvent(new CustomEvent('refreshUserData'));
      }, 100);
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    setTimeout(() => {
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• liked users
      fetchLikedUsers();
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
      fetchPrivateChats();
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Premium users
      window.dispatchEvent(new CustomEvent('refreshPremiumUsers'));
    }, 200);
  });

  useRealTimeUpdate('userLoggedOut', (data) => {
    console.log('User logged out:', data);
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    success('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setIsAuthenticated(false);
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    setLikedProfiles(new Set());
    setPrivateChats([]);
    setSelectedProfile(null);
    setShowProfileModal(false);
    
    // ‡∏•‡πâ‡∏≤‡∏á localStorage
    localStorage.removeItem('likedUsers');
    localStorage.removeItem('privateChats');
  });

  useRealTimeUpdate('profileImageUpdated', (data) => {
    console.log('Profile image updated:', data);
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï avatar ‡πÉ‡∏ô header ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    const avatarElement = document.querySelector('[data-avatar-user-id]');
    if (avatarElement && data.userId === user?._id) {
      // Trigger re-render ‡∏Ç‡∏≠‡∏á avatar component
      window.dispatchEvent(new CustomEvent('avatarUpdate', { detail: data }));
    }
  });

  useRealTimeUpdate('newNotification', (notification) => {
    console.log('New notification received:', notification);
    updateNotification(notification);
    // ‡πÅ‡∏™‡∏î‡∏á toast notification
    success(notification.message || '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà');
  });

  
  // Function to handle Learn More button click - scrolls to specific Premium section
  const handleLearnMoreClick = () => {
    setActiveTab('membership')
    
    // Scroll to benefits comparison table after switching to membership tab
    setTimeout(() => {
      // Try to find the benefits comparison table first
      const benefitsComparisonTable = document.getElementById('benefits-comparison-table') as HTMLElement
      if (benefitsComparisonTable) {
        benefitsComparisonTable.scrollIntoView({
          behavior: 'smooth',
          block: 'start',
          inline: 'nearest'
        })
      } else {
        // Fallback to membership comparison section
        const membershipComparison = document.getElementById('membership-comparison') as HTMLElement
        if (membershipComparison) {
          membershipComparison.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
            inline: 'nearest'
          })
        } else {
          // Fallback to membership content if comparison section not found
          const membershipContent = document.getElementById('membership-content') as HTMLElement
          if (membershipContent) {
            membershipContent.scrollIntoView({
              behavior: 'smooth',
              block: 'start',
              inline: 'nearest'
            })
          }
        }
      }
    }, 400) // Longer delay to ensure membership content is fully rendered
  }

  // Function to handle vote user profile navigation
  const handleVoteUserProfileClick = (userData: any) => {
    console.log('üîç Opening vote user profile:', userData)
    console.log('üîç userData keys:', Object.keys(userData || {}))
    console.log('üîç userData._id:', userData?._id)
    console.log('üîç userData.candidateId:', userData?.candidateId)
    console.log('üîç userData.displayName:', userData?.displayName)
    console.log('üîç userData.profileImages:', userData?.profileImages)
    
    if (!userData || !userData._id) {
      console.error('‚ùå Invalid userData:', userData)
      return
    }
    
    // ‡πÉ‡∏ä‡πâ getMainProfileImage ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô premium cards
    const mainImageIndex = userData?.mainProfileImageIndex || 0;
    const imageUrl = getMainProfileImage(
      userData?.profileImages || [], 
      mainImageIndex, 
      userData._id || userData.candidateId
    );
    
    console.log('üîç Main image URL:', imageUrl)
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà handleViewProfile ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const profileData = {
      id: userData._id,
      name: userData.displayName || `${userData.firstName || ''} ${userData.lastName || ''}`.trim() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
      age: userData.age || (userData.dateOfBirth ? new Date().getFullYear() - new Date(userData.dateOfBirth).getFullYear() : 'N/A'),
      location: userData.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      distance: 'Popular Vote',
      bio: userData.bio || '',
      interests: Array.isArray(userData.interests)
        ? userData.interests.map((it: any) => it?.category || it?.name || `${it}`).filter(Boolean)
        : [],
      images: userData.profileImages || [], // ‡πÉ‡∏ä‡πâ profileImages ‡πÄ‡∏î‡∏¥‡∏°
      verified: userData.isVerified || false,
      online: userData.isOnline || false,
      lastActive: userData.lastActive,
      membershipTier: userData.membership?.tier || userData.membershipTier || 'member',
      membership: {
        tier: userData.membership?.tier || userData.membershipTier || 'member'
      }
    }
    
    console.log('üîç Processed profileData for handleViewProfile:', profileData)
    
    // ‡πÉ‡∏ä‡πâ handleViewProfile ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    handleViewProfile(profileData);
  }

  // Function to close vote user profile
  const handleCloseVoteUserProfile = () => {
    setSelectedVoteUser(null)
    setShowVoteUserProfile(false)
  }

  // Function to handle tab change with immediate scroll behavior
  const handleTabChange = (newTab: 'discover' | 'matches' | 'messages' | 'membership' | 'profile' | 'payment') => {
    setActiveTab(newTab)
    
    // Special scroll behavior for matches tab
    if (newTab === 'matches') {
      setTimeout(() => {
        // Try to find the matches content area by ID first
        const matchesContent = document.getElementById('matches-content') as HTMLElement
        if (matchesContent) {
          matchesContent.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
            inline: 'nearest'
          })
        } else {
          // Fallback to tab navigation if matches content not found
          const tabNavigation = document.querySelector('[role="tablist"]') as HTMLElement
          if (tabNavigation) {
            tabNavigation.scrollIntoView({
              behavior: 'smooth',
              block: 'start',
              inline: 'nearest'
            })
          }
        }
      }, 200) // Longer delay to ensure matches content is fully rendered
    } else if (newTab === 'membership') {
      // For membership tab - just switch tab without scrolling to specific section
      // This allows normal tab navigation without auto-scrolling
      setTimeout(() => {
        const tabNavigation = document.querySelector('[role="tablist"]') as HTMLElement
        if (tabNavigation) {
          tabNavigation.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
            inline: 'nearest'
          })
        }
      }, 100)
    } else {
      // Default scroll behavior for other tabs
      setTimeout(() => {
        const tabNavigation = document.querySelector('[role="tablist"]') as HTMLElement
        if (tabNavigation) {
          tabNavigation.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
            inline: 'nearest'
          })
        }
      }, 100) // Small delay to ensure tab content is rendered
    }
  }
  const [showLoginDialog, setShowLoginDialog] = useState(false)
  const [selectedProfile, setSelectedProfile] = useState<FeaturedProfile | null>(null)
  const [showProfileModal, setShowProfileModal] = useState(false)
  
  // Debug wrapper for setShowProfileModal
  const setShowProfileModalDebug = (value: boolean) => {
    console.log('üîÑ setShowProfileModal called:', { value, stack: new Error().stack });
    setShowProfileModal(value);
  }
  const [profileAlert, setProfileAlert] = useState<{message: string, type: 'error' | 'warning' | 'success'} | null>(null)
  const [activeImageIndex, setActiveImageIndex] = useState(0)
  
  // Payment confirmation modal
  const [showPaymentConfirmation, setShowPaymentConfirmation] = useState(false)
  const [paymentDetails, setPaymentDetails] = useState<{
    targetUserId: string;
    targetUserName: string;
    currentCoins: number;
    imageId: string;
  } | null>(null)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [forceUpdate, setForceUpdate] = useState(0)
  const [preventModalClose, setPreventModalClose] = useState(false)
  const [likedProfiles, setLikedProfiles] = useState(new Set<string>())
  const [modalAction, setModalAction] = useState<'chat' | 'like' | 'profile' | null>(null)

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• liked users ‡∏à‡∏≤‡∏Å backend
  const fetchLikedUsers = async () => {
    try {
      const token = sessionStorage.getItem('token');
      if (!token) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ token - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î liked users');
        return;
      }

      console.log('üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• liked users...');
      const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
      const response = await fetch(`${baseUrl}/api/matching/liked-users`, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Liked users loaded:', result.data);
        if (result.data && Array.isArray(result.data)) {
          setLikedProfiles(new Set(result.data));
        }
      } else {
        console.error('‚ùå Failed to load liked users');
      }
    } catch (error) {
      console.error('‚ùå Error loading liked users:', error);
    }
  };
  const [avatarUrl, setAvatarUrl] = useState<string | null>(null)
  const [premiumUsers, setPremiumUsers] = useState<PublicUser[]>([])
  const premiumTierOrder = ['platinum', 'diamond']
  
  // Payment flow states
  const [currentView, setCurrentView] = useState<'main' | 'payment' | 'success'>('main') // 'main', 'payment', 'success'
  const [selectedPlan, setSelectedPlan] = useState<any>(null)
  const [transactionData, setTransactionData] = useState<any>(null)
  
  // Chat states
  const [chatView, setChatView] = useState<'list' | 'chat'>('list') // 'list', 'chat'
  const [selectedRoomId, setSelectedRoomId] = useState<string | null>(null)
  const [showCreateRoomModal, setShowCreateRoomModal] = useState(false)
  
  // Private chat states
  const [privateChatView, setPrivateChatView] = useState<'list' | 'chat'>('list') // 'list', 'chat'
  const [selectedPrivateChat, setSelectedPrivateChat] = useState<any>(null)
  const [showNewPrivateChatModal, setShowNewPrivateChatModal] = useState(false)
  const [privateChats, setPrivateChats] = useState<any[]>([])
  const [chatType, setChatType] = useState<'public' | 'private'>('public') // 'public', 'private'
  const [showProfileDropdown, setShowProfileDropdown] = useState(false)
  const [showNotificationDropdown, setShowNotificationDropdown] = useState(false)
  
  // Notification states
  const [notifications, setNotifications] = useState<any[]>([])
  const [unreadCount, setUnreadCount] = useState(0)
  const [isLoadingNotifications, setIsLoadingNotifications] = useState(false)
  
  // Maintenance Mode states
  const [isMaintenanceMode, setIsMaintenanceMode] = useState(false)
  const [maintenanceChecked, setMaintenanceChecked] = useState(false)
  const [hasDevAccess, setHasDevAccess] = useState(() => {
    // Check if user has dev access from localStorage
    return localStorage.getItem('devAccess') === 'true'
  })
  const [bypassMaintenance, setBypassMaintenance] = useState(() => {
    // Check if user has bypass maintenance flag
    return localStorage.getItem('bypassMaintenance') === 'true'
  })
  
  // Fetch notifications from backend
  const fetchNotifications = async () => {
    if (!user?._id) return
    
    try {
      setIsLoadingNotifications(true)
      const token = localStorage.getItem('token')
      
      // ‡πÉ‡∏ä‡πâ VITE_API_BASE_URL ‡πÅ‡∏ó‡∏ô VITE_API_URL
      const apiUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
      const response = await fetch(`${apiUrl}/api/notifications/${user._id}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response type
      const contentType = response.headers.get('content-type')
      if (!contentType || !contentType.includes('application/json')) {
        const text = await response.text()
        console.error('‚ùå Expected JSON but got:', contentType, text.substring(0, 200))
        throw new Error(`Expected JSON response but got ${contentType}`)
      }
      
      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          setNotifications(data.data.notifications || [])
          setUnreadCount(data.data.unreadCount || 0)
        }
      } else {
        console.error('‚ùå Notifications API error:', response.status, response.statusText)
        // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ notifications error ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        setNotifications([])
        setUnreadCount(0)
      }
    } catch (error) {
      console.error('Error fetching notifications:', error)
      // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ notifications error ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
      setNotifications([])
      setUnreadCount(0)
    } finally {
      setIsLoadingNotifications(false)
    }
  }

  const clearAllNotifications = async () => {
    if (!user?._id) return
    
    try {
      const token = localStorage.getItem('token')
      const apiUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
      const response = await fetch(`${apiUrl}/api/notifications/${user._id}/clear`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          console.log('üóëÔ∏è All notifications cleared successfully')
          // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô state
          setNotifications([])
          setUnreadCount(0)
          success('‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
        }
      } else {
        console.error('‚ùå Clear notifications API error:', response.status, response.statusText)
        error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô')
      }
    } catch (err) {
      console.error('‚ùå Error clearing notifications:', err)
      error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô')
    }
  }
  
  // Polling for new notifications
  useEffect(() => {
    if (!user?._id) return
    
    // Fetch initial notifications
    fetchNotifications()
    
    // Load purchased images when user data is available
    loadPurchasedImages(user._id)
    
    // Set up polling every 30 seconds
    const interval = setInterval(fetchNotifications, 30000)
    
    return () => clearInterval(interval)
  }, [user?._id])
  
  // Format time ago
  const formatTimeAgo = (timestamp: string | Date) => {
    const now = new Date()
    const time = new Date(timestamp)
    const diffInSeconds = Math.floor((now.getTime() - time.getTime()) / 1000)
    
    if (diffInSeconds < 60) return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà'
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`
    return `${Math.floor(diffInSeconds / 86400)} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`
  }
  
  // Render notification item
  const renderNotificationItem = (notification: any) => {
    const { type, data, createdAt, isRead, title, message } = notification
    
    const handleNotificationClick = async () => {
      // Mark notification as read
      if (!isRead) {
        try {
          const token = localStorage.getItem('token')
          const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/notifications/${user?._id}/mark-read`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
              notificationIds: [notification._id],
              notificationType: type // ‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
            })
          })
          
          if (response.ok) {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢
            if (type === 'private_message') {
              setNotifications(prev => prev.filter(n => n._id !== notification._id))
              setUnreadCount(prev => Math.max(0, prev - 1))
            } else {
              // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ mark ‡πÄ‡∏õ‡πá‡∏ô read
              setNotifications(prev => prev.map(n => 
                n._id === notification._id ? { ...n, isRead: true } : n
              ))
              setUnreadCount(prev => Math.max(0, prev - 1))
            }
          }
        } catch (error) {
          console.error('Error marking notification as read:', error)
        }
      }
      
      if (type === 'private_message' && data.chatRoom) {
        // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
        setActiveTab('messages')
        setChatType('private')
        
        // ‡πÉ‡∏ä‡πâ chat ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å notification
        console.log('üîç Using chat ID from notification:', data.chatRoom)
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• private chats ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢ chat ID
        fetchPrivateChats().then(() => {
          // ‡∏£‡∏≠‡πÉ‡∏´‡πâ state ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ä‡∏ó
          setTimeout(() => {
            console.log('üìã Available private chats:', privateChats.map(chat => ({
              id: chat.id,
              otherUserId: chat.otherUser?._id,
              otherUserName: chat.otherUser?.displayName || chat.otherUser?.firstName
            })))
            
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢ chat ID ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
            const existingChat = privateChats.find(chat => chat.id === data.chatRoom)
            
            if (existingChat) {
              // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡πÅ‡∏ä‡∏ó ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡∏ô‡∏±‡πâ‡∏ô
              console.log('‚úÖ Found existing chat by ID:', existingChat.id)
              setSelectedPrivateChat(existingChat)
              setPrivateChatView('chat')
            } else {
              // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ä‡∏ó ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ sender ID (fallback)
              console.log('‚ùå Chat not found by ID, trying by sender ID')
              const fallbackChat = privateChats.find(chat => chat.otherUser?._id === data.senderId)
              
              if (fallbackChat) {
                console.log('‚úÖ Found fallback chat:', fallbackChat.id)
                setSelectedPrivateChat(fallbackChat)
                setPrivateChatView('chat')
              } else {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
                console.log('‚ùå No chat found, creating new one')
                const targetUser = {
                  _id: data.senderId,
                  displayName: data.senderName || 'Unknown User',
                  profileImages: data.senderProfileImage ? [data.senderProfileImage] : []
                }
                handleStartPrivateChat(targetUser)
              }
            }
          }, 100) // ‡∏£‡∏≠ 100ms ‡πÉ‡∏´‡πâ state ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        }).catch(error => {
          console.error('‚ùå Error fetching private chats:', error)
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
          const targetUser = {
            _id: data.senderId,
            displayName: data.senderName || 'Unknown User',
            profileImages: data.senderProfileImage ? [data.senderProfileImage] : []
          }
          handleStartPrivateChat(targetUser)
        })
        
        // ‡∏õ‡∏¥‡∏î notifications dropdown
        setShowNotificationDropdown(false)
      }
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö vote notifications ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©
    }
    
    if (type === 'private_message') {
      return (
        <div 
          key={notification._id} 
          onClick={handleNotificationClick}
          className={`px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 ${!isRead ? 'bg-blue-50' : ''}`}
        >
          <div className="flex items-start space-x-3">
            <div className="w-10 h-10 rounded-full overflow-hidden flex-shrink-0">
              {data.senderProfileImage && !data.senderProfileImage.startsWith('data:image/svg+xml') ? (
                <img 
                  src={getProfileImageUrl(data.senderProfileImage, data.senderId)}
                  alt={data.senderName}
                  className="w-10 h-10 object-cover"
                />
              ) : (
                <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                  <MessageCircle className="h-5 w-5 text-blue-600" />
                </div>
              )}
            </div>
            <div className="flex-1 min-w-0">
              <p className="text-sm font-medium text-gray-900">{title || '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà'}</p>
              <p className="text-xs text-gray-500">{message || `${data.senderName} ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤`}</p>
              {data.messageContent && (
                <p className="text-xs text-gray-400 mt-1 truncate">{data.messageContent}</p>
              )}
              <p className="text-xs text-gray-400 mt-1">{formatTimeAgo(createdAt)}</p>
            </div>
            {!isRead && <div className="w-2 h-2 bg-blue-500 rounded-full"></div>}
          </div>
        </div>
      )
    }
    
    if (type === 'profile_like') {
      return (
        <div 
          key={notification._id} 
          onClick={handleNotificationClick}
          className={`px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 ${!isRead ? 'bg-pink-50' : ''}`}
        >
          <div className="flex items-start space-x-3">
            <div className="w-10 h-10 rounded-full overflow-hidden flex-shrink-0">
              {data.voterProfileImage && !data.voterProfileImage.startsWith('data:image/svg+xml') ? (
                <img 
                  src={getProfileImageUrl(data.voterProfileImage, data.voterId)}
                  alt={data.voterName}
                  className="w-10 h-10 object-cover"
                />
              ) : (
                <div className="w-10 h-10 bg-pink-100 rounded-full flex items-center justify-center">
                  <Heart className="h-5 w-5 text-pink-600" />
                </div>
              )}
            </div>
            <div className="flex-1 min-w-0">
              <p className="text-sm font-medium text-gray-900">{title || '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏ß‡∏î'}</p>
              <p className="text-xs text-gray-500">{message || '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ‚ù§Ô∏è'}</p>
              <p className="text-xs text-gray-400 mt-1">{formatTimeAgo(createdAt)}</p>
            </div>
            {!isRead && <div className="w-2 h-2 bg-pink-500 rounded-full"></div>}
          </div>
        </div>
      )
    }
    
    return null
  }
  
  // Chat countdown states
  const [chatCountdown, setChatCountdown] = useState<number | null>(null)
  const [isStartingChat, setIsStartingChat] = useState(false)
  
  // Profile details view state
  const [showProfileDetails, setShowProfileDetails] = useState(false)
  
  // Profile data state
  const [profileData, setProfileData] = useState<any>(null)
  
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÅ‡∏ä‡∏ó‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
  const removeDuplicateChatsFromArray = (chats: any[]) => {
    const seen = new Set();
    const uniqueChats = chats.filter(chat => {
      // ‡πÉ‡∏ä‡πâ otherUser._id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
      const key = chat.otherUser?._id || chat.otherUser?.id || chat.id;
      if (seen.has(key)) {
        console.log('üóëÔ∏è Removing duplicate chat:', key);
        return false;
      }
      seen.add(key);
      return true;
    });
    
    if (chats.length !== uniqueChats.length) {
      console.log('üßπ Removed duplicates:', chats.length, '->', uniqueChats.length);
    }
    
    return uniqueChats;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å API
  const fetchPrivateChats = async () => {
    if (!user || (!user._id && !user.id)) {
      console.log('‚ùå No user or user ID found');
      return;
    }
    
    try {
      console.log('üîÑ Fetching private chats from API...');
      const token = sessionStorage.getItem('token');
      
      if (!token) {
        console.error('‚ùå No token found');
        return;
      }

      const userId = user._id || user.id;
      console.log('üë§ User ID:', userId);
      const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
      const response = await fetch(`${baseUrl}/api/messages/private-chats/${userId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ Private chats fetched successfully:', result);
      
      if (result.success && result.data && result.data.privateChats) {
        console.log('üìã Raw private chats from API:', result.data.privateChats);
        // ‡∏•‡∏ö‡πÅ‡∏ä‡∏ó‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        const uniqueChats = removeDuplicateChatsFromArray(result.data.privateChats);
        console.log('üìã Unique chats after deduplication:', uniqueChats);
        setPrivateChats(uniqueChats);
        console.log('üîÑ Updated private chats from API:', uniqueChats.length);
      } else {
        console.error('‚ùå Invalid response format:', result);
        console.log('üìã Response structure:', {
          success: result.success,
          hasData: !!result.data,
          hasPrivateChats: !!(result.data && result.data.privateChats),
          dataKeys: result.data ? Object.keys(result.data) : 'no data'
        });
      }
    } catch (error) {
      console.error('‚ùå Error fetching private chats:', error);
      // Fallback to localStorage if API fails
      console.log('üìÇ Falling back to localStorage...');
      const savedChats = loadChatsFromStorage();
      if (savedChats.length > 0) {
        const uniqueStoredChats = removeDuplicateChatsFromArray(savedChats);
        setPrivateChats(uniqueStoredChats);
        console.log('üîÑ Restored chats from localStorage fallback:', uniqueStoredChats.length);
      }
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ socket ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isSocketReady = () => {
    const ready = !!(window.socketManager && window.socketManager.socket && window.socketManager.socket.connected);
    if (!ready) {
      console.warn('‚ö†Ô∏è Socket not ready:', {
        hasWindowSocketManager: !!window.socketManager,
        hasSocket: !!(window.socketManager && window.socketManager.socket),
        socketConnected: !!(window.socketManager && window.socketManager.socket && window.socketManager.socket.connected),
        socketId: window.socketManager?.socket?.id
      });
    }
    return ready;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  const updateRecipientChatList = async (chatId, message, senderId) => {
    try {
      console.log('üîÑ Updating recipient chat list for chat:', chatId);
      
      // ‡∏™‡πà‡∏á notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      if (isSocketReady()) {
        window.socketManager?.socket.emit('update-recipient-chat-list', {
          chatId,
          message,
          senderId
        });
        console.log('‚úÖ Socket notification sent successfully');
      } else {
        console.warn('‚ö†Ô∏è No socket available for real-time messaging');
      }
    } catch (error) {
      console.error('‚ùå Error updating recipient chat list:', error);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô API
  const createPrivateChat = async (otherUser: any) => {
    if (!user) return null;
    
    try {
      console.log('üîÑ Creating private chat via API...');
      const token = sessionStorage.getItem('token');
      
      if (!token) {
        console.error('‚ùå No token found');
        return null;
      }

      const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
      const response = await fetch(`${baseUrl}/api/messages/create-private-chat`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId1: user._id || user.id,
          userId2: otherUser._id
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ Private chat created successfully:', result);
      
      if (result.success && result.data) {
        const chatId = result.data.chatId;
        const isNew = result.data.isNew;
        console.log('üîë Created chat ID:', chatId, 'isNew:', isNew);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingChat = privateChats.find(chat => chat.id === chatId);
        if (existingChat) {
          console.log('üìù Chat already exists, returning existing chat');
          return existingChat;
        }
        
        const newChat = {
          id: chatId,
          roomId: chatId,
          otherUser: otherUser,
          messages: [],
          createdAt: new Date(),
          lastMessage: null,
          unreadCount: 0,
          isNew: isNew
        };
        
        console.log('üìù New chat object:', newChat);
        return newChat;
      } else {
        console.error('‚ùå Invalid response format:', result);
        return null;
      }
    } catch (error) {
      console.error('‚ùå Error creating private chat:', error);
      return null;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API
  const fetchMessages = async (chatRoomId: string) => {
    if (!user) return [];
    
    try {
      console.log('üîÑ Fetching messages for chat room:', chatRoomId);
      const token = sessionStorage.getItem('token');
      
      if (!token) {
        console.error('‚ùå No token found');
        return [];
      }

      const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
      const response = await fetch(`${baseUrl}/api/messages/${chatRoomId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ Messages fetched successfully:', result);
      
      if (result.success && result.data && result.data.messages) {
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏°‡∏µ senderId ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        const processedMessages = result.data.messages.map((message: any) => ({
          ...message,
          senderId: message.sender?._id || message.sender?.id || message.senderId,
          // ‡πÉ‡∏ä‡πâ createdAt ‡πÄ‡∏õ‡πá‡∏ô timestamp ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ timestamp
          timestamp: message.timestamp || message.createdAt || new Date(),
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isDelivered ‡πÄ‡∏õ‡πá‡∏ô true ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          isDelivered: message.isDelivered !== null ? message.isDelivered : true,
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isRead ‡πÄ‡∏õ‡πá‡∏ô false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          isRead: message.isRead !== null ? message.isRead : false
        }));
        console.log('üîÑ Processed messages with metadata:', processedMessages.length);
        return processedMessages;
      } else {
        console.error('‚ùå Invalid response format:', result);
        return [];
      }
    } catch (error) {
      console.error('‚ùå Error fetching messages:', error);
      return [];
    }
  };

  // Check maintenance mode status
  const checkMaintenanceMode = async () => {
    try {
      const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
      
      const response = await fetch(`${baseUrl}/api/maintenance/status`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        const isMaintenance = data.data?.isMaintenanceMode || false;
        setIsMaintenanceMode(isMaintenance);
        
        // Clear bypass flag if maintenance mode is off
        if (!isMaintenance) {
          localStorage.removeItem('bypassMaintenance');
          setBypassMaintenance(false);
        }
      } else {
        console.error('Maintenance mode check failed:', response.status);
        setIsMaintenanceMode(false);
      }
    } catch (error) {
      console.error('Error checking maintenance mode:', error);
      // Default to false if check fails
      setIsMaintenanceMode(false);
    } finally {
      setMaintenanceChecked(true);
    }
  };

  // Handle dev access to maintenance mode
  const handleDevAccess = (code: string) => {
    if (code === 'DEV2024LOVE') {
      setHasDevAccess(true);
      localStorage.setItem('devAccess', 'true');
      alert('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Developer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏´‡∏ô‡πâ‡∏≤ Maintenance Mode ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà');
    }
  };

  // Check authentication on mount
  useEffect(() => {
    console.log('üöÄ App mounted, user:', user ? 'logged in' : 'not logged in');
    if (user) {
      console.log('üë§ User object:', user);
      console.log('üÜî User ID:', user._id || user.id);
    }
    
    // Check maintenance mode first
    checkMaintenanceMode();
    
    // Check bypass maintenance flag
    const bypassFlag = localStorage.getItem('bypassMaintenance') === 'true';
    setBypassMaintenance(bypassFlag);
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö localStorage
    try {
      const testKey = 'test-localStorage';
      localStorage.setItem(testKey, 'test');
      localStorage.removeItem(testKey);
      console.log('‚úÖ localStorage is working');
    } catch (error) {
      console.error('‚ùå localStorage is not working:', error);
    }
    
    if (user) {
      setIsAuthenticated(true)
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• liked users ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      fetchLikedUsers()
      
      // Initialize socket manager for real-time features
      console.log('üîå Initializing socket manager...');
      window.socketManager = socketManager;
      console.log('üîå window.socketManager set:', !!window.socketManager);
      
      // Add global debug function
      (window as any).debugSocket = () => {
        console.log('üîç Socket Debug Info:', {
          hasWindowSocketManager: !!window.socketManager,
          hasSocket: !!(window.socketManager && window.socketManager.socket),
          socketConnected: !!(window.socketManager && window.socketManager.socket && window.socketManager.socket.connected),
          socketId: window.socketManager?.socket?.id,
          socketManagerInstance: window.socketManager,
          socketInstance: window.socketManager?.socket
        });
      };
      
      // Add global function to check if socket is ready (for components to use)
      (window as any).isSocketReady = () => {
        return !!(window.socketManager && window.socketManager.socket && window.socketManager.socket.connected);
      };
      
      // Connect to socket server and wait for connection
      const connectSocket = async () => {
        try {
          const socket = await socketManager.connect(import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000');
          console.log('‚úÖ Socket manager connected successfully:', socket?.id);
          
          // Ensure socket is available on window.socketManager
          if (window.socketManager) {
            window.socketManager.socket = socket;
          }
          console.log('‚úÖ Socket assigned to window.socketManager.socket');
        } catch (error) {
          console.error('‚ùå Failed to connect socket manager:', error);
          // Still assign socketManager even if connection fails for retry capability
          if (window.socketManager) {
            window.socketManager.socket = null;
          }
        }
      };
      
      connectSocket();
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å API
      fetchPrivateChats()
    } else {
      setIsAuthenticated(false)
      console.log('üë§ User not logged in, skipping chat restoration');
    }
  }, [user])

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡πÉ‡∏ô localStorage ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    console.log('üîÑ useEffect triggered - privateChats changed:', privateChats.length);
    console.log('üîç Current user:', user ? 'logged in' : 'not logged in');
    
    if (user && privateChats.length >= 0) { // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å > 0 ‡πÄ‡∏õ‡πá‡∏ô >= 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ä‡∏ó
      console.log('üíæ User is logged in, saving chats to localStorage');
      saveChatsToStorage(privateChats);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      setTimeout(() => {
        const verification = localStorage.getItem('privateChats');
        if (verification) {
          const parsed = JSON.parse(verification);
          console.log('‚úÖ Verification: Data saved successfully, count:', parsed.length);
        } else {
          console.error('‚ùå Verification: Data not saved to localStorage');
        }
      }, 100);
    } else if (!user) {
      // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
      console.log('üßπ User logged out, clearing chats from localStorage');
      localStorage.removeItem('privateChats');
      // ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setPrivateChats([]) ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á infinite loop
      console.log('üßπ Cleared chats on logout');
    } else {
      console.log('üì≠ No chats to save or user not logged in');
    }
  }, [privateChats, user]);

  // ‡πÅ‡∏¢‡∏Å useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  useEffect(() => {
    if (!user) {
      console.log('üßπ User logged out, clearing chats state');
      setPrivateChats([]);
    }
  }, [user]);

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Socket
  // Removed duplicate listener - handled in the main private chat useEffect below

  // Cleanup socket connection on component unmount
  useEffect(() => {
    return () => {
      if (window.socketManager) {
        console.log('üîå Cleaning up socket manager on unmount...');
        window.socketManager.disconnect();
        window.socketManager = undefined;
      }
    };
  }, []);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î modal ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
      if (preventModalClose) {
        console.log('üîí Preventing modal close due to preventModalClose flag');
        return;
      }
      
      if (showProfileDropdown) {
        const target = event.target as HTMLElement
        if (!target.closest('.profile-dropdown-container')) {
          setShowProfileDropdown(false)
        }
      }
      
      if (showNotificationDropdown) {
        const target = event.target as HTMLElement
        if (!target.closest('.notification-dropdown-container')) {
          setShowNotificationDropdown(false)
        }
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [showProfileDropdown, showNotificationDropdown, preventModalClose])

  // Load Premium Members for Discover tab (from backend only)
  useEffect(() => {
    let isCancelled = false
    const loadPremium = async () => {
      try {
        // setIsLoadingPremium(true)
        const base = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
        const token = sessionStorage.getItem('token');
        console.log('üîë Frontend - Sending token:', token ? 'Present' : 'Not present');
        console.log('üë§ Frontend - Current user:', user);
        
        const res = await fetch(`${base}/api/profile/premium?limit=50`, {
          headers: {
            'Content-Type': 'application/json',
            ...(token ? { 'Authorization': `Bearer ${token}` } : {})
          }
        })
        if (!res.ok) return
        const data = await res.json()
        const users: PublicUser[] = data?.data?.users || []
        // Ensure final ordering and cap
        const sorted = users
          .filter(u => {
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
            const currentUserId = user?._id || user?.id;
            const userId = u._id || (u as any)?.id;
            return currentUserId !== userId;
          })
          .sort((a: PublicUser, b: PublicUser) => {
            const ai = premiumTierOrder.indexOf((a?.membership?.tier || '') as string)
            const bi = premiumTierOrder.indexOf((b?.membership?.tier || '') as string)
            return ai - bi
          })
          .slice(0, 50)
        if (!isCancelled) setPremiumUsers(sorted)
      } catch (_) {
        // ignore errors for this section
      } finally {
        // if (!isCancelled) setIsLoadingPremium(false)
      }
    }
    loadPremium()
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event refreshPremiumUsers
    const handleRefreshPremiumUsers = () => {
      console.log('üîÑ Event received: refreshPremiumUsers');
      loadPremium();
    };
    
    window.addEventListener('refreshPremiumUsers', handleRefreshPremiumUsers);
    
    return () => { 
      isCancelled = true;
      window.removeEventListener('refreshPremiumUsers', handleRefreshPremiumUsers);
    }
  }, [user]) // ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏õ‡πá‡∏ô dependency ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

  // Function to fetch premium users (extracted from useEffect)
  // const fetchPremiumUsers = async () => {
  //   try {
  //     const base = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
  //     const token = sessionStorage.getItem('token');
  //     
  //     const res = await fetch(`${base}/api/profile/premium?limit=50`, {
  //       headers: {
  //         'Content-Type': 'application/json',
  //         ...(token ? { 'Authorization': `Bearer ${token}` } : {})
  //       }
  //     })
  //     if (!res.ok) return
  //     const data = await res.json()
  //     const users: PublicUser[] = data?.data?.users || []
  //     // Ensure final ordering and cap
  //     const sorted = users
  //       .sort((a: PublicUser, b: PublicUser) => {
  //         const ai = premiumTierOrder.indexOf((a?.membership?.tier || '') as string)
  //         const bi = premiumTierOrder.indexOf((b?.membership?.tier || '') as string)
  //         return ai - bi
  //       })
  //       .slice(0, 50)
  //     setPremiumUsers(sorted)
  //   } catch (_) {
  //     // ignore errors for this section
  //   }
  // }

  // Helper function for webapp notification with duplicate prevention
  const notificationHistory = useRef(new Set<string>());
  const showWebappNotification = (message: string, type: 'warning' | 'error' | 'success' = 'warning') => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö notification
    const notificationKey = `${message}_${type}_${Date.now()}`;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ notification ‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
    const now = Date.now();
    const recentNotifications = Array.from(notificationHistory.current).filter(key => {
      const timestamp = parseInt(key.split('_').pop() || '0');
      return now - timestamp < 3000; // 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    });
    
    const isDuplicate = recentNotifications.some(key => 
      key.startsWith(`${message}_${type}_`)
    );
    
    if (isDuplicate) {
      console.log('üîî Duplicate notification prevented:', { message, type });
      return;
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° notification ‡∏•‡∏á‡πÉ‡∏ô history
    notificationHistory.current.add(notificationKey);
    
    // ‡∏•‡∏ö notification ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å history (‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    if (notificationHistory.current.size > 10) {
      const oldest = Array.from(notificationHistory.current).sort()[0];
      notificationHistory.current.delete(oldest);
    }
    
    console.log('üîî Showing notification:', { message, type });
    // Use toast notification
    switch (type) {
      case 'success':
        success(message);
        break;
      case 'error':
        error(message);
        break;
      case 'warning':
      default:
        warning(message);
        break;
    }
  };

  // Load all users for Discover Amazing People section
  const [allUsers, setAllUsers] = useState<PublicUser[]>([])
  const [isLoadingAllUsers, setIsLoadingAllUsers] = useState(false)
  const [currentPage, setCurrentPage] = useState(1)
  const [hasMoreUsers, setHasMoreUsers] = useState(true)
  const [visibleCount, setVisibleCount] = useState(12)
  const [filters, setFilters] = useState({
    gender: '',
    ageMin: 18,
    ageMax: 100,
    province: '',
    lookingFor: '',
    relationship: '',
    otherRelationship: '',
    distanceKm: '',
    lat: '',
    lng: ''
  })

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ online/offline ‡πÅ‡∏ö‡∏ö real-time ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discover tab
  useEffect(() => {
    if (activeTab !== 'discover') return;

    const interval = setInterval(async () => {
      try {
        const token = sessionStorage.getItem('token');
        if (!token) return;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const response = await fetch(`${import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'}/api/users/online-status`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const result = await response.json();
          if (result.success && result.data) {
            const onlineUsers = result.data.onlineUsers || [];
            console.log(`üü¢ Found ${onlineUsers.length} online users for Discover`);
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ online ‡πÉ‡∏ô allUsers
            setAllUsers(prevUsers => 
              prevUsers.map(user => {
                const isOnline = onlineUsers.some(onlineUser => 
                  onlineUser._id === user._id
                );
                
                return {
                  ...user,
                  isOnline: isOnline,
                  lastActive: (user as any).lastActive
                };
              })
            );
          }
        }
      } catch (error) {
        console.error('‚ùå Error updating online status for Discover:', error);
      }
    }, 10000); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(interval);
  }, [activeTab])
  const [filtersOpen, setFiltersOpen] = useState(false)

  useEffect(() => {
    let isCancelled = false
    const loadAllUsers = async () => {
      try {
        setIsLoadingAllUsers(true)
        const base = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
        const res = await fetch(`${base}/api/profile/discover?limit=50`, {
          headers: {
            'Content-Type': 'application/json',
            ...(sessionStorage.getItem('token') ? { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } : {})
          }
        })
        if (!res.ok) return
        const data = await res.json()
        const users: PublicUser[] = data?.data?.users || []
        const pagination = data?.data?.pagination || {}
        
        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
        const filteredUsers = users.filter(u => {
          const currentUserId = user?._id || user?.id;
          const userId = u._id || (u as any)?.id;
          return currentUserId !== userId;
        });
        
        // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        console.log('üîç Discover API Response:', {
          totalUsers: users.length,
          filteredUsers: filteredUsers.length,
          userTiers: filteredUsers.map(u => ({ username: (u as any).username, tier: (u as any).membershipTier || u.membership?.tier })),
          pagination
        });
        
        // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
        console.log(`üìä Cards to display: ${Math.min(visibleCount, filteredUsers.length)} of ${filteredUsers.length} total users`);
        
        if (!isCancelled) {
          setAllUsers(filteredUsers)
          setHasMoreUsers(pagination.page < pagination.pages)
          setCurrentPage(1)
          setVisibleCount(filteredUsers.length)
        }
      } catch (_) {
        // ignore errors for this section
      } finally {
        if (!isCancelled) setIsLoadingAllUsers(false)
      }
    }

    loadAllUsers()

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event refreshUserData
    const handleRefreshUserData = () => {
      console.log('üîÑ Event received: refreshUserData');
      // ‡πÉ‡∏ä‡πâ requestIdleCallback ‡∏´‡∏£‡∏∑‡∏≠ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á performance warning
      if (window.requestIdleCallback) {
        window.requestIdleCallback(() => {
          loadAllUsers();
        });
      } else {
        setTimeout(() => {
          loadAllUsers();
        }, 0);
      }
    };

    window.addEventListener('refreshUserData', handleRefreshUserData);

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö real-time
    const handleUserUpgraded = (event) => {
      const upgradeData = event.detail;
      console.log('üéâ User upgraded event received:', upgradeData);

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
      if (upgradeData.userId === user?._id || upgradeData.userId === user?.id) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô AuthContext
        if (window.updateAuthContext) {
          const updatedUser = { ...user };

          if (upgradeData.tier) {
            updatedUser.membership = {
              ...updatedUser.membership,
              tier: upgradeData.tier
            };
          }

          if (upgradeData.coinsAdded) {
            updatedUser.coins = (updatedUser.coins || 0) + upgradeData.coinsAdded;
          }

          if (upgradeData.votePointsAdded) {
            updatedUser.votePoints = (updatedUser.votePoints || 0) + upgradeData.votePointsAdded;
          }

          window.updateAuthContext(updatedUser);
          console.log('‚úÖ AuthContext updated with upgrade data');
        }

        // ‡πÅ‡∏™‡∏î‡∏á toast notification ‡∏´‡∏£‡∏∑‡∏≠ popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        // ‡πÅ‡∏™‡∏î‡∏á toast notification ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        success({
          title: '‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ',
          description: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á ${upgradeData.tier} ‡πÅ‡∏•‡πâ‡∏ß`
        });
      }
    };

    const handleMembershipUpdated = (event) => {
      const membershipData = event.detail;
      console.log('üëë Membership updated event received:', membershipData);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö real-time
      if (membershipData.userId === user?._id || membershipData.userId === user?.id) {
        if (window.updateAuthContext) {
          const updatedUser = {
            ...user,
            membership: {
              ...user.membership,
              tier: membershipData.newTier
            }
          };
          window.updateAuthContext(updatedUser);
        }
      }
    };

    window.addEventListener('userUpgraded', handleUserUpgraded);
    window.addEventListener('membershipUpdated', handleMembershipUpdated);

    return () => {
      isCancelled = true
      window.removeEventListener('refreshUserData', handleRefreshUserData);
      window.removeEventListener('userUpgraded', handleUserUpgraded);
      window.removeEventListener('membershipUpdated', handleMembershipUpdated);
    }
  }, [user]) // ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏õ‡πá‡∏ô dependency ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

  
  // Load user profile image for header avatar
  useEffect(() => {
    const loadAvatar = async () => {
      try {
        if (user?._id || user?.id) {
          const base = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
          const userId = user._id || user.id;
          const res = await fetch(`${base}/api/profile/${userId}`, {
            headers: {
              'Content-Type': 'application/json',
              ...(sessionStorage.getItem('token') ? { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } : {})
            }
          })
          if (res.ok) {
            const data = await res.json()
            const mainImageIndex = data?.data?.profile?.mainProfileImageIndex || 0
            const img = (data?.data?.profile?.profileImages?.[mainImageIndex] as string | undefined) || ''
            console.log('üéØ App.tsx header avatar updated');
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ default
            if (img && typeof img === 'string' && !img.startsWith('data:image/svg+xml')) {
              const avatarUrl = getProfileImageUrl(img, user?._id || user?.id)
              setAvatarUrl(avatarUrl)
            } else {
              setAvatarUrl(null)
            }
            return
          }
        }
      } catch (_) {
        // ignore
      }
      setAvatarUrl(null)
    }
    if (isAuthenticated) {
      loadAvatar()
    } else {
      setAvatarUrl(null)
    }
  }, [isAuthenticated, user])
  
  // ‡∏ü‡∏±‡∏á event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  useEffect(() => {
    const handleProfileImageUpdate = (event: CustomEvent) => {
      const { userId, profileImages } = event.detail;
      if (user?._id === userId || user?.id === userId) {
        const mainImageIndex = event.detail.mainProfileImageIndex || 0;
        const img = profileImages?.[mainImageIndex];
        console.log('üéØ App.tsx event update');
              if (img && typeof img === 'string' && !img.startsWith('data:image/svg+xml')) {
          const avatarUrl = getProfileImageUrl(img, userId)
          setAvatarUrl(avatarUrl);
        } else {
          setAvatarUrl(null);
        }
      }
    };

    window.addEventListener('profileImageUpdated', handleProfileImageUpdate as EventListener);
    return () => {
      window.removeEventListener('profileImageUpdated', handleProfileImageUpdate as EventListener);
    };
  }, [user]);

  // ‡∏ü‡∏±‡∏á event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡πÄ‡∏ï‡∏ï‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÄ‡∏û‡∏¥‡πà‡∏° debouncing)
  useEffect(() => {
    let timeoutId: number;
    
    const handleMessageStatusUpdate = (event: CustomEvent) => {
      // Clear previous timeout
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      
      // Debounce the handler
      timeoutId = setTimeout(() => {
        const { messageId, status } = event.detail;
        console.log('üì¨ Message status update event:', { messageId, status });
        // handleMessageStatusUpdate(messageId, status);
      }, 100); // 100ms debounce
    };

    window.addEventListener('message-status-update', handleMessageStatusUpdate as EventListener);
    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      window.removeEventListener('message-status-update', handleMessageStatusUpdate as EventListener);
    };
  }, [selectedPrivateChat]);
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÉ‡∏ô profile modal
  const handleProfileLike = async (profileId: string) => {
    console.log('üîç handleProfileLike called with profileId:', profileId);
    
    const token = sessionStorage.getItem('token');
    if (!token) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ token - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    const isCurrentlyLiked = likedProfiles.has(profileId);
    console.log('üìä Current like status:', isCurrentlyLiked);

    try {
      console.log('üöÄ Sending API request...');
      const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
      const response = await fetch(`${baseUrl}/api/matching/like`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ 
          userId: profileId
        })
      });

      console.log('üì° Response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ API Response:', result);
        console.log(isCurrentlyLiked ? '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏•‡∏Ñ‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!' : '‡∏™‡πà‡∏á‡πÑ‡∏•‡∏Ñ‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÉ‡∏ô local state
        setLikedProfiles(prev => {
          const newSet = new Set(prev);
          if (isCurrentlyLiked) {
            newSet.delete(profileId); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏ã‡πâ‡∏≥
          } else {
            newSet.add(profileId); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
          }
          console.log('üîÑ Updated likedProfiles:', Array.from(newSet));
          return newSet;
        });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå‡πÅ‡∏ö‡∏ö real-time
        setAllUsers(prevUsers => {
          return prevUsers.map(user => {
            if (user._id === profileId) {
              // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API response ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏≠‡∏á
              return {
                ...user,
                likeCount: result.data?.likeCount || (user as any).likeCount || 0
              };
            }
            return user;
          });
        });

        // ‡∏™‡πà‡∏á event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ Matches ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢
        console.log('üì§ App.tsx sending like-status-changed event:', {
          profileId,
          isLiked: !isCurrentlyLiked,
          likeCount: result.data?.likeCount || 0
        });
        window.dispatchEvent(new CustomEvent('like-status-changed', {
          detail: {
            profileId,
            isLiked: !isCurrentlyLiked,
            likeCount: result.data?.likeCount || 0
          }
        }));
      } else {
        const error = await response.json();
        console.error('‚ùå API Error:', error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏•‡∏Ñ‡πå');
      }
    } catch (error) {
      console.error('‚ùå Network Error:', error);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
  const canCreatePrivateChat = (currentUserTier: string, targetUserTier: string) => {
    const tierHierarchy = {
      'member': 0,
      'silver': 1,
      'gold': 2,
      'vip': 3,
      'vip1': 4,
      'vip2': 5,
      'diamond': 6,
      'platinum': 7
    };
    
    const currentLevel = (tierHierarchy as any)[currentUserTier] || 0;
    const targetLevel = (tierHierarchy as any)[targetUserTier] || 0;
    
    console.log('üîç canCreatePrivateChat check:', { currentUserTier, targetUserTier, currentLevel, targetLevel, canChat: currentLevel >= targetLevel });
    
    // Role ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö Role ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
    // Role ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö Role ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ
    return currentLevel >= targetLevel;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  const canViewProfile = (currentUserTier: string, targetUserTier: string) => {
    const tierHierarchy = {
      'member': 0,
      'silver': 1,
      'gold': 2,
      'vip': 3,
      'vip1': 4,
      'vip2': 5,
      'diamond': 6,
      'platinum': 7
    };
    
    const currentLevel = (tierHierarchy as any)[currentUserTier] || 0;
    const targetLevel = (tierHierarchy as any)[targetUserTier] || 0;
    
    console.log('üîç canViewProfile check:', { 
      currentUserTier, 
      targetUserTier, 
      currentLevel, 
      targetLevel, 
      canView: currentLevel >= targetLevel,
      rule: 'Role ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á Role ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠'
    });
    
    // Role ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á Role ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
    // Role ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á Role ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ
    return currentLevel >= targetLevel;
  };

  // Helper function to safely display data that might be an object
  const safeDisplay = (data: any) => {
    if (data === null || data === undefined) return '';
    if (typeof data === 'string' || typeof data === 'number') return data;
    if (typeof data === 'object') {
      // Handle specific object types
      if (data.level !== undefined) {
        return data.level || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      }
      if (data.category) {
        return data.category;
      }
      if (data.name) {
        return data.name;
      }
      // For other objects, try to find a meaningful value
      if (data.value) return data.value;
      if (data.text) return data.text;
      if (data.label) return data.label;
      // If no meaningful value found, return empty string
      return '';
    }
    return String(data);
  };

  // Helper function to format interests data
  const formatInterests = (interests: any[]) => {
    if (!interests || !Array.isArray(interests)) return [];
    
    return interests.map(interest => {
      if (typeof interest === 'string') return interest;
      if (typeof interest === 'object' && interest.category) {
        return interest.category;
      }
      return String(interest);
    }).filter(Boolean);
  };

  // Helper function to translate gender to Thai
  const translateGender = (gender: string) => {
    const genderMap: { [key: string]: string } = {
      'male': '‡∏ä‡∏≤‡∏¢',
      'female': '‡∏´‡∏ç‡∏¥‡∏á',
      'other': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
      'non-binary': '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏®',
      'prefer-not-to-say': '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
    };
    return genderMap[gender?.toLowerCase()] || gender || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  };

  // Helper function to translate relationship preference to Thai
  const translateRelationship = (relationship: string) => {
    const relationshipMap: { [key: string]: string } = {
      'serious': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á',
      'casual': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏ö‡∏≤‡∏¢‡πÜ',
      'friendship': '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
      'dating': '‡πÄ‡∏î‡∏ó',
      'marriage': '‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô',
      'not-sure': '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à',
      'friends-with-benefits': '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå',
      'long-term': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß',
      'short-term': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô',
      'female': '‡∏´‡∏ç‡∏¥‡∏á',
      'male': '‡∏ä‡∏≤‡∏¢',
      'any': '‡∏ó‡∏∏‡∏Å‡πÄ‡∏û‡∏®',
      'both': '‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏û‡∏®',
      'other': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
    };
    return relationshipMap[relationship?.toLowerCase()] || relationship || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  };


  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ‡πÄ‡∏ö‡∏•‡∏≠
  const handleBlurPayment = async (targetUserId: string, targetUserName: string, imageId?: string) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      if (!targetUserId || !targetUserName) {
        showWebappNotification('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        return;
      }
      
      if (!imageId || imageId === 'unknown') {
        showWebappNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠');
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const currentUser = JSON.parse(sessionStorage.getItem('user') || '{}');
      const hasAlreadyPurchased = currentUser.purchasedImages?.some((purchased: any) => 
        purchased.profileId === targetUserId && purchased.imageId === imageId
      );

      if (hasAlreadyPurchased) {
        showWebappNotification('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß');
        return;
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
      const token = sessionStorage.getItem('token');
      if (!token) {
        showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
        return;
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å API
      console.log('üí∞ Checking user coins before payment...');
      
      try {
        const userResponse = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/auth/me`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (!userResponse.ok) {
          throw new Error(`Failed to fetch user data: ${userResponse.status}`);
        }
        
        const userData = await userResponse.json();
        const userCoins = userData.data?.user?.coins || 0;
        
        console.log('üí∞ Current user coins:', userCoins);
        console.log('üí∞ Full user data:', userData);
        
        if (userCoins < 10000) {
          showWebappNotification(`‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 10,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${userCoins.toLocaleString()})`);
          return;
        }
      } catch (error) {
        console.error('‚ùå Error fetching user coins:', error);
        showWebappNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏î‡πâ');
        return;
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö confirmation
      const userResponse2 = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/auth/me`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      const userData2 = await userResponse2.json();
      const currentCoins = userData2.data?.user?.coins || 0;
      
      // ‡πÅ‡∏™‡∏î‡∏á confirmation modal
      setPaymentDetails({
        targetUserId,
        targetUserName,
        currentCoins,
        imageId: imageId || 'unknown' // ‡πÉ‡∏ä‡πâ imageId ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ default
      });
      setShowPaymentConfirmation(true);

    } catch (error) {
      console.error('Error preparing blur payment:', error);
      showWebappNotification('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å API
  const loadPurchasedImages = async (userId: string) => {
    try {
      console.log('üîÑ Loading purchased images for user:', userId);
      
      const token = sessionStorage.getItem('token');
      if (!token) {
        console.error('‚ùå No token found');
        return;
      }
      
      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/blur/transactions/${userId}?type=purchases`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('üì¶ Loaded purchased images from API:', data);
        
        if (data.success && data.data.transactions) {
          // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• transactions ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö purchasedImages
          const purchasedImages = data.data.transactions.map((transaction: any) => ({
            profileId: transaction.imageOwner.toString(),
            imageId: transaction.imageId,
            purchasedAt: transaction.purchasedAt
          }));
          
          console.log('üîÑ Converting to purchasedImages format:', purchasedImages);
          
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô sessionStorage
          const currentUser = JSON.parse(sessionStorage.getItem('user') || '{}');
          const updatedUser = {
            ...currentUser,
            purchasedImages: purchasedImages
          };
          
          sessionStorage.setItem('user', JSON.stringify(updatedUser));
          console.log('‚úÖ Updated user with purchased images from API');
        }
      } else {
        console.error('‚ùå Failed to load purchased images:', response.status);
      }
    } catch (error) {
      console.error('‚ùå Error loading purchased images:', error);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
  const confirmBlurPayment = async () => {
    console.log('üü¢ confirmBlurPayment function called');
    if (!paymentDetails) {
      console.log('‚ùå No payment details');
      return;
    }

    try {
      const token = sessionStorage.getItem('token');
      if (!token) {
        showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
        return;
      }

      // ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î payment confirmation modal ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading
      showWebappNotification('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç...', 'warning');
      
      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ modal ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
      setPreventModalClose(true);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
      if (!paymentDetails.targetUserId || !paymentDetails.imageId) {
        showWebappNotification('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        return;
      }
      
      console.log('üí≥ Sending payment request:', {
        targetUserId: paymentDetails.targetUserId,
        imageId: paymentDetails.imageId,
        amount: 10000,
        url: `${import.meta.env.VITE_API_BASE_URL}/api/blur/pay`
      });

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/blur/pay`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          targetUserId: paymentDetails.targetUserId,
          imageId: paymentDetails.imageId,
          amount: 10000
        })
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response status
      if (!response.ok) {
        console.error('‚ùå API Response Error:', {
          status: response.status,
          statusText: response.statusText,
          url: response.url
        });
        
        if (response.status === 404) {
          showWebappNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö API endpoint ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö');
          return;
        }
        
        const errorResult = await response.json().catch(() => ({ message: 'Unknown error' }));
        showWebappNotification(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorResult.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ'}`);
        return;
      }
      
      const result = await response.json();
      
      console.log('üí≥ Payment response:', {
        status: response.status,
        ok: response.ok,
        result
      });

      if (result.success) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô sessionStorage
        const currentUser = JSON.parse(sessionStorage.getItem('user') || '{}');
        const targetUserId = paymentDetails.targetUserId;
        const targetUserName = paymentDetails.targetUserName;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        // const alreadyPurchased = currentUser.blurImagePurchases?.some((id: any) => 
        //   id?.toString() === targetUserId?.toString()
        // );
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏π‡∏õ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏£‡∏¥‡∏á
        const purchasedImage = {
          profileId: targetUserId,
          imageId: result.data.imageId || 'unknown',
          purchasedAt: new Date().toISOString()
        };
        
        const updatedUser = { 
          ...currentUser, 
          coins: result.data.remainingCoins,
          purchasedImages: [...(currentUser.purchasedImages || []), purchasedImage]
        };
        sessionStorage.setItem('user', JSON.stringify(updatedUser));
        
        console.log('‚úÖ Payment successful, updated user coins:', updatedUser.coins);
        console.log('‚úÖ Updated purchasedImages:', updatedUser.purchasedImages);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        showWebappNotification(`‚úÖ ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á ${targetUserName} ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`);
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏π‡∏õ‡πÉ‡∏ô sessionStorage ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        const updatedPurchasedImages = [...(currentUser.purchasedImages || []), purchasedImage];
        const updatedUserWithPurchases = {
          ...updatedUser,
          purchasedImages: updatedPurchasedImages
        };
        sessionStorage.setItem('user', JSON.stringify(updatedUserWithPurchases));

        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        await loadPurchasedImages(currentUser.id);
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó selectedProfile ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if (selectedProfile && selectedProfile.id === targetUserId) {
          console.log('üîÑ Updating selectedProfile to trigger re-render');
          // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ React re-render ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÉ‡∏´‡∏°‡πà
          setSelectedProfile(prevProfile => {
            if (!prevProfile) return null;
            return {
              ...prevProfile,
              // ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ re-render
              _paymentUpdated: Date.now(),
              // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
              _purchasedImages: updatedUser.purchasedImages
            };
          });
          
          console.log('‚úÖ Profile updated, staying in profile modal');
        } else {
          console.log('‚ùå No selectedProfile or ID mismatch:', { 
            selectedProfileId: selectedProfile?.id, 
            targetUserId,
            hasSelectedProfile: !!selectedProfile
          });
        }
        
        // ‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
        
        // ‡∏õ‡∏¥‡∏î payment confirmation modal ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
        console.log('üîÑ Closing payment confirmation modal');
        setShowPaymentConfirmation(false);
        setPaymentDetails(null);
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó sessionStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        sessionStorage.setItem('user', JSON.stringify(updatedUser));
        
        // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ re-render UI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        setTimeout(() => {
          setForceUpdate(prev => prev + 1);
        }, 100);
        
        console.log('‚úÖ Payment confirmation modal closed, profile modal should remain open');
        
        // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î modal ‡∏´‡∏•‡∏±‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏™‡∏£‡πá‡∏à
        setTimeout(() => {
          setPreventModalClose(false);
          console.log('üîí Ensuring profile modal stays open after payment');
          if (!showProfileModal) {
            console.log('üîÑ Re-opening profile modal that was accidentally closed');
            setShowProfileModalDebug(true);
          }
        }, 200);
        
      } else {
        console.error('‚ùå Payment failed:', result);
        showWebappNotification(`‚ùå ${result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç'}`);
        
        // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        setPreventModalClose(false);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        if (result.data) {
          console.log('üí∞ Payment failure details:', {
            currentCoins: result.data.currentCoins,
            required: result.data.required
          });
        }
      }

    } catch (error) {
      console.error('Error paying for blur image:', error);
      showWebappNotification('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    } finally {
      setPaymentDetails(null);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
  const cancelBlurPayment = () => {
    console.log('üî¥ cancelBlurPayment function called');
    
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
    setPreventModalClose(false);
    
    setShowPaymentConfirmation(false);
    setPaymentDetails(null);
    showWebappNotification('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡πâ‡∏ß', 'warning');
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  const handleViewProfile = async (profileData: any) => {
    if (!user) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      setProfileAlert({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô', type: 'error' });
      setTimeout(() => setProfileAlert(null), 3000);
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Role ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    const currentUserTier = user.membership?.tier || 'member';
    const targetUserTier = profileData.membershipTier || 'member';
    
    console.log('üîç Profile access check:', {
      currentUser: user.username || user.email,
      currentUserTier,
      targetUser: profileData.name,
      targetUserTier,
      profileData
    });
    
    if (!canViewProfile(currentUserTier, targetUserTier)) {
      console.log('üö´ Cannot view profile - Role restriction:', { currentUserTier, targetUserTier });
      showWebappNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ');
      return;
    }
    
    console.log('üë§ Viewing profile details:', profileData.name);
    
    // ‡πÄ‡∏õ‡∏¥‡∏î profile modal ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    openProfileModal(profileData);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡πÉ‡∏ô localStorage
  const saveChatsToStorage = (chats: any[]) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ localStorage ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (typeof Storage === 'undefined') {
        console.error('‚ùå localStorage is not supported');
        return;
      }
      
      console.log('üíæ Saving chats to localStorage:', chats.length);
      console.log('üìã Chat details to save:', chats.map(chat => ({
        id: chat.id,
        otherUserName: chat.otherUser?.name || chat.otherUser?.displayName,
        messageCount: chat.messages?.length || 0
      })));
      
      localStorage.setItem('privateChats', JSON.stringify(chats));
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const saved = localStorage.getItem('privateChats');
      if (saved) {
        console.log('‚úÖ Successfully saved chats to localStorage');
      } else {
        console.error('‚ùå Failed to save chats to localStorage');
      }
    } catch (error) {
      console.error('‚ùå Error saving chats to localStorage:', error);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏à‡∏≤‡∏Å localStorage
  const loadChatsFromStorage = () => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ localStorage ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (typeof Storage === 'undefined') {
        console.error('‚ùå localStorage is not supported');
        return [];
      }
      
      const savedChats = localStorage.getItem('privateChats');
      console.log('üîç Raw localStorage data:', savedChats);
      
      if (savedChats) {
        const parsedChats = JSON.parse(savedChats);
        console.log('üìÇ Loaded chats from localStorage:', parsedChats.length);
        console.log('üìã Chat details:', parsedChats.map((chat: any) => ({
          id: chat.id,
          otherUserName: chat.otherUser?.name || chat.otherUser?.displayName,
          messageCount: chat.messages?.length || 0
        })));
        return parsedChats;
      } else {
        console.log('üì≠ No chats found in localStorage');
      }
    } catch (error) {
      console.error('‚ùå Error loading chats from localStorage:', error);
    }
    return [];
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á user object ‡∏ó‡∏µ‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
  const createUserObject = (profileData: any) => {
    return {
      _id: profileData.id || profileData._id,
      id: profileData.id || profileData._id,
      name: profileData.name,
      firstName: profileData.name || profileData.firstName,
      displayName: profileData.name || profileData.displayName,
      lastName: profileData.lastName || '',
      age: profileData.age,
      location: profileData.location,
      bio: profileData.bio,
      interests: profileData.interests,
      profileImages: profileData.images || profileData.profileImages,
      isVerified: profileData.verified || (profileData as any).isVerified,
      isOnline: profileData.online || (profileData as any).isOnline || false,
      lastActive: (profileData as any).lastActive,
      membershipTier: profileData.membershipTier || profileData.membership?.tier || 'member'
    };
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  const findExistingChat = (otherUser: any) => {
    console.log('üîç Finding existing chat for user:', otherUser);
    console.log('üìã Current chats:', privateChats.length);
    
    const existingChat = privateChats.find(chat => {
      // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ID ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
      const chatUserId = chat.otherUser._id || chat.otherUser.id;
      const targetUserId = otherUser._id || otherUser.id;
      
      console.log('üîç Comparing:', {
        chatUserId,
        targetUserId,
        chatUserName: chat.otherUser.name || chat.otherUser.displayName,
        targetUserName: otherUser.name || otherUser.displayName,
        isMatch: chatUserId === targetUserId
      });
      
      return chatUserId === targetUserId;
    });
    
    if (existingChat) {
      console.log('‚úÖ Found existing chat:', existingChat.id);
    } else {
      console.log('‚ùå No existing chat found');
    }
    
    return existingChat;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏ä‡∏ó‡∏ã‡πâ‡∏≥
  const removeDuplicateChats = () => {
    console.log('üßπ Starting duplicate chat cleanup...');
    console.log('üìã Current chats before cleanup:', privateChats.length);
    
    if (privateChats.length === 0) {
      console.log('üì≠ No chats to clean up');
      return;
    }
    
    const seen = new Set();
    const uniqueChats = privateChats.filter(chat => {
      // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥
      const userId = chat.otherUser._id || chat.otherUser.id;
      
      if (!userId) {
        console.log('‚ö†Ô∏è Chat has no user ID:', chat.id);
        return false; // ‡∏•‡∏ö‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ user ID
      }
      
      if (seen.has(userId)) {
        console.log('üóëÔ∏è Removing duplicate chat:', chat.id, 'for user:', userId);
        return false;
      }
      
      seen.add(userId);
      console.log('‚úÖ Keeping chat:', chat.id, 'for user:', userId);
      return true;
    });
    
    console.log('üìã Chats after cleanup:', uniqueChats.length);
    
    if (uniqueChats.length !== privateChats.length) {
      console.log('üßπ Cleaned up duplicate chats:', privateChats.length, '->', uniqueChats.length);
      setPrivateChats(uniqueChats);
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á localStorage
      saveChatsToStorage(uniqueChats);
    } else {
      console.log('‚úÖ No duplicate chats found');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
  const handleStartPrivateChat = async (otherUser: any) => {
    if (!user) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Role ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó
    const currentUserTier = user.membership?.tier || 'member';
    const targetUserTier = otherUser.membershipTier || 'member';
    
    if (!canCreatePrivateChat(currentUserTier, targetUserTier)) {
      console.log('üö´ Cannot start chat - Role restriction:', { currentUserTier, targetUserTier });
      setProfileAlert({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ', type: 'warning' });
      setTimeout(() => setProfileAlert(null), 3000); // ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      return;
    }
    
    console.log('üöÄ Starting private chat with:', otherUser);
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
    setIsStartingChat(true);
    setChatCountdown(2);
    
    const countdownInterval = setInterval(() => {
      setChatCountdown(prev => {
        if (prev === null || prev <= 1) {
          clearInterval(countdownInterval);
          
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          console.log('üîç Checking for existing chat with:', otherUser);
          console.log('üìã Current private chats:', privateChats.map(chat => ({
            id: chat.id,
            otherUserId: chat.otherUser._id,
            otherUserName: chat.otherUser.displayName || chat.otherUser.firstName
          })));
          
          // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏ä‡∏ó‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
          removeDuplicateChats();
          
          // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
          setTimeout(async () => {
            const existingChat = findExistingChat(otherUser);
            
            if (existingChat) {
              // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
              console.log('‚úÖ Using existing chat:', existingChat.id);
              setSelectedPrivateChat(existingChat);
            } else {
              // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô API
              console.log('üÜï Creating new chat via API for user:', otherUser.name || otherUser.displayName);
              const newChat = await createPrivateChat(otherUser);
              
              if (newChat) {
                console.log('‚úÖ New chat created successfully:', newChat.id);
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÅ‡∏ä‡∏ó‡∏ã‡πâ‡∏≥
                setPrivateChats(prev => {
                  const updatedChats = [newChat, ...prev];
                  const uniqueChats = removeDuplicateChatsFromArray(updatedChats);
                  console.log('üìù Updated chats array:', updatedChats.length, '->', uniqueChats.length);
                  return uniqueChats;
                });
                setSelectedPrivateChat(newChat);
              } else {
                console.error('‚ùå Failed to create new chat via API');
                // Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡πÉ‡∏ô localStorage
                const fallbackChat = {
                  id: `private_${Date.now()}`,
                  otherUser: otherUser,
                  messages: [],
                  createdAt: new Date(),
                  lastMessage: null,
                  unreadCount: 0
                };
                
                setPrivateChats(prev => {
                  const updatedChats = [fallbackChat, ...prev];
                  const uniqueChats = removeDuplicateChatsFromArray(updatedChats);
                  saveChatsToStorage(uniqueChats);
                  return uniqueChats;
                });
                setSelectedPrivateChat(fallbackChat);
              }
            }
            
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
            setChatType('private');
            setPrivateChatView('chat');
            handleTabChange('messages');
          }, 100);
          
          // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
          setIsStartingChat(false);
          setChatCountdown(null);
          setSelectedProfile(null);
          
          return null;
        }
        return prev - 1;
      });
    }, 1000);
  };

  const handleSelectPrivateChat = async (chat: any) => {
    console.log('üì± Selecting private chat:', chat);
    setSelectedPrivateChat(chat);
    setPrivateChatView('chat');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó
    if (chat.id) {
      console.log('üîÑ Loading messages for chat:', chat.id);
      const messages = await fetchMessages(chat.id);
      
      if (messages.length > 0) {
        console.log('‚úÖ Loaded messages:', messages.length);
        setSelectedPrivateChat((prev: any) => ({
          ...prev,
          messages: messages
        }));
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
        setPrivateChats(prev => {
          const updatedChats = prev.map(c => 
            c.id === chat.id 
              ? { ...c, messages: messages }
              : c
          );
          saveChatsToStorage(updatedChats);
          return updatedChats;
        });
      } else {
        console.log('üì≠ No messages found for this chat');
      }
    }
  };

  const handleBackToPrivateChatList = () => {
    setChatType('private');
    setPrivateChatView('list');
    setSelectedPrivateChat(null);
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchPrivateChats() ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
    console.log('üì± Back to private chat list');
  };


  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
  const handleDeletePrivateChat = async (chatId: string) => {
    console.log('üóëÔ∏è Deleting private chat:', chatId);
    
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠ soft delete ‡πÅ‡∏ä‡∏ó
      const token = localStorage.getItem('token');
      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/messages/private-chat/${chatId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Chat soft deleted successfully:', result);
        
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• private chats ‡∏à‡∏≤‡∏Å API
        await fetchPrivateChats();
        
        // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        if (selectedPrivateChat?.id === chatId) {
          setPrivateChatView('list');
          setSelectedPrivateChat(null);
        }
        
        console.log('‚úÖ Private chat deleted successfully and data refreshed');
      } else {
        const errorData = await response.json();
        console.error('‚ùå Failed to delete chat:', errorData);
        
        // ‡∏ñ‡πâ‡∏≤ API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å UI ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (fallback)
        setPrivateChats(prev => {
          const updatedChats = prev.filter(chat => chat.id !== chatId);
          saveChatsToStorage(updatedChats);
          return updatedChats;
        });
        
        if (selectedPrivateChat?.id === chatId) {
          setPrivateChatView('list');
          setSelectedPrivateChat(null);
        }
      }
    } catch (error) {
      console.error('‚ùå Error deleting chat:', error);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å UI ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (fallback)
      setPrivateChats(prev => {
        const updatedChats = prev.filter(chat => chat.id !== chatId);
        saveChatsToStorage(updatedChats);
        return updatedChats;
      });
      
      if (selectedPrivateChat?.id === chatId) {
        setPrivateChatView('list');
        setSelectedPrivateChat(null);
      }
    }
    console.log(`‡πÅ‡∏ä‡∏ó ${chatId} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user?._id || user?.id}`);
  };




  const handleSendPrivateMessage = async (messageData: any) => {
    if (!selectedPrivateChat || !user) return;
    
    console.log('üì§ handleSendPrivateMessage called:', {
      messageData,
      selectedPrivateChat: selectedPrivateChat,
      chatId: selectedPrivateChat.id
    });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    const tempMessage = {
      _id: `temp-${Date.now()}-${Math.random()}`,
      content: messageData.content,
      senderId: user._id || user.id,
      sender: {
        _id: user._id || user.id,
        username: user.username,
        displayName: user.displayName || user.firstName,
        profileImages: user.profileImages || []
      },
      chatRoomId: selectedPrivateChat.id,
      createdAt: new Date().toISOString(),
      isTemporary: true,
      isDelivered: false,
      replyTo: messageData.replyTo,
      image: messageData.image
    };

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setSelectedPrivateChat((prev: any) => ({
      ...prev,
      messages: [...(prev.messages || []), tempMessage],
      lastMessage: tempMessage
    }));

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    setPrivateChats(prev => {
      const updatedChats = prev.map(chat => {
        if (chat.id === selectedPrivateChat.id) {
          return { 
            ...chat, 
            messages: [...(chat.messages || []), tempMessage], 
            lastMessage: tempMessage 
          };
        }
        return chat;
      });
      saveChatsToStorage(updatedChats);
      return updatedChats;
    });
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
    try {
      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'}/api/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${sessionStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          content: messageData.content,
          senderId: user._id || user.id,
          chatRoomId: selectedPrivateChat.id,
          messageType: 'text',
          replyToId: messageData.replyTo || null
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ Message sent to backend successfully:', result);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏à‡∏≤‡∏Å backend ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sender ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (result.success && result.data) {
        const updatedMessage = {
          ...tempMessage,
          _id: result.data._id,
          isDelivered: true,
          isTemporary: false,
          senderId: user._id || user.id,
          sender: result.data.sender || {
            _id: user._id || user.id,
            username: user.username,
            displayName: user.displayName || user.firstName,
            profileImages: user.profileImages || []
          }
        };

        // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
        setSelectedPrivateChat((prev: any) => ({
          ...prev,
          messages: prev.messages.map((msg: any) => 
            msg._id === tempMessage._id ? updatedMessage : msg
          ),
          lastMessage: updatedMessage
        }));

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
        setPrivateChats(prev => {
          const updatedChats = prev.map(chat => {
            if (chat.id === selectedPrivateChat.id) {
              return {
                ...chat,
                messages: chat.messages.map((msg: any) => 
                  msg._id === tempMessage._id ? updatedMessage : msg
                ),
                lastMessage: updatedMessage
              };
            }
            return chat;
          });
          saveChatsToStorage(updatedChats);
          return updatedChats;
        });
      }
    } catch (error) {
      console.error('Error sending message to backend:', error);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÉ‡∏ô UI
      if (showWebappNotification) {
        showWebappNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
      }
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏≠‡∏≠‡∏Å
      setSelectedPrivateChat((prev: any) => ({
        ...prev,
        messages: prev.messages.filter((msg: any) => msg._id !== tempMessage._id)
      }));

      setPrivateChats(prev => {
        const updatedChats = prev.map(chat => {
          if (chat.id === selectedPrivateChat.id) {
            return {
              ...chat,
              messages: chat.messages.filter((msg: any) => msg._id !== tempMessage._id)
            };
          }
          return chat;
        });
        saveChatsToStorage(updatedChats);
        return updatedChats;
      });
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Socket.IO ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    if (messageData.socketMessage && messageData.messageType === 'own-message') {
      console.log('üì® Received own message from Socket.IO:', messageData.socketMessage);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      setSelectedPrivateChat((prev: any) => {
        const existingMessages = prev.messages || [];
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏≠‡∏≤‡∏à‡∏°‡∏≤‡∏à‡∏≤‡∏Å custom event)
        const isDuplicate = existingMessages.some((msg: any) => 
          msg._id === messageData.socketMessage._id || 
          (msg.content === messageData.socketMessage.content && msg.senderId === messageData.socketMessage.senderId && !msg.isTemporary)
        );
        
        if (isDuplicate) {
          console.log('üì® Duplicate own message detected, skipping');
          return prev;
        }
        
        const updatedMessages = existingMessages.map((msg: any) => {
          // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
          if (msg.isTemporary && 
              msg.content === messageData.socketMessage.content && 
              msg.senderId === messageData.socketMessage.senderId) {
            console.log('üì® Replacing temporary message with real message');
            return messageData.socketMessage; // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
          }
          return msg;
        }).filter((msg: any, index: number, arr: any[]) => {
          // ‡∏•‡∏ö duplicate messages ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ _id ‡πÅ‡∏•‡∏∞ content ‡πÄ‡∏õ‡πá‡∏ô unique identifier
          return arr.findIndex(m => m._id === msg._id && m.content === msg.content) === index;
        });
        
        return {
          ...prev,
          messages: updatedMessages,
          lastMessage: messageData.socketMessage
        };
      });
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
      setPrivateChats(prev => {
        const updatedChats = prev.map(chat => {
          if (chat.id === selectedPrivateChat.id) {
            const updatedMessages = chat.messages?.map((msg: any) => {
              // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
              if (msg.isTemporary && 
                  msg.content === messageData.socketMessage.content && 
                  msg.senderId === messageData.socketMessage.senderId) {
                return messageData.socketMessage; // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
              }
              return msg;
            }) || [];
            
            return { ...chat, messages: updatedMessages, lastMessage: messageData.socketMessage };
          }
          return chat;
        });
        saveChatsToStorage(updatedChats);
        return updatedChats;
      });
      
      return; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô Socket.IO ‡πÅ‡∏•‡πâ‡∏ß
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Socket.IO ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Socket.IO
    if (messageData.socketMessage && messageData.messageType === 'socket-message') {
      console.log('üì® Received message from Socket.IO:', messageData.socketMessage);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô duplicate)
      const messageExists = selectedPrivateChat.messages?.some((msg: any) => 
        msg._id === messageData.socketMessage._id || 
        (msg.content === messageData.socketMessage.content && 
         msg.senderId === messageData.socketMessage.senderId && 
         Math.abs(new Date(msg.timestamp).getTime() - new Date(messageData.socketMessage.timestamp).getTime()) < 1000)
      );
      
      if (messageExists) {
        console.log('üì® Message already exists, skipping duplicate');
        return;
      }
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Socket.IO
      setSelectedPrivateChat((prev: any) => ({
        ...prev,
        messages: [...(prev.messages || []), messageData.socketMessage],
        lastMessage: messageData.socketMessage
      }));
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Socket.IO
      setPrivateChats(prev => {
        const updatedChats = prev.map(chat => 
          chat.id === selectedPrivateChat.id 
            ? { ...chat, messages: [...(chat.messages || []), messageData.socketMessage], lastMessage: messageData.socketMessage }
            : chat
        );
        saveChatsToStorage(updatedChats);
        return updatedChats;
      });
      
      return; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô Socket.IO ‡πÅ‡∏•‡πâ‡∏ß
    }
    
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
    console.log('üí¨ Sending private message via API:', tempMessage);
    console.log('üîç Selected chat:', selectedPrivateChat.id);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend ‡∏ú‡πà‡∏≤‡∏ô API
    try {
      const token = sessionStorage.getItem('token');
      
      if (!token) {
        console.error('‚ùå No token found for sending message');
        return;
      }

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô API
      const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
      const response = await fetch(`${baseUrl}/api/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          content: messageData.content,
          senderId: user._id || user.id,
          chatRoomId: selectedPrivateChat.id,
          messageType: 'text',
          replyToId: messageData.replyTo || null
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ Message sent to backend successfully:', result);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏à‡∏≤‡∏Å backend ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sender ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (result.success && result.data) {
        // ‡∏™‡πà‡∏á notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Socket.IO)
        if (isSocketReady()) {
          const otherUser = selectedPrivateChat.otherUser || selectedPrivateChat.participants?.find(p => p._id !== user._id);
          if (otherUser) {
            window.socketManager?.socket.emit('private-message-sent', {
              chatId: selectedPrivateChat.id,
              message: result.data,
              recipientId: otherUser._id,
              senderId: user._id
            });
            console.log('‚úÖ Private message socket notification sent');
          }
        } else {
          console.warn('‚ö†Ô∏è No socket available for real-time messaging');
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
        const otherUser = selectedPrivateChat.otherUser || selectedPrivateChat.participants?.find(p => p._id !== user._id);
        if (otherUser) {
          await updateRecipientChatList(selectedPrivateChat.id, result.data, user._id);
          
          // ‡∏™‡πà‡∏á API call ‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
          try {
            const updateResponse = await fetch(`${import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'}/api/messages/update-recipient-chat-list`, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${sessionStorage.getItem('token')}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                chatId: selectedPrivateChat.id,
                message: result.data,
                senderId: user._id,
                recipientId: otherUser._id
              })
            });
            
            if (updateResponse.ok) {
              console.log('‚úÖ Recipient chat list updated successfully');
            } else {
              console.error('‚ùå Failed to update recipient chat list');
            }
          } catch (error) {
            console.error('‚ùå Error updating recipient chat list:', error);
          }

          // ‡∏™‡πà‡∏á notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          if (isSocketReady()) {
            window.socketManager?.socket.emit('private-chat-notification', {
              senderId: user._id,
              recipientId: otherUser._id,
              message: result.data
            });
            console.log('‚úÖ Private chat notification sent');
          } else {
            console.warn('‚ö†Ô∏è No socket available for real-time messaging');
          }
        }
        
        const updatedMessage = {
          ...tempMessage,
          _id: result.data._id,
          isDelivered: true,
          isTemporary: false, // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß
          senderId: user._id || user.id, // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ senderId ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          sender: result.data.sender || {
            _id: user._id || user.id,
            username: (user as any).username,
            displayName: user.displayName || user.firstName
          }
        };
        
        setSelectedPrivateChat((prev: any) => ({
          ...prev,
          messages: prev.messages.map((msg: any) => 
            msg._id === tempMessage._id 
              ? updatedMessage
              : msg
          )
        }));
        
        setPrivateChats(prev => {
          const updatedChats = prev.map(chat => 
            chat.id === selectedPrivateChat.id 
              ? {
                  ...chat, 
                  messages: chat.messages.map((msg: any) => 
                    msg._id === tempMessage._id 
                      ? updatedMessage
                      : msg
                  ),
                  lastMessage: updatedMessage
                }
              : chat
          );
          saveChatsToStorage(updatedChats);
          return updatedChats;
        });
        
        console.log('‚úÖ Message updated with correct sender info:', updatedMessage);
      }
      
    } catch (error) {
      console.error('‚ùå Error sending message to backend:', error);
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ
      setSelectedPrivateChat((prev: any) => ({
        ...prev,
        messages: prev.messages.map((msg: any) => 
          msg._id === tempMessage._id 
            ? { ...msg, isDelivered: false, error: true }
            : msg
        )
      }));
    }
  };

  const handleCreatePrivateRoom = async (roomData: any) => {
    console.log('üè† Creating private room:', roomData);
    // Room creation logic - will be implemented with backend integration
    showWebappNotification('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
    
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    setChatView('list');
    setSelectedRoomId(null);
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° real-time listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö private chat messages
  useEffect(() => {
    const handlePrivateChatMessage = (event: CustomEvent) => {
      const { chatRoomId, message, messageType } = event.detail;
      console.log('üì® Global private chat message received:', { chatRoomId, message, messageType });
      console.log('üì® Current selectedPrivateChat:', selectedPrivateChat?.id);
      console.log('üì® Message chatRoomId:', chatRoomId);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å socket ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
      if (messageType === 'socket-message') {
        console.log('üì® Processing socket message for private chat');
        console.log('üì® Message details:', {
          id: message._id,
          content: message.content?.substring(0, 50),
          sender: message.sender?.displayName || message.sender?.username,
          chatRoom: chatRoomId,
          timestamp: message.createdAt
        });
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï private chats ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π
        if (selectedPrivateChat && selectedPrivateChat.id === chatRoomId) {
          console.log('üì® Updating current selected chat with socket message');
          console.log('üì® Previous messages count:', selectedPrivateChat.messages?.length);
          
          setSelectedPrivateChat((prev: any) => {
            if (!prev) {
              console.log('‚ö†Ô∏è No previous chat state');
              return prev;
            }
            
            const existingMessages = prev.messages || [];
            
            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (temporary message) ‡∏ó‡∏µ‡πà‡∏°‡∏µ content ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            const filteredMessages = existingMessages.filter((msg: any) => {
              if (msg.isTemporary && msg.content === message.content) {
                console.log('üóëÔ∏è Removing temporary message:', msg._id);
                return false;
              }
              return true;
            });
            
            // ‡πÄ‡∏ä‡πá‡∏Ñ duplicate ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å message ID
            const isDuplicate = filteredMessages.some((msg: any) => 
              msg._id === message._id
            );
            
            if (isDuplicate) {
              console.log('üì® Duplicate socket message detected (by ID), skipping');
              return prev;
            }
            
            console.log('‚úÖ Adding new socket message to chat');
            console.log('üì® New messages count:', filteredMessages.length + 1);
            
            const updatedChat = {
              ...prev,
              messages: [...filteredMessages, message],
              lastMessage: message
            };
            
            // Force re-render ‡πÇ‡∏î‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÉ‡∏´‡∏°‡πà
            return JSON.parse(JSON.stringify(updatedChat));
          });
        } else {
          console.log('‚è≠Ô∏è Message not for current chat or no chat selected');
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
        setPrivateChats(prev => prev.map(chat => 
          chat.id === chatRoomId 
            ? { ...chat, lastMessage: message }
            : chat
        ));
        
        return;
      }
      
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (HTTP API)
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï private chats ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π
      if (selectedPrivateChat && selectedPrivateChat.id === chatRoomId) {
        console.log('üì® Updating current selected chat with new message');
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï selectedPrivateChat ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô duplicate
        setSelectedPrivateChat((prev: any) => {
          const existingMessages = prev.messages || [];
          const isDuplicate = existingMessages.some((msg: any) => 
            msg._id === message._id || 
            (msg.content === message.content && msg.senderId === message.senderId)
          );
          
          if (isDuplicate) {
            console.log('üì® Duplicate message detected in custom event, skipping');
            return prev;
          }
          
          return {
            ...prev,
            messages: [...existingMessages, message],
            lastMessage: message
          };
        });
      } else {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï unread count ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        console.log('üì® Updating unread count for other chats');
        setPrivateChats(prev => prev.map(chat => 
          chat.id === chatRoomId 
            ? { ...chat, lastMessage: message, unreadCount: (chat.unreadCount || 0) + 1 }
            : chat
        ));
      }
    };

    const handleNewPrivateChat = (data: any) => {
      console.log('üÜï New private chat received:', data);
      console.log('üÜï Current user:', user);
      console.log('üÜï Current privateChats:', privateChats.length);
      const { chatRoomId, sender, message } = data;
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á chat object ‡πÉ‡∏´‡∏°‡πà
      const newChat = {
        id: chatRoomId,
        otherUser: {
          _id: sender._id,
          username: sender.username,
          displayName: sender.displayName,
          membershipTier: sender.membershipTier,
          profileImages: sender.profileImages,
          mainProfileImageIndex: sender.mainProfileImageIndex
        },
        lastMessage: message,
        unreadCount: 1,
        isNew: true
      };
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î)
      setPrivateChats(prev => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingChat = prev.find(chat => chat.id === chatRoomId);
        if (existingChat) {
          console.log('üì® Chat already exists, updating instead');
          return prev.map(chat => 
            chat.id === chatRoomId 
              ? { ...chat, lastMessage: message, unreadCount: (chat.unreadCount || 0) + 1 }
              : chat
          );
        }
        
        console.log('üÜï Adding new chat to list');
        return [newChat, ...prev];
      });
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
      if (showWebappNotification) {
        const existingChat = privateChats.find(chat => chat.id === chatRoomId);
        if (!existingChat) {
          showWebappNotification(`${sender.displayName} ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤`, 'success');
        }
      }
      
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
      setTimeout(() => {
        console.log('üîÑ Refreshing private chats list after new chat');
        fetchPrivateChats();
      }, 1000);
    };

    // ‡∏ü‡∏±‡∏á custom event ‡∏à‡∏≤‡∏Å PrivateChat component
    window.addEventListener('private-chat-message', handlePrivateChatMessage as EventListener);
    
    // ‡∏ü‡∏±‡∏á custom event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å PrivateChat component
    const handleNewPrivateChatFromComponent = (event: any) => {
      console.log('üÜï Received new-private-chat from PrivateChat component:', event.detail);
      handleNewPrivateChat(event.detail);
    };
    window.addEventListener('new-private-chat-received', handleNewPrivateChatFromComponent as EventListener);
    
    // ‡∏ü‡∏±‡∏á socket event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà
    const setupSocketListener = () => {
      const socket = socketManager.getSocket();
      if (socket) {
        console.log('üîå Setting up socket listeners on socket:', socket.id);
        socket.on('new-private-chat', handleNewPrivateChat);
        
        // ‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö private chat
        socket.on('new-message', (message) => {
          console.log('üì® New private message received:', message);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (selectedPrivateChat && message.chatRoom === selectedPrivateChat.id) {
            console.log('üì® Adding message to current private chat');
            setSelectedPrivateChat((prev: any) => ({
              ...prev,
              messages: [...(prev.messages || []), message]
            }));
          }
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
          setPrivateChats((prev: any[]) => 
            prev.map(chat => 
              chat.id === message.chatRoom 
                ? { ...chat, lastMessage: message }
                : chat
            )
          );
        });
        
        // ‡∏ü‡∏±‡∏á event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
        socket.on('refresh-private-chat-list', (data) => {
          console.log('üîÑ Received refresh-private-chat-list event:', data);
          const { recipientId, chatId, message, senderId } = data;
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (recipientId === user?._id) {
            console.log('üéØ This user is the recipient, refreshing chat list');
            
            // ‡∏™‡πà‡∏á custom event ‡πÑ‡∏õ‡∏¢‡∏±‡∏á PrivateChatList component
            window.dispatchEvent(new CustomEvent('refresh-private-chat-list', {
              detail: { recipientId, chatId, message, senderId }
            }));
            
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
            setTimeout(() => {
              fetchPrivateChats();
            }, 500);
          }
        });

        // ‡∏ü‡∏±‡∏á event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time notifications
        socket.on('newNotification', (notification) => {
          console.log('üîî Received new notification:', notification);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (notification.recipientId === user?._id) {
            console.log('üéØ This notification is for current user');
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï notifications state
            setNotifications(prev => [notification, ...prev]);
            setUnreadCount(prev => prev + 1);
            
            // ‡πÅ‡∏™‡∏î‡∏á webapp notification
            if (showWebappNotification) {
              showWebappNotification(notification.message, 'warning');
            }
            
            // ‡∏™‡πà‡∏á custom event ‡πÑ‡∏õ‡∏¢‡∏±‡∏á components ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            window.dispatchEvent(new CustomEvent('newNotification', {
              detail: notification
            }));
          }
        });
        
        return socket;
      }
      return null;
    };

    // ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ socket listener ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    let socket = setupSocketListener();
    
    // ‡∏ñ‡πâ‡∏≤ socket ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    if (!socket) {
      const retryTimeout = setTimeout(() => {
        socket = setupSocketListener();
      }, 1000);
      
      return () => {
        clearTimeout(retryTimeout);
        window.removeEventListener('private-chat-message', handlePrivateChatMessage as EventListener);
        window.removeEventListener('new-private-chat-received', handleNewPrivateChatFromComponent as EventListener);
        if (socket) {
          socket.off('new-private-chat', handleNewPrivateChat);
          socket.off('new-message');
        }
      };
    }
    
    return () => {
      window.removeEventListener('private-chat-message', handlePrivateChatMessage as EventListener);
      window.removeEventListener('new-private-chat-received', handleNewPrivateChatFromComponent as EventListener);
      if (socket) {
        socket.off('new-private-chat', handleNewPrivateChat);
        socket.off('new-message');
      }
    };
  }, [selectedPrivateChat, showWebappNotification]);

  // ‡∏ü‡∏±‡∏á event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î avatar ‡πÉ‡∏ô header
  useEffect(() => {
    const handler = () => {
      // Trigger a reload of avatar
      if (user?._id) {
        // reuse loader without duplicating code by toggling state
        (async () => {
          try {
            const base = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
            const userId = user._id || user.id;
            const res = await fetch(`${base}/api/profile/${userId}`, {
              headers: {
                'Content-Type': 'application/json',
                ...(sessionStorage.getItem('token') ? { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } : {})
              }
            })
            if (res.ok) {
              const data = await res.json()
              const mainImageIndex = data?.data?.profile?.mainProfileImageIndex || 0
              const img = data?.data?.profile?.profileImages?.[mainImageIndex]
              if (img && typeof img === 'string' && !img.startsWith('data:image/svg+xml')) {
                const avatarUrl = getProfileImageUrl(img, user?._id || user?.id)
                setAvatarUrl(avatarUrl)
                return
              }
            }
          } catch (_) {}
          setAvatarUrl(null)
        })()
      }
    }
    window.addEventListener('profile-avatar-updated', handler)
    return () => window.removeEventListener('profile-avatar-updated', handler)
  }, [user])

  // ‡∏ü‡∏±‡∏á event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå
  useEffect(() => {
    const handler = (event: any) => {
      const { profileId, isLiked } = event.detail;
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Discover
      setLikedProfiles(prev => {
        const newSet = new Set(prev);
        if (isLiked) {
          newSet.add(profileId);
        } else {
          newSet.delete(profileId);
        }
        return newSet;
      });

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Discover
      setAllUsers(prevUsers => {
        return prevUsers.map(user => {
          if (user._id === profileId) {
            // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å event ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏≠‡∏á
            return {
              ...user,
              likeCount: event.detail.likeCount
            };
          }
          return user;
        });
      });
    };
    
    window.addEventListener('like-status-changed', handler);
    return () => window.removeEventListener('like-status-changed', handler);
  }, []);
  
  const handleLoginSuccess = (data: any) => {
    console.log('üéâ Login Success:', data);
    // data includes { user, token }; pass through so token is preserved
    login(data)
    setIsAuthenticated(true)
    setShowLoginDialog(false)
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setTimeout(() => {
      fetchLikedUsers();
      fetchPrivateChats();
      if (activeTab === 'discover') {
        window.dispatchEvent(new CustomEvent('refreshUserData'));
      }
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Premium users
      window.dispatchEvent(new CustomEvent('refreshPremiumUsers'));
    }, 100);
    
    console.log('‚úÖ User authenticated and login dialog closed');
  }
  
  const handleLogout = () => {
    // Cleanup socket connection
    if (window.socketManager) {
      console.log('üîå Disconnecting socket manager...');
      window.socketManager.disconnect();
      window.socketManager = undefined;
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setLikedProfiles(new Set());
    setPrivateChats([]);
    setSelectedProfile(null);
    setShowProfileModal(false);
    setIsAuthenticated(false);
    
    // ‡∏•‡πâ‡∏≤‡∏á localStorage
    localStorage.removeItem('likedUsers');
    localStorage.removeItem('privateChats');
    
    logout()
  }
  
  const openProfileModal = (profile: FeaturedProfile, showDetails: boolean = false) => {
    console.log('üîç Opening profile modal:', { profile, showDetails });
    setSelectedProfile(profile)
    setActiveImageIndex(0)
    setShowProfileModalDebug(true)
    
    // If showDetails is explicitly requested (from profile button), always show profile details
    if (showDetails) {
      console.log('üìã Setting profile data for detailed view (forced):', profile);
      setProfileData(profile)
      setShowProfileDetails(true)
    } else if (profile.username || profile.firstName || profile.lastName || profile.email || 
        profile.phone || profile.education || profile.occupation || profile.height || 
        profile.weight || profile.relationshipStatus) {
      console.log('üìã Setting profile data for detailed view (auto):', profile);
      setProfileData(profile)
      setShowProfileDetails(true)
    } else {
      console.log('üìù Using basic profile view');
      setProfileData(null)
      setShowProfileDetails(false)
    }
  }
  
  // Payment flow handlers
  const handleNavigateToPayment = (plan: any) => {
    setSelectedPlan(plan)
    setCurrentView('payment')
  }
  
  const handlePaymentSuccess = async (transactionData: any) => {
    setTransactionData(transactionData)
    setCurrentView('success')

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô bypass mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö coin package ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏ß‡∏ï‡∏à‡∏£‡∏¥‡∏á‡πÜ
    if (transactionData.paymentMethod === 'bypass' && transactionData.tier === 'coin_package') {
      console.log('ü™ô Bypass mode - updating coins and vote points...')

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏ß‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÜ
      if (user && transactionData.plan?.rewards) {
        console.log('üîç Transaction data received:', JSON.stringify(transactionData, null, 2))
        console.log('üîç Transaction plan:', JSON.stringify(transactionData.plan, null, 2))
        console.log('üîç Transaction plan rewards:', JSON.stringify(transactionData.plan.rewards, null, 2))
        console.log('üë§ Current user before update:', JSON.stringify(user, null, 2))

        const coinsToAdd = transactionData.plan.rewards.totalCoins || transactionData.plan.rewards.coins || 0
        const votePointsToAdd = transactionData.plan.rewards.votePoints || 0

        console.log('ü™ô Coins to add:', coinsToAdd, 'Vote points to add:', votePointsToAdd)
        console.log('üë§ User before update - coins:', user.coins, 'votePoints:', user.votePoints)

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡πÉ‡∏´‡∏°‡πà
        const newCoins = (user.coins || 0) + coinsToAdd
        const newVotePoints = (user.votePoints || 0) + votePointsToAdd

        console.log('üìä New calculated values - coins:', newCoins, 'votePoints:', newVotePoints)

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô memory ‡πÅ‡∏•‡∏∞ localStorage
        const updatedUser = {
          ...user,
          coins: newCoins,
          votePoints: newVotePoints
        }

        console.log('üìä Final updated user - coins:', updatedUser.coins, 'votePoints:', updatedUser.votePoints)

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô localStorage
        localStorage.setItem('user', JSON.stringify(updatedUser))

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô AuthContext ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
        if (window.updateAuthContext) {
          console.log('üîÑ Updating AuthContext with:', updatedUser)
          window.updateAuthContext(updatedUser)
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô AuthContext
        setTimeout(() => {
          console.log('üîç Checking AuthContext user data after update:', window.authContextUser)
        }, 100)

        console.log(`‚úÖ Added ${coinsToAdd} coins and ${votePointsToAdd} vote points to user`)

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        const userDataString = JSON.stringify(updatedUser)
        localStorage.setItem('user', userDataString)
        console.log('üíæ Saved to localStorage:', userDataString)

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const savedUserString = localStorage.getItem('user')
        if (savedUserString) {
          const parsedUser = JSON.parse(savedUserString)
          console.log('üîç Verified saved user coins:', parsedUser.coins, 'votePoints:', parsedUser.votePoints)

          // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          console.log('‚úÖ Verification: Coins increased by', parsedUser.coins - (user.coins || 0))
          console.log('‚úÖ Verification: Vote points increased by', parsedUser.votePoints - (user.votePoints || 0))
        } else {
          console.error('‚ùå Failed to save user data to localStorage')
        }
      } else {
        console.error('‚ùå Missing user or plan rewards data')
        console.log('üë§ User:', user)
        console.log('üìã Transaction data:', transactionData)
      }

      return
    }

    // Call actual upgrade API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á
    try {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô coin package ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å payment confirmation API
      if (transactionData.tier === 'coin_package') {
        console.log('ü™ô Processing coin package payment confirmation...')
        console.log('üìã Transaction data:', transactionData)
        console.log('üë§ User data:', { id: user._id || user.id, coins: user.coins, votePoints: user.votePoints })

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠ rollback ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        const userBeforeUpgrade = { ...user }

        try {
          const confirmationResult = await paymentAPI.confirmPayment({
            transactionId: transactionData.transactionId,
            paymentReference: transactionData.transactionId,
            amount: transactionData.amount,
            bankId: 'rabbit_gateway',
            planId: transactionData.planId,
            planTier: transactionData.tier,
            userId: user._id || user.id
          })

          console.log('‚úÖ API Response:', confirmationResult)

          if (confirmationResult.success && confirmationResult.data.upgradeResult) {
            console.log('üéâ Coin package payment confirmed and coins/votes upgraded successfully')
            console.log(`üìä Upgrade result:`, confirmationResult.data.upgradeResult)

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ö‡∏ß‡∏Å‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            const currentUserData = JSON.parse(localStorage.getItem('user') || '{}')
            const currentCoins = currentUserData.coins || 0
            const currentVotePoints = currentUserData.votePoints || 0

            console.log('üîç Current localStorage data - coins:', currentCoins, 'votePoints:', currentVotePoints)
            console.log('üîç API upgrade result - coins:', confirmationResult.data.upgradeResult.totalCoins, 'votePoints:', confirmationResult.data.upgradeResult.totalVotePoints)

            // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏¢
            const finalCoins = Math.max(currentCoins, confirmationResult.data.upgradeResult.totalCoins)
            const finalVotePoints = Math.max(currentVotePoints, confirmationResult.data.upgradeResult.totalVotePoints)

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô frontend ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            const updatedUser = {
              ...user,
              coins: finalCoins,
              votePoints: finalVotePoints
            }

            console.log('üìä Final user data - coins:', updatedUser.coins, 'votePoints:', updatedUser.votePoints)

            localStorage.setItem('user', JSON.stringify(updatedUser))
            if (window.updateAuthContext) {
              window.updateAuthContext(updatedUser)
            }

            // ‡∏™‡πà‡∏á Socket.IO event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if (window.socketManager) {
              window.socketManager.emit('user-upgraded', {
                userId: user._id || user.id,
                tier: transactionData.tier,
                coinsAdded: confirmationResult.data.upgradeResult.coins,
                votePointsAdded: confirmationResult.data.upgradeResult.votePoints,
                transactionId: transactionData.transactionId
              })
            }

          } else {
            console.error('‚ùå Failed to upgrade coins/votes via API')
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á rollback ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô localStorage
          }
        } catch (apiError) {
          console.error('‚ùå API Error during coin package upgrade:', apiError)
          // Rollback: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô localStorage
          console.log('üîÑ Rolling back user data due to API error...')
          localStorage.setItem('user', JSON.stringify(userBeforeUpgrade))
          if (window.updateAuthContext) {
            window.updateAuthContext(userBeforeUpgrade)
          }
          throw new Error(`‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${apiError.message}`)
        }
      } else {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö membership upgrade ‡∏õ‡∏Å‡∏ï‡∏¥
        console.log('üëë Processing membership upgrade...')
        console.log('üìã Transaction data:', transactionData)

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠ rollback ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        const userBeforeUpgrade = { ...user }

        try {
          const upgradeResult = await membershipAPI.upgradeMembership({
            userId: user._id || user.id,
            tier: transactionData.tier,
            paymentMethod: transactionData.paymentMethod,
            transactionId: transactionData.transactionId,
            amount: transactionData.amount,
            currency: transactionData.currency
          })

          if (upgradeResult.success) {
            console.log('‚úÖ Membership upgraded successfully')

            // ‡∏™‡πà‡∏á Socket.IO event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if (window.socketManager) {
              window.socketManager.emit('user-upgraded', {
                userId: user._id || user.id,
                tier: transactionData.tier,
                membershipStartDate: upgradeResult.data.startDate,
                membershipEndDate: upgradeResult.data.endDate,
                transactionId: transactionData.transactionId
              })
            }
          } else {
            console.error('‚ùå Failed to upgrade membership via API')
            throw new Error('‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')
          }
        } catch (apiError) {
          console.error('‚ùå API Error during membership upgrade:', apiError)
          // Rollback: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô localStorage
          console.log('üîÑ Rolling back user membership data due to API error...')
          localStorage.setItem('user', JSON.stringify(userBeforeUpgrade))
          if (window.updateAuthContext) {
            window.updateAuthContext(userBeforeUpgrade)
          }
          throw new Error(`‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${apiError.message}`)
        }
      }
    } catch (error) {
      console.error('Error processing payment confirmation:', error)

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î
      if (error.message && error.message.includes('‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')) {
        // ‡πÅ‡∏™‡∏î‡∏á toast notification ‡∏´‡∏£‡∏∑‡∏≠ popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        console.log('‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');

        // ‡πÅ‡∏™‡∏î‡∏á toast notification ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        warning({
          title: '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚ö†Ô∏è',
          description: '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏≠‡∏≤‡∏à‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ'
        });
      }

      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ payment ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
      // ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á admin
    }
  }
  
  const handleBackToMain = () => {
    setCurrentView('main')
    setSelectedPlan(null)
    setTransactionData(null)
    handleTabChange('membership') // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà membership tab
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (Home)
  const handleGoToHome = () => {
    setCurrentView('main')
    setSelectedPlan(null)
    setTransactionData(null)
    handleTabChange('discover') // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà discover tab (‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
    setChatType('public')
    setChatView('list')
    setPrivateChatView('list')
    setSelectedRoomId(null)
    setSelectedPrivateChat(null)
  }
  
  // Set up global payment navigation
  useEffect(() => {
    ;(window as any).navigateToPayment = handleNavigateToPayment
    const handlePaymentEvent = (event: any) => {
      handleNavigateToPayment(event.detail.plan)
    }
    window.addEventListener('navigateToPayment', handlePaymentEvent)
    return () => {
      window.removeEventListener('navigateToPayment', handlePaymentEvent)
      delete (window as any).navigateToPayment
    }
  }, [])

  // Set up global profile modal function
  useEffect(() => {
    ;(window as any).openProfileModal = openProfileModal
    return () => {
      delete (window as any).openProfileModal
    }
  }, [openProfileModal])
  
  // Chat handlers
  const handleSelectRoom = (roomId: string) => {
    setSelectedRoomId(roomId)
    setChatView('chat')
  }
  
  const handleBackToRoomList = () => {
    setChatView('list')
    setSelectedRoomId(null)
  }
  

  
  // Show maintenance mode if active (always show if maintenance is on, regardless of dev access)
  // But allow bypass if user has bypassMaintenance flag
  if (maintenanceChecked && isMaintenanceMode && !bypassMaintenance) {
    return <MaintenanceMode onDevAccess={handleDevAccess} hasDevAccess={hasDevAccess} />
  }

  // Show loading while checking maintenance mode
  if (!maintenanceChecked) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-white">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-pink-500 mx-auto mb-4"></div>
          <h1 className="text-xl font-bold text-slate-800">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö...</h1>
        </div>
      </div>
    )
  }

  // Render different views based on current state
  if (currentView === 'payment' && selectedPlan) {
    return (
      <Suspense fallback={<div className="min-h-screen flex items-center justify-center"><LoadingSpinner size="h-32 w-32" /></div>}>
        <PaymentWithAnimation
          plan={selectedPlan}
          onBack={handleBackToMain}
          onSuccess={handlePaymentSuccess}
          onCancel={handleBackToMain}
        />
      </Suspense>
    )
  }
  
  if (currentView === 'success' && transactionData && selectedPlan) {
    return (
      <Suspense fallback={<div className="min-h-screen flex items-center justify-center"><LoadingSpinner size="h-32 w-32" /></div>}>
        <PaymentSuccess
          transactionData={transactionData}
          plan={selectedPlan}
          onContinue={handleBackToMain}
        />
      </Suspense>
    )
  }
  
  return (
    <div className="min-h-screen relative overflow-hidden pt-12 sm:pt-16 pb-16 sm:pb-20">
      {/* Mobile-Optimized Background */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-10 left-4 w-48 h-48 sm:top-20 sm:left-10 sm:w-96 sm:h-96 bg-gradient-to-br from-pink-300/20 to-violet-300/20 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute top-40 right-8 w-40 h-40 sm:top-60 sm:right-20 sm:w-80 sm:h-80 bg-gradient-to-br from-blue-300/15 to-cyan-300/15 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute bottom-20 left-1/4 w-36 h-36 sm:bottom-32 sm:left-1/4 sm:w-72 sm:h-72 bg-gradient-to-br from-orange-300/20 to-pink-300/20 rounded-full blur-3xl animate-pulse delay-2000"></div>
        <div className="absolute bottom-40 right-1/3 w-32 h-32 sm:bottom-60 sm:right-1/3 sm:w-64 sm:h-64 bg-gradient-to-br from-purple-300/25 to-indigo-300/25 rounded-full blur-3xl animate-pulse delay-3000"></div>
      </div>
      {/* Mobile-Optimized Floating Elements */}
      <div className="absolute inset-0 pointer-events-none overflow-hidden">
        <div className="absolute top-1/4 left-1/4 text-2xl sm:text-4xl opacity-20 animate-float">‚ú®</div>
        <div className="absolute top-1/3 right-1/4 text-3xl sm:text-5xl opacity-15 animate-float delay-1000">üí´</div>
        <div className="absolute bottom-1/3 left-1/3 text-4xl sm:text-6xl opacity-10 animate-float delay-2000">üåü</div>
        <div className="absolute bottom-1/4 right-1/3 text-2xl sm:text-3xl opacity-25 animate-float delay-3000">üíñ</div>
        <div className="absolute top-1/2 left-1/6 text-2xl sm:text-4xl opacity-20 animate-float delay-4000">üéâ</div>
        <div className="absolute top-3/4 right-1/6 text-3xl sm:text-5xl opacity-15 animate-float delay-5000">üåà</div>
      </div>
      
      {/* Mobile-First Header */}
      <header className="fixed top-0 left-0 right-0 z-50 bg-white/95 backdrop-blur-md border-b border-gray-200/50 shadow-lg">
        <div className="px-3 sm:px-4 lg:px-8">
          <div className="flex justify-between items-center h-12 sm:h-16">
            {/* Logo - Mobile Optimized */}
            <button 
              onClick={handleGoToHome}
              className="flex items-center space-x-2 sm:space-x-3 hover:opacity-80 transition-opacity cursor-pointer"
            >
              <div className="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-pink-500 via-rose-500 to-violet-500 rounded-xl sm:rounded-2xl flex items-center justify-center shadow-lg heart-beat">
                <Heart className="h-4 w-4 sm:h-6 sm:w-6 text-white" fill="white" />
              </div>
              <div className="hidden sm:block">
                <span className="text-xl sm:text-2xl font-bold gradient-text">sodeclick</span>
                <div className="text-xs text-gray-600 -mt-1">Find Your Love ‚ú®</div>
              </div>
              <div className="sm:hidden">
                <span className="text-lg font-bold gradient-text">sodeclick</span>
              </div>
            </button>
            
            {/* Mobile User Actions */}
            <div className="flex items-center space-x-2 sm:space-x-4">
              {!isAuthenticated ? (
                <>
                  {/* Mobile Login Button */}
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => setShowLoginDialog(true)}
                    className="md:hidden border-pink-300 text-pink-600 hover:bg-pink-50 hover:border-pink-400 transition-colors"
                  >
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                  </Button>
                  
                  {/* Desktop Login Button */}
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => {
                      console.log('üñ•Ô∏è Desktop Login Button Clicked');
                      setShowLoginDialog(true);
                    }}
                    className="hidden md:flex border-pink-300 text-pink-600 hover:bg-pink-50 hover:border-pink-400 transition-colors"
                  >
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                  </Button>
                </>
              ) : (
                <div className="flex items-center space-x-2 sm:space-x-4">
                  {/* Desktop: Show full user info */}
                  <div className="hidden sm:flex items-center space-x-1 sm:space-x-2">
                    <Avatar className="h-6 w-6 sm:h-8 sm:w-8">
                      <AvatarImage src={avatarUrl || undefined} alt="profile" />
                      <AvatarFallback className="text-xs sm:text-sm">{user?.firstName?.[0] || user?.username?.[0] || 'U'}</AvatarFallback>
                    </Avatar>
                    <span className="text-sm font-medium text-gray-700">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {user?.displayName || user?.firstName}</span>
                  </div>
                  
                  {/* Mobile: Show profile icon with user info and dropdown */}
                  <div className="sm:hidden relative profile-dropdown-container">
                    <Button 
                      variant="ghost" 
                      className="flex items-center space-x-2 px-2 py-1 rounded-lg hover:bg-gray-50"
                      onClick={() => setShowProfileDropdown(!showProfileDropdown)}
                    >
                      <Avatar className="h-8 w-8">
                        <AvatarImage src={avatarUrl || undefined} alt="profile" />
                        <AvatarFallback className="text-xs">{user?.firstName?.[0] || user?.username?.[0] || 'U'}</AvatarFallback>
                      </Avatar>
                      <span className="text-sm font-medium text-gray-900">{user?.firstName}</span>
                    </Button>
                    
                    {/* Dropdown Menu */}
                    {showProfileDropdown && (
                      <div className="absolute right-0 top-10 bg-white border border-gray-200 rounded-lg shadow-lg py-2 min-w-[160px] z-50">
                        <div className="px-3 py-2 border-b border-gray-100">
                          <p className="text-sm font-medium text-gray-900">{user?.displayName || user?.firstName}</p>
                          <p className="text-xs text-gray-500">{user?.email}</p>
                        </div>
                        
                        {(user?.role === 'admin' || user?.role === 'superadmin') && (
                          <button
                            onClick={() => {
                              window.location.href = '/admin'
                              setShowProfileDropdown(false)
                            }}
                            className="w-full px-3 py-2 text-left text-sm text-blue-600 hover:bg-blue-50 flex items-center"
                          >
                            <Settings className="h-4 w-4 mr-2" />
                            Admin
                          </button>
                        )}
                        
                        <button
                          onClick={() => {
                            handleLogout()
                            setShowProfileDropdown(false)
                          }}
                          className="w-full px-3 py-2 text-left text-sm text-red-600 hover:bg-red-50 flex items-center"
                        >
                          <LogIn className="h-4 w-4 mr-2" />
                          ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                        </button>
                      </div>
                    )}
                  </div>
                  
                  {/* Desktop: Show admin and logout buttons */}
                  <div className="flex items-center space-x-2">
                    {/* Desktop Notification Bell Button */}
                    <div className="relative notification-dropdown-container">
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => setShowNotificationDropdown(!showNotificationDropdown)}
                        className="relative p-2 hover:bg-gray-50 transition-colors"
                      >
                        <FontAwesomeIcon 
                          icon={faBell} 
                          className="h-4 w-4 sm:h-5 sm:w-5 text-gray-600 hover:text-pink-600 transition-colors" 
                        />
                        {/* Notification Badge - Show only when there are unread notifications */}
                        {unreadCount > 0 && (
                          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold">
                            {unreadCount}
                          </span>
                        )}
                      </Button>
                      
                      {/* Desktop Notification Dropdown */}
                      {showNotificationDropdown && (
                        <div className="absolute right-0 top-10 bg-white border border-gray-200 rounded-lg shadow-lg py-2 min-w-[280px] sm:min-w-[320px] z-50 max-h-96 overflow-y-auto">
                          <div className="px-4 py-2 border-b border-gray-100">
                            <h3 className="text-sm font-semibold text-gray-900">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
                          </div>
                          
                          {/* Real-time Notifications */}
                          {isLoadingNotifications ? (
                            <div className="px-4 py-8 text-center">
                              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-pink-600 mx-auto"></div>
                              <p className="text-xs text-gray-500 mt-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
                            </div>
                          ) : notifications.length > 0 ? (
                            notifications.map(renderNotificationItem)
                          ) : (
                            <div className="px-4 py-8 text-center">
                              <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-2">
                                <FontAwesomeIcon icon={faBell} className="h-6 w-6 text-gray-400" />
                              </div>
                              <p className="text-sm text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</p>
                            </div>
                          )}
                          
                          {notifications.length > 0 && (
                            <div className="px-4 py-2 border-t border-gray-100 flex gap-2">
                              <button 
                                onClick={fetchNotifications}
                                className="flex-1 text-center text-sm text-pink-600 hover:text-pink-700 font-medium"
                              >
                                ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
                              </button>
                              <button 
                                onClick={clearAllNotifications}
                                className="flex-1 text-center text-sm text-red-600 hover:text-red-700 font-medium"
                              >
                                ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                              </button>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                    
                    {(user?.role === 'admin' || user?.role === 'superadmin') && (
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => window.location.href = '/admin'}
                        className="hidden sm:flex text-blue-600 border-blue-200 hover:bg-blue-50 hover:border-blue-300 transition-colors"
                      >
                        <Settings className="h-4 w-4 mr-1" />
                        Admin
                      </Button>
                    )}
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={handleLogout} 
                      className="hidden sm:flex border-pink-200 text-pink-600 hover:bg-pink-50 hover:border-pink-300 transition-colors"
                    >
                      ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                    </Button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </header>
      {/* Mobile-First App Interface */}
      <section className="px-1 sm:px-4 lg:px-8 py-1 sm:py-16 md:py-20 relative z-10 pb-10 sm:pb-24">
        <div className="modern-card rounded-xl sm:rounded-3xl shadow-2xl overflow-hidden">
          <Tabs defaultValue="discover" value={activeTab} onValueChange={handleTabChange}>
            {/* Discover Tab - Mobile First */}
            <TabsContent value="discover" className="p-1 sm:p-6 lg:p-8">
              {/* Mobile-First Hero Section - Only for Discover Tab */}
              <section className="py-8 sm:py-12 md:py-16 lg:py-24">
                <div className="px-3 sm:px-4 lg:px-8">
                  <div className="grid lg:grid-cols-2 gap-8 sm:gap-12 items-center">
                    <div className="space-y-6 sm:space-y-8">
                      <div className="inline-flex items-center px-4 py-2 sm:px-6 sm:py-3 rounded-full glass-effect border border-white/30 text-pink-600 text-xs sm:text-sm font-semibold shadow-lg">
                        <Sparkles className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                        <span>Thailand's #1 Dating Platform üáπüá≠</span>
                      </div>
                      <div>
                        <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold leading-tight mb-4 sm:mb-6 md:mb-8 gradient-text">
                          Find Your<br />
                          Perfect Match ‚ú®
                        </h1>
                        <p className="text-base sm:text-lg md:text-xl text-gray-600 mb-6 sm:mb-8 md:mb-10 leading-relaxed max-w-lg">
                          Join thousands of verified singles creating meaningful connections. Your love story starts here.
                        </p>
                      </div>
                      <div className="flex flex-col sm:flex-row gap-4 sm:gap-6">
                        <Button 
                          size="lg" 
                          onClick={() => handleTabChange('discover')}
                          className="modern-button text-sm sm:text-base md:text-lg px-6 py-4 sm:px-8 sm:py-5 md:px-10 md:py-6 rounded-xl sm:rounded-2xl font-bold shadow-2xl hover:shadow-pink-300/50 hover:scale-105 transform transition-all duration-300"
                        >
                          <Heart className="h-4 w-4 sm:h-5 sm:w-5 md:h-6 md:w-6 mr-2 sm:mr-3" fill="white" />
                          Start Dating Now
                        </Button>
                        <Button 
                          variant="outline" 
                          size="lg"
                          onClick={handleLearnMoreClick}
                          className="border-2 border-pink-300/50 text-pink-600 hover:bg-pink-50/80 px-6 py-4 sm:px-8 sm:py-5 md:px-10 md:py-6 rounded-xl sm:rounded-2xl font-semibold text-sm sm:text-base md:text-lg transition-all duration-300 hover:scale-105 glass-effect"
                        >
                          <MessageCircle className="h-4 w-4 sm:h-5 sm:w-5 md:h-6 md:w-6 mr-2 sm:mr-3" />
                          Learn More
                        </Button>
                      </div>
                    </div>
                    {/* Top Voted Users Carousel */}
                    <div className="relative flex justify-center lg:justify-end items-center">
                      <div className="w-full max-w-xs">
                        <Suspense fallback={
                          <div className="w-full max-w-xs mx-auto h-[500px] bg-gradient-to-br from-pink-100 to-purple-100 rounded-3xl flex items-center justify-center">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-pink-500"></div>
                          </div>
                        }>
                          <ErrorBoundary>
                            <TopVotedCarousel />
                          </ErrorBoundary>
                        </Suspense>
                      </div>
                    </div>
                  </div>
                </div>
              </section>
              
              {/* Mobile-First Advanced Filters Section */}
              <div className="mb-3 sm:mb-8 modern-card rounded-xl sm:rounded-3xl shadow-2xl border border-white/30 overflow-hidden backdrop-blur-lg">
                {/* Mobile-First Filter Header */}
                <div className="bg-gradient-to-br from-pink-50/90 via-violet-50/90 to-blue-50/90 backdrop-blur-xl p-2 sm:p-6 lg:p-8 border-b border-white/30">
                  <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
                    <div className="flex items-center gap-3 sm:gap-4">
                      <div className="relative">
                        <div className="w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14 bg-gradient-to-br from-pink-500 via-rose-500 to-violet-600 rounded-xl sm:rounded-2xl flex items-center justify-center shadow-xl transform rotate-3 hover:rotate-6 transition-all duration-300">
                          <Filter className="h-5 w-5 sm:h-6 sm:w-6 lg:h-7 lg:w-7 text-white" />
                        </div>
                        <div className="absolute -top-1 -right-1 w-3 h-3 sm:w-4 sm:h-4 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full animate-pulse"></div>
                      </div>
                      <div>
                        <h3 className="text-lg sm:text-xl lg:text-2xl font-bold bg-gradient-to-r from-pink-600 via-rose-600 to-violet-600 bg-clip-text text-transparent">
                          ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‚ú®
                        </h3>
                        <p className="text-sm sm:text-base text-gray-600 mt-1 font-medium">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÅ‡∏ó‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÉ‡∏à üíï</p>
                      </div>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setFiltersOpen(v => !v)}
                      className="flex items-center gap-2 sm:gap-3 hover:bg-white/60 transition-all duration-300 rounded-xl sm:rounded-2xl px-4 sm:px-6 lg:px-8 py-2 sm:py-3 lg:py-4 text-gray-700 font-semibold border-2 border-transparent hover:border-pink-200 shadow-lg hover:shadow-xl transform hover:scale-105 text-sm sm:text-base lg:text-lg"
                    >
                      <span>{filtersOpen ? 'üîº ‡∏ã‡πà‡∏≠‡∏ô' : 'üîΩ ‡πÄ‡∏õ‡∏¥‡∏î'}</span>
                      <ChevronRight className={`h-4 w-4 sm:h-5 sm:w-5 lg:h-6 lg:w-6 transition-all duration-500 ${filtersOpen ? 'rotate-90 text-pink-600' : 'text-gray-500'}`} />
                    </Button>
                  </div>
                </div>
                {filtersOpen && (
                  <div className="p-4 sm:p-6 lg:p-8 bg-gradient-to-br from-white/95 to-slate-50/95 backdrop-blur-sm border-t border-white/50">
                    <div className="space-y-6 sm:space-y-8 lg:space-y-10">
                      {/* Mobile-First Basic Filters */}
                      <div className="relative">
                        <div className="absolute -left-2 sm:-left-4 top-0 w-1 h-full bg-gradient-to-b from-pink-500 to-violet-500 rounded-full"></div>
                        <h4 className="text-lg sm:text-xl font-bold text-gray-800 mb-4 sm:mb-6 flex items-center gap-2 sm:gap-3 pl-3 sm:pl-4">
                          <div className="w-6 h-6 sm:w-8 sm:h-8 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg sm:rounded-xl flex items-center justify-center">
                            <User className="h-3 w-3 sm:h-4 sm:w-4 lg:h-5 lg:w-5 text-white" />
                          </div>
                          <span className="text-sm sm:text-base lg:text-lg">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</span>
                        </h4>
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8 pl-3 sm:pl-4">
                          <div className="space-y-2 sm:space-y-3">
                            <label className="text-xs sm:text-sm font-bold text-gray-700 flex items-center gap-1 sm:gap-2">
                              <span className="text-pink-500 text-sm sm:text-lg">üë•</span>
                              <span>‡πÄ‡∏û‡∏®</span>
                            </label>
                            <select
                              value={filters.gender}
                              onChange={e => setFilters(f => ({...f, gender: e.target.value}))}
                              className="w-full p-3 sm:p-4 border-2 border-gray-200 rounded-xl sm:rounded-2xl bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-pink-500/20 focus:border-pink-500 transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 font-medium text-sm sm:text-base"
                            >
                              <option value="">‚ú® ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                              <option value="male">üë® ‡∏ä‡∏≤‡∏¢</option>
                              <option value="female">üë© ‡∏´‡∏ç‡∏¥‡∏á</option>
                              <option value="other">üåà ‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                            </select>
                          </div>
                          <div className="space-y-2 sm:space-y-3">
                            <label className="text-xs sm:text-sm font-bold text-gray-700 flex items-center gap-1 sm:gap-2">
                              <span className="text-violet-500 text-sm sm:text-lg">üîç</span>
                              <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤</span>
                            </label>
                            <select
                              value={filters.lookingFor}
                              onChange={e => setFilters(f => ({...f, lookingFor: e.target.value}))}
                              className="w-full p-3 sm:p-4 border-2 border-gray-200 rounded-xl sm:rounded-2xl bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-violet-500/20 focus:border-violet-500 transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 font-medium text-sm sm:text-base"
                            >
                              <option value="">‚ú® ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                              <option value="male">üë® ‡∏ä‡∏≤‡∏¢</option>
                              <option value="female">üë© ‡∏´‡∏ç‡∏¥‡∏á</option>
                              <option value="both">üíï ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà</option>
                            </select>
                          </div>
                          <div className="space-y-2 sm:space-y-3">
                            <label className="text-xs sm:text-sm font-bold text-gray-700 flex items-center gap-1 sm:gap-2">
                              <span className="text-green-500 text-sm sm:text-lg">üìç</span>
                              <span>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</span>
                            </label>
                            <select
                              value={filters.province}
                              onChange={e => setFilters(f => ({...f, province: e.target.value}))}
                              className="w-full p-3 sm:p-4 border-2 border-gray-200 rounded-xl sm:rounded-2xl bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-green-500/20 focus:border-green-500 transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 font-medium text-sm sm:text-base"
                            >
                              <option value="">üó∫Ô∏è ‡∏ó‡∏∏‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</option>
                              {[
                                '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà','‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£','‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ','‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå','‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£','‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô','‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ','‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤','‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ','‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó','‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥','‡∏ä‡∏∏‡∏°‡∏û‡∏£','‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢','‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà','‡∏ï‡∏£‡∏±‡∏á','‡∏ï‡∏£‡∏≤‡∏î','‡∏ï‡∏≤‡∏Å','‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å','‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°','‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°','‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤','‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä','‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå','‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ','‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™','‡∏ô‡πà‡∏≤‡∏ô','‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨','‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå','‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ','‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå','‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ','‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ','‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤','‡∏û‡∏∞‡πÄ‡∏¢‡∏≤','‡∏û‡∏±‡∏á‡∏á‡∏≤','‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á','‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£','‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å','‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ','‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå','‡πÅ‡∏û‡∏£‡πà','‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï','‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°','‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£','‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô','‡∏¢‡πÇ‡∏™‡∏ò‡∏£','‡∏¢‡∏∞‡∏•‡∏≤','‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î','‡∏£‡∏∞‡∏ô‡∏≠‡∏á','‡∏£‡∏∞‡∏¢‡∏≠‡∏á','‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ','‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ','‡∏•‡∏≥‡∏õ‡∏≤‡∏á','‡∏•‡∏≥‡∏û‡∏π‡∏ô','‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©','‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£','‡∏™‡∏á‡∏Ç‡∏•‡∏≤','‡∏™‡∏ï‡∏π‡∏•','‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£','‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°','‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£','‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß','‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ','‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ','‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢','‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ','‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ','‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå','‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢','‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π','‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á','‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç','‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ','‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå','‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ','‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ'
                              ].sort((a,b)=>a.localeCompare(b,'th')).map(p => (
                                <option key={p} value={p}>üìç {p}</option>
                              ))}
                            </select>
                          </div>
                        </div>
                      </div>

                      {/* Age Range */}
                      <div className="relative">
                        <div className="absolute -left-4 top-0 w-1 h-full bg-gradient-to-b from-orange-500 to-red-500 rounded-full"></div>
                        <h4 className="text-xl font-bold text-gray-800 mb-6 flex items-center gap-3 pl-4">
                          <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center">
                            <Calendar className="h-5 w-5 text-white" />
                          </div>
                          ‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏
                        </h4>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-8 pl-4">
                          <div className="space-y-3">
                            <label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                              <span className="text-orange-500 text-lg">üéÇ</span>
                              ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
                            </label>
                            <input
                              type="number"
                              min={18}
                              max={100}
                              value={filters.ageMin}
                              onChange={e => setFilters(f => ({...f, ageMin: Number(e.target.value)}))}
                              className="w-full p-4 border-2 border-gray-200 rounded-2xl bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-orange-500/20 focus:border-orange-500 transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 font-medium"
                              placeholder="18 ‡∏õ‡∏µ"
                            />
                          </div>
                          <div className="space-y-3">
                            <label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                              <span className="text-red-500 text-lg">üéâ</span>
                              ‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î
                            </label>
                            <input
                              type="number"
                              min={18}
                              max={100}
                              value={filters.ageMax}
                              onChange={e => setFilters(f => ({...f, ageMax: Number(e.target.value)}))}
                              className="w-full p-4 border-2 border-gray-200 rounded-2xl bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-red-500/20 focus:border-red-500 transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 font-medium"
                              placeholder="100 ‡∏õ‡∏µ"
                            />
                          </div>
                        </div>
                      </div>

                      {/* Relationship & Distance */}
                      <div className="relative">
                        <div className="absolute -left-4 top-0 w-1 h-full bg-gradient-to-b from-pink-500 to-purple-500 rounded-full"></div>
                        <h4 className="text-xl font-bold text-gray-800 mb-6 flex items-center gap-3 pl-4">
                          <div className="w-8 h-8 bg-gradient-to-r from-pink-500 to-purple-500 rounded-xl flex items-center justify-center">
                            <Heart className="h-5 w-5 text-white" />
                          </div>
                          ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå & ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
                        </h4>
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 pl-4">
                          <div className="space-y-3">
                            <label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                              <span className="text-pink-500 text-lg">üíï</span>
                              ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                            </label>
                            <select
                              value={filters.relationship}
                              onChange={e => setFilters(f => ({...f, relationship: e.target.value}))}
                              className="w-full p-4 border-2 border-gray-200 rounded-2xl bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-pink-500/20 focus:border-pink-500 transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 font-medium"
                            >
                              <option value="">üí´ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå</option>
                              <option value="fwd">üéØ FWD</option>
                              <option value="overnight">üåô ‡∏Ñ‡πâ‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô</option>
                              <option value="temporary">‚è∞ ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß</option>
                              <option value="other">‚ú® ‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                            </select>
                          </div>
                          {filters.relationship === 'other' && (
                            <div className="space-y-3">
                              <label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                                <span className="text-purple-500 text-lg">üí≠</span>
                                ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                              </label>
                              <input
                                value={filters.otherRelationship || ''}
                                onChange={e => setFilters(f => ({...f, otherRelationship: e.target.value}))}
                                className="w-full p-4 border-2 border-gray-200 rounded-2xl bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-purple-500/20 focus:border-purple-500 transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 font-medium"
                                placeholder="üí¨ ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£..."
                              />
                            </div>
                          )}
                          <div className="space-y-3">
                            <label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                              <span className="text-blue-500 text-lg">üìè</span>
                              ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£)
                            </label>
                            <input
                              type="number"
                              value={filters.distanceKm}
                              onChange={e => setFilters(f => ({...f, distanceKm: e.target.value}))}
                              className="w-full p-4 border-2 border-gray-200 rounded-2xl bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 font-medium"
                              placeholder="üéØ ‡πÄ‡∏ä‡πà‡∏ô 50 ‡∏Å‡∏°."
                            />
                          </div>
                        </div>
                      </div>

                      {/* Location Coordinates */}
                      <div className="relative">
                        <div className="absolute -left-4 top-0 w-1 h-full bg-gradient-to-b from-cyan-500 to-teal-500 rounded-full"></div>
                        <h4 className="text-xl font-bold text-gray-800 mb-6 flex items-center gap-3 pl-4">
                          <div className="w-8 h-8 bg-gradient-to-r from-cyan-500 to-teal-500 rounded-xl flex items-center justify-center">
                            <MapPin className="h-5 w-5 text-white" />
                          </div>
                          ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                        </h4>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-8 pl-4">
                          <div className="space-y-3">
                            <label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                              <span className="text-cyan-500 text-lg">üåê</span>
                              ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (Latitude)
                            </label>
                            <input
                              value={filters.lat}
                              onChange={e => setFilters(f => ({...f, lat: e.target.value}))}
                              className="w-full p-4 border-2 border-gray-200 rounded-2xl bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 font-medium"
                              placeholder="üó∫Ô∏è ‡πÄ‡∏ä‡πà‡∏ô 13.7563"
                            />
                          </div>
                          <div className="space-y-3">
                            <label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                              <span className="text-teal-500 text-lg">üó∫Ô∏è</span>
                              ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (Longitude)
                            </label>
                            <input
                              value={filters.lng}
                              onChange={e => setFilters(f => ({...f, lng: e.target.value}))}
                              className="w-full p-4 border-2 border-gray-200 rounded-2xl bg-white/90 backdrop-blur-sm focus:ring-4 focus:ring-teal-500/20 focus:border-teal-500 transition-all duration-300 shadow-lg hover:shadow-xl text-gray-700 font-medium"
                              placeholder="üìç ‡πÄ‡∏ä‡πà‡∏ô 100.5018"
                            />
                          </div>
                        </div>
                      </div>

                      {/* Action Buttons */}
                      <div className="flex flex-wrap gap-6 justify-center pt-8 border-t-2 border-gradient-to-r from-pink-200 to-violet-200">
                        <Button
                          onClick={async () => {
                            // Show loading state
                            setIsLoadingAllUsers(true)
                            
                            const base = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
                            const params = new URLSearchParams()
                            
                            // Add filters to params
                            if (filters.gender) params.set('gender', filters.gender)
                            if (filters.lookingFor) params.set('lookingFor', filters.lookingFor)
                            if (filters.province) params.set('province', filters.province)
                            if (filters.ageMin && filters.ageMin > 0) params.set('ageMin', String(filters.ageMin))
                            if (filters.ageMax && filters.ageMax > 0) params.set('ageMax', String(filters.ageMax))
                            
                            // Handle relationship filter
                            if (filters.relationship) {
                              if (filters.relationship === 'other' && filters.otherRelationship) {
                                params.set('relationship', filters.otherRelationship)
                              } else {
                                params.set('relationship', filters.relationship)
                              }
                            }
                            
                            // Handle distance filter
                            if (filters.distanceKm && filters.lat && filters.lng) {
                              params.set('distanceKm', String(filters.distanceKm))
                              params.set('lat', String(filters.lat))
                              params.set('lng', String(filters.lng))
                            }
                            
                            params.set('page', '1')
                            params.set('limit', '50') // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                            
                            try {
                              console.log('üîç Searching with filters:', Object.fromEntries(params))
                              
                              const res = await fetch(`${base}/api/profile/search?${params.toString()}`, {
                                headers: { 
                                  'Content-Type': 'application/json', 
                                  ...(sessionStorage.getItem('token') ? { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } : {}) 
                                }
                              })
                              
                              if (!res.ok) {
                                throw new Error(`HTTP error! status: ${res.status}`)
                              }
                              
                              const data = await res.json()
                              console.log('üìä Search results:', data)
                              console.log('üìä Like counts from Discover search:', data?.data?.users?.map((u: any) => ({ id: u._id, likeCount: u.likeCount })));
                              
                              if (data.success) {
                                const users: PublicUser[] = data?.data?.users || []
                                console.log(`‚úÖ Found ${users.length} users`)
                                
                                setAllUsers(users)
                                setCurrentPage(1)
                                
                                // Filter for allowed tiers
                                const allowed = ['member','silver','gold','vip','vip1','vip2']
                                const allowedUsers = users.filter(u => allowed.includes((u?.membership?.tier || 'member') as string))
                                const allowedLen = allowedUsers.length
                                
                                setVisibleCount(allowedLen)
                                setHasMoreUsers(allowedLen > 8)
                                
                                // Show success message
                                if (allowedLen > 0) {
                                  alert(`‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${allowedLen} ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!`)
                                } else {
                                  alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà')
                                }
                              } else {
                                console.error('‚ùå Search failed:', data.message)
                                alert(`‚ùå ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${data.message}`)
                              }
                            } catch (error: any) {
                              console.error('‚ùå Search error:', error)
                              alert(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ${error.message}`)
                            } finally {
                              setIsLoadingAllUsers(false)
                            }
                          }}
                          className={`flex items-center gap-4 px-10 py-4 rounded-2xl bg-gradient-to-r from-pink-500 via-rose-500 to-violet-600 text-white hover:from-pink-600 hover:via-rose-600 hover:to-violet-700 transition-all duration-300 shadow-2xl hover:shadow-pink-500/50 font-bold text-lg transform hover:scale-110 hover:-translate-y-1 ${isLoadingAllUsers ? 'opacity-75 cursor-not-allowed' : ''}`}
                          disabled={isLoadingAllUsers}
                        >
                          {isLoadingAllUsers ? (
                            <>
                              <RefreshCw className="h-6 w-6 animate-spin" />
                              üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...
                            </>
                          ) : (
                            <>
                              <Search className="h-6 w-6" />
                              üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                            </>
                          )}
                        </Button>
                        <Button
                          variant="outline"
                          onClick={async () => {
                            // Reset filters
                            setFilters({ 
                              gender: '', 
                              ageMin: 18, 
                              ageMax: 100, 
                              province: '', 
                              lookingFor: '', 
                              relationship: '', 
                              otherRelationship: '', 
                              distanceKm: '', 
                              lat: '', 
                              lng: '' 
                            })
                            
                            // Show loading state
                            setIsLoadingAllUsers(true)
                            
                            const base = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
                            
                            try {
                              console.log('üîÑ Resetting filters and reloading users...')
                              
                              const res = await fetch(`${base}/api/profile/all?limit=50&page=1`, {
                                headers: { 
                                  'Content-Type': 'application/json', 
                                  ...(sessionStorage.getItem('token') ? { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } : {}) 
                                }
                              })
                              
                              if (!res.ok) {
                                throw new Error(`HTTP error! status: ${res.status}`)
                              }
                              
                              const data = await res.json()
                              console.log('üìä Reset results:', data)
                              console.log('üìä Like counts from Discover API:', data?.data?.users?.map((u: any) => ({ id: u._id, likeCount: u.likeCount })));
                              
                              if (data.success) {
                                const users: PublicUser[] = data?.data?.users || []
                                console.log(`‚úÖ Reset: Found ${users.length} users`)
                                
                                setAllUsers(users)
                                setCurrentPage(1)
                                
                                // Filter for allowed tiers
                                const allowed = ['member','silver','gold','vip','vip1','vip2']
                                const allowedUsers = users.filter(u => allowed.includes((u?.membership?.tier || 'member') as string))
                                const allowedLen = allowedUsers.length
                                
                                setVisibleCount(allowedLen)
                                setHasMoreUsers(allowedLen > 8)
                                
                                alert(`‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${allowedLen} ‡∏Ñ‡∏ô`)
                              } else {
                                console.error('‚ùå Reset failed:', data.message)
                                alert(`‚ùå ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${data.message}`)
                              }
                            } catch (error: any) {
                              console.error('‚ùå Reset error:', error)
                              alert(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï: ${error.message}`)
                            } finally {
                              setIsLoadingAllUsers(false)
                            }
                          }}
                          className={`flex items-center gap-3 px-8 py-4 rounded-2xl border-2 border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-gray-400 transition-all duration-300 shadow-lg hover:shadow-xl font-bold text-base transform hover:scale-105 ${isLoadingAllUsers ? 'opacity-75 cursor-not-allowed' : ''}`}
                          disabled={isLoadingAllUsers}
                        >
                          {isLoadingAllUsers ? (
                            <>
                              <RefreshCw className="h-6 w-6 animate-spin" />
                              üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï...
                            </>
                          ) : (
                            <>
                              <RefreshCw className="h-6 w-6" />
                              üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                            </>
                          )}
                        </Button>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Vote Rankings Section */}
              <div className="mb-8 sm:mb-10">
                <div className="flex justify-center">
                  <div className="w-full max-w-md">
                    <Suspense fallback={<div className="animate-pulse bg-gray-200 h-48 rounded-lg"></div>}>
                      <ErrorBoundary>
                        <VoteRankingMini 
                          voteType="popularity_combined" 
                          limit={5} 
                          onUserProfileClick={handleVoteUserProfileClick}
                        />
                      </ErrorBoundary>
                    </Suspense>
                  </div>
                </div>
              </div>

              {/* Mobile-First Premium Member Exclusive */}
              <div className="mb-8 sm:mb-10">
                <div className="mb-4 sm:mb-6">
                  <h3 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-extrabold tracking-tight bg-gradient-to-r from-amber-500 via-pink-500 to-violet-600 bg-clip-text text-transparent flex items-center">
                    <span className="text-lg sm:text-xl md:text-2xl lg:text-3xl">Premium</span>
                    <Crown className="h-5 w-5 sm:h-6 sm:w-6 md:h-7 md:w-7 lg:h-8 lg:w-8 ml-2 sm:ml-3 text-amber-500" />
                  </h3>
                  <p className="text-xs sm:text-sm md:text-base text-gray-600 mt-1 sm:mt-2">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏Ñ‡∏±‡∏î‡∏™‡∏£‡∏£ ‚Ä¢ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</p>
                </div>
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 sm:gap-4 md:gap-6 lg:gap-8">
                  {premiumUsers.map((u: PublicUser, idx: number) => {
                    // ‡πÉ‡∏ä‡πâ utility function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á image URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏ö‡∏•‡∏≠
                    const mainImageIndex = (u as any)?.mainProfileImageIndex || 0;
                    const mainImage = u?.profileImages?.[mainImageIndex];
                    const displayName = u?.nickname || `${u?.firstName || ''} ${u?.lastName || ''}`.trim() || 'Premium User'
                    const tier: string = (u?.membership?.tier || 'member') as string
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡∏ö‡∏•‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
                    const currentUser = JSON.parse(sessionStorage.getItem('user') || '{}');
                    const profileId = (u as any)?._id?.toString();
                    const mainImageId = (mainImage as any)?._id?.toString() || 'main_image';
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏π‡∏õ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                    const hasPaidForMainImage = currentUser.purchasedImages?.some((purchased: any) => 
                      purchased.profileId === profileId && purchased.imageId === mainImageId
                    );
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡∏ö‡∏•‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
                    const isMainImageBlurred = typeof mainImage === 'object' && (mainImage as any)?.isBlurred && !hasPaidForMainImage;
                    
                    // Debug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å
                    if (typeof mainImage === 'object' && (mainImage as any)?.isBlurred) {
                      console.log('üîç Main image blur check:', {
                        profileId,
                        mainImageId,
                        isBlurred: (mainImage as any)?.isBlurred,
                        hasPaidForMainImage,
                        isMainImageBlurred,
                        forceUpdate, // ‡πÄ‡∏û‡∏¥‡πà‡∏° forceUpdate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£ re-render
                        matchingPurchases: currentUser.purchasedImages?.filter((purchased: any) => 
                          purchased.profileId === profileId && purchased.imageId === mainImageId
                        )
                      });
                    }
                    
                    const imageUrl = getMainProfileImage(
                      u?.profileImages || [], 
                      mainImageIndex, 
                      u._id || (u as any)?.id
                    )
                    const tierColors: Record<string, string> = {
                      platinum: 'from-purple-500 to-pink-500',
                      diamond: 'from-blue-500 to-cyan-500',
                      vip2: 'from-red-500 to-orange-500',
                      vip1: 'from-orange-500 to-yellow-500',
                      vip: 'from-purple-400 to-pink-400',
                      gold: 'from-yellow-500 to-amber-500',
                      silver: 'from-gray-400 to-slate-400'
                    }
                    const badgeGradient = tierColors[tier] || 'from-gray-300 to-gray-400'
                    return (
                      <div
                        key={u._id || idx}
                        className="modern-card rounded-xl sm:rounded-2xl overflow-hidden shadow-lg sm:shadow-xl hover:shadow-xl sm:hover:shadow-2xl hover:shadow-pink-100/50 transition-all duration-500 hover:-translate-y-1 sm:hover:-translate-y-2 cursor-pointer group"
                        onClick={() => {
                          const token = sessionStorage.getItem('token');
                          if (!token) {
                            showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô')
                            return
                          }
                          
                          const modalProfile: FeaturedProfile = {
                            id: u._id,
                            name: displayName,
                            age: u?.age,
                            location: u?.location || 'Thailand',
                            distance: 'Premium',
                            bio: u?.bio || '',
                            interests: Array.isArray(u?.interests)
                              ? u.interests.map((it: any) => it?.category || it?.name || `${it}`).filter(Boolean)
                              : [],
                            images: (u?.profileImages || []).filter((img: any) => {
                              const imgPath = typeof img === 'string' ? img : img?.url || '';
                              return !imgPath.startsWith('data:image/svg+xml');
                            }),
                            verified: false,
                            online: (u as any)?.isOnline || false,
                            lastActive: (u as any)?.lastActive,
                            membershipTier: u?.membership?.tier || 'member',
                            membership: {
                              tier: u?.membership?.tier || 'member'
                            }
                          };
                          
                          // ‡πÉ‡∏ä‡πâ handleViewProfile ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
                          handleViewProfile(modalProfile);
                        }}
                      >
                        <div className="h-48 sm:h-60 md:h-72 overflow-hidden relative">
                          {imageUrl ? (
                            <>
                              <img
                                src={imageUrl}
                                alt={displayName}
                                className={`w-full h-full object-cover transition-transform duration-500 group-hover:scale-110 ${isMainImageBlurred ? 'filter blur-md' : ''}`}
                                style={{
                                  ...(isMainImageBlurred && { 
                                    filter: 'blur(12px)',
                                    transition: 'filter 0.3s ease'
                                  })
                                }}
                                onError={(e) => {
                                  (e.target as HTMLImageElement).style.display = 'none';
                                }}
                              />
                              {/* Overlay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏ö‡∏•‡∏≠ */}
                              {isMainImageBlurred && (
                                <div className="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center">
                                  <div className="w-10 h-10 text-white opacity-60">
                                    <svg viewBox="0 0 24 24" fill="currentColor" className="w-full h-full">
                                      <path d="M12 6c3.79 0 7.17 2.13 8.82 5.5-.59 1.22-1.42 2.27-2.41 3.12l1.41 1.41c1.39-1.23 2.49-2.77 3.18-4.53C21.27 7.11 17 4 12 4c-1.27 0-2.49.2-3.64.57l1.65 1.65C10.66 6.09 11.32 6 12 6zm-1.07 1.14L13 9.21c.57.25 1.03.71 1.28 1.28l2.07 2.07c.08-.34.14-.7.14-1.07C16.5 9.01 14.48 7 12 7c-.37 0-.72.05-1.07.14zM2.01 3.87l2.68 2.68C3.06 7.83 1.77 9.53 1 11.5 2.73 15.89 7 19 12 19c1.52 0 2.98-.29 4.32-.82l3.42 3.42 1.41-1.41L3.42 2.46 2.01 3.87zm7.5 7.5l2.61 2.61c-.04.01-.08.02-.12.02-1.38 0-2.5-1.12-2.5-2.5 0-.05.01-.08.01-.13zm-3.4-3.4l1.75 1.75c-.23.55-.36 1.15-.36 1.78 0 2.48 2.02 4.5 4.5 4.5.63 0 1.23-.13 1.77-.36l.98.98c-.88.24-1.8.38-2.75.38-3.79 0-7.17-2.13-8.82-5.5.7-1.43 1.72-2.61 2.93-3.53z"/>
                                    </svg>
                                  </div>
                                </div>
                              )}
                            </>
                          ) : null}
                          
                          {/* Fallback element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ */}
                          <div className={`absolute inset-0 ${(u as any).isOnline ? 'bg-gradient-to-r from-green-600 to-green-700' : 'bg-gradient-to-r from-gray-600 to-gray-700'} flex items-center justify-center text-white text-2xl font-bold hidden`}>
                            <User className="h-12 w-12" />
                          </div>
                          
                          <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent"></div>
                          <div className="absolute top-2 sm:top-4 left-2 sm:left-4">
                            <div className={`px-2 py-1 sm:px-3 sm:py-1.5 rounded-full text-xs font-semibold text-white bg-gradient-to-r ${badgeGradient} shadow-xl border border-white/10`}>{tier.toUpperCase()}</div>
                          </div>
                          {/* Vote Score Display - Top Right */}
                          <div className="absolute top-2 sm:top-4 right-2 sm:right-4">
                            <HeartVote
                              candidateId={u._id || (u as any)?.id}
                              candidateGender={u?.gender || 'male'}
                              candidateDisplayName={displayName}
                              isOwnProfile={false}
                              className=""
                            />
                          </div>
                          
                          <div className="absolute bottom-2 sm:bottom-4 left-2 sm:left-4 right-2 sm:right-4 text-white">
                            <div className="flex justify-between items-end">
                              <div className="flex-1 min-w-0">
                                <h3 className="text-sm sm:text-base md:text-lg lg:text-xl font-bold truncate">{displayName}{u?.age ? `, ${u.age}` : ''}</h3>
                                {u?.location && (
                                  <div className="flex items-center text-white/90 text-xs sm:text-sm">
                                    <MapPin className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                                    <span className="truncate">{u.location}</span>
                                  </div>
                                )}
                              </div>
                              <div className="ml-2 flex gap-1 sm:gap-2">
                                {/* Profile Details Button */}
                                <Button 
                                  size="icon" 
                                  variant="ghost" 
                                  className={`rounded-full transition-all duration-300 hover:scale-110 h-8 w-8 sm:h-10 sm:w-10 ${
                                    (u as any).isOnline 
                                      ? 'text-green-300 hover:text-green-200 hover:bg-green-400/40 shadow-green-400/50 shadow-lg' 
                                      : 'text-gray-500 hover:text-gray-400 hover:bg-gray-500/20'
                                  }`}
                                  onClick={(e: any) => {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    
                                    const token = sessionStorage.getItem('token');
                                    if (!token) {
                                      showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô')
                                      return
                                    }
                                    
                                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ handleViewProfile ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
                                    const modalProfile: FeaturedProfile = {
                                      id: u._id,
                                      name: displayName,
                                      age: u?.age,
                                      location: u?.location || 'Thailand',
                                      distance: 'Premium',
                                      bio: u?.bio || '',
                                      interests: Array.isArray(u?.interests)
                                        ? u.interests.map((it: any) => it?.category || it?.name || `${it}`).filter(Boolean)
                                        : [],
                                      images: (u?.profileImages || []).filter((img: any) => {
                                        const imgPath = typeof img === 'string' ? img : img?.url || '';
                                        return !imgPath.startsWith('data:image/svg+xml');
                                      }),
                                      verified: false,
                                      online: (u as any)?.isOnline || false,
                                      lastActive: (u as any)?.lastActive,
                                      membershipTier: u?.membership?.tier || 'member',
                                      membership: {
                                        tier: u?.membership?.tier || 'member'
                                      }
                                    };
                                    
                                    // ‡πÉ‡∏ä‡πâ handleViewProfile ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
                                    handleViewProfile(modalProfile);
                                  }}
                                >
                                  <User className="h-4 w-4 sm:h-5 sm:w-5 md:h-6 md:w-6" />
                                </Button>
                                
                                {/* Heart Button */}
                                <Button 
                                  size="icon" 
                                  variant="ghost" 
                                  className={`rounded-full transition-all duration-300 hover:scale-110 h-8 w-8 sm:h-10 sm:w-10 ${
                                    likedProfiles.has(u._id || '')
                                      ? 'text-red-500'
                                      : 'text-white hover:text-pink-300 hover:bg-white/20'
                                  }`}
                                  onClick={(e: any) => {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    
                                    const token = sessionStorage.getItem('token');
                                    if (!token) {
                                      showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô')
                                      return
                                    }
                                    
                                    const userId = u._id || '';
                                    handleProfileLike(userId);
                                  }}
                                >
                                  <Heart className={`h-5 w-5 sm:h-6 sm:w-6 md:h-7 md:w-7 ${
                                    likedProfiles.has(u._id || '') ? 'fill-current' : ''
                                  }`} />
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    )
                  })}
                </div>
              </div>
              {/* Mobile-First Discover Amazing People */}
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 sm:mb-6 mt-8 sm:mt-12 gap-4">
                <div className="flex-1">
                  <h2 className="text-xl sm:text-2xl md:text-3xl font-bold gradient-text mb-1 sm:mb-2">Discover Amazing People ‚ú®</h2>
                  <p className="text-sm sm:text-base text-gray-600">
                    Find your perfect match from verified member singles 
                    {!isLoadingAllUsers && allUsers.length > 0 && (
                      <span className="ml-1 sm:ml-2 text-pink-600 font-semibold text-xs sm:text-sm">
                        (‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á {allUsers.length} ‡∏Ñ‡∏ô)
                      </span>
                    )}
                  </p>
                </div>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => {
                    setIsLoadingAllUsers(true)
                    setCurrentPage(1)
                    setHasMoreUsers(true)
                    // Trigger reload
                    const base = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
                    fetch(`${base}/api/profile/discover?limit=50`, {
                      headers: {
                        'Content-Type': 'application/json',
                        ...(sessionStorage.getItem('token') ? { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } : {})
                      }
                    })
                    .then(res => res.json())
                    .then(data => {
                      if (data.success) {
                        setAllUsers(data.data.users)
                        setHasMoreUsers(data.data.pagination.page < data.data.pagination.pages)
                        setCurrentPage(1)
                      }
                    })
                    .catch(() => {})
                    .finally(() => setIsLoadingAllUsers(false))
                  }}
                  disabled={isLoadingAllUsers}
                  className="flex items-center gap-2 text-xs sm:text-sm px-3 sm:px-4 py-2"
                >
                  <RefreshCw className={`w-3 h-3 sm:w-4 sm:h-4 ${isLoadingAllUsers ? 'animate-spin' : ''}`} />
                  ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
                </Button>
              </div>
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 sm:gap-4 md:gap-6 lg:gap-8">
                {isLoadingAllUsers ? (
                  // Loading skeleton
                  Array.from({ length: 8 }).map((_, i) => (
                    <div key={i} className="modern-card rounded-2xl overflow-hidden shadow-xl animate-pulse">
                      <div className="h-72 bg-gray-200"></div>
                      <div className="p-6">
                        <div className="h-4 bg-gray-200 rounded mb-2"></div>
                        <div className="h-3 bg-gray-200 rounded mb-4"></div>
                        <div className="flex gap-2">
                          <div className="h-6 bg-gray-200 rounded-full w-16"></div>
                          <div className="h-6 bg-gray-200 rounded-full w-20"></div>
                          <div className="h-6 bg-gray-200 rounded-full w-14"></div>
                        </div>
                      </div>
                    </div>
                  ))
                ) : allUsers.length > 0 ? (
                  allUsers
                    .filter(u => {
                      // ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
                      const currentUserId = user?._id || user?.id;
                      const userId = u._id || (u as any)?.id;
                      return currentUserId !== userId;
                    })
                    .slice(0, visibleCount)
                    .map(user => {
                    // ‡πÉ‡∏ä‡πâ utility function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á image URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    const profileImage = getMainProfileImage(
                      user?.profileImages || [], 
                      (user as any)?.mainProfileImageIndex, 
                      user._id || (user as any)?.id
                    )
                    
                    // const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
                    
                    
                    const displayName = user.nickname || `${user.firstName || ''} ${user.lastName || ''}`.trim() || (user as any).username || 'Unknown'
                    const age = user.age || 'N/A'
                    const location = user.location || 'Unknown'
                    const bio = user.bio || 'No bio available'
                    const interests = user.interests?.map(i => i.category || i) || []
                    
                    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö isOnline status (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå)
                    if ((user as any).isOnline) {
                      console.log(`üü¢ User ${displayName} is ONLINE:`, {
                        isOnline: (user as any).isOnline,
                        lastActive: (user as any).lastActive,
                        userId: user._id
                      });
                    }
                    
                    return (
                      <div key={user._id} className="modern-card rounded-2xl overflow-hidden shadow-xl hover:shadow-2xl hover:shadow-pink-100/50 transition-all duration-500 hover:-translate-y-2 cursor-pointer group floating-hearts"                         onClick={() => {
                          console.log('üñ±Ô∏è Discover card clicked:', displayName);
                          
                          const token = sessionStorage.getItem('token');
                          if (!token) {
                            showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô')
                            return
                          }
                          
                          const profileData = {
                            id: user._id,
                            name: displayName,
                            age: parseInt(String(age)) || 0,
                            location: location,
                            bio: bio,
                            interests: interests,
                            images: user.profileImages && user.profileImages.length > 0
                              ? user.profileImages.filter(img => 
                                  typeof img === 'string' && !img.startsWith('data:image/svg+xml')
                                ).map(img => 
                                  getProfileImageUrl(img, user._id || (user as any).id)
                                )
                              : [],
                            verified: (user as any).isVerified,
                            online: (user as any).isOnline || false,
                            lastActive: (user as any).lastActive,
                            membershipTier: user.membership?.tier || 'member'
                          };
                          
                          
                          // ‡πÉ‡∏ä‡πâ handleViewProfile ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
                          handleViewProfile(profileData);
                        }}>
                        <div className="h-48 sm:h-60 md:h-72 overflow-hidden relative">
                          {profileImage && !profileImage.startsWith('data:image/svg+xml') ? (
                            <img 
                              src={profileImage} 
                              alt={displayName} 
                              className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                              onError={(e) => {
                                console.error('‚ùå Homepage image failed to load:', {
                                  imageUrl: profileImage,
                                  userId: user._id || (user as any).id,
                                  username: (user as any).username,
                                  originalImageName: user.profileImages?.[(user as any).mainProfileImageIndex || 0]
                                });
                                
                                // ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á fallback ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                                (e.target as HTMLImageElement).style.display = 'none';
                                const fallbackElement = (e.target as HTMLImageElement).nextElementSibling;
                                if (fallbackElement) {
                                  fallbackElement.classList.remove('hidden');
                                }
                                
                                // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏∑‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
                                const otherImages = user.profileImages?.slice(1) || []
                                if (otherImages.length > 0 && !(e.target as HTMLImageElement).dataset.retried) {
                                  const nextImage = otherImages[0]
                                  let nextImageUrl = nextImage
                                  
                                  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                                  if (!nextImage.startsWith('http') && !nextImage.startsWith('data:')) {
                                    const hasExtension = /\.(jpg|jpeg|png|gif|webp)$/i.test(nextImage)
                                    if (!hasExtension) {
                                      nextImageUrl = `${nextImage}.jpg`
                                    }
                                    nextImageUrl = getProfileImageUrl(nextImageUrl, selectedProfile?.id?.toString() || '')
                                  }
                                  
                                  console.log('üîÑ Trying next image:', nextImageUrl)
                                  ;(e.target as HTMLImageElement).src = nextImageUrl
                                  ;(e.target as HTMLImageElement).dataset.retried = 'true'
                                }
                              }}
                              onLoad={() => {
                                console.log('‚úÖ Homepage image loaded successfully:', {
                                  imageUrl: profileImage,
                                  userId: user._id || (user as any).id,
                                  username: (user as any).username
                                });
                              }}
                            />
                          ) : null}
                          
                          {/* Fallback element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ */}
                          <div className={`absolute inset-0 ${(user as any).isOnline ? 'bg-gradient-to-r from-green-600 to-green-700' : 'bg-gradient-to-r from-gray-600 to-gray-700'} flex items-center justify-center text-white text-2xl font-bold hidden`}>
                            <User className="h-12 w-12" />
                          </div>
                          
                          <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent"></div>
                          
                          {/* Membership Tier Badge */}
                          {user.membership?.tier && (
                            <div className="absolute top-2 sm:top-3 left-2 sm:left-3">
                              <Badge className={`text-xs ${
                                user.membership.tier === 'platinum' ? 'bg-gradient-to-r from-purple-500 to-pink-500' :
                                user.membership.tier === 'diamond' ? 'bg-gradient-to-r from-blue-500 to-cyan-500' :
                                user.membership.tier === 'vip2' ? 'bg-gradient-to-r from-red-500 to-orange-500' :
                                user.membership.tier === 'vip1' ? 'bg-gradient-to-r from-orange-500 to-yellow-500' :
                                user.membership.tier === 'vip' ? 'bg-gradient-to-r from-purple-400 to-pink-400' :
                                user.membership.tier === 'gold' ? 'bg-gradient-to-r from-yellow-500 to-amber-500' :
                                user.membership.tier === 'silver' ? 'bg-gradient-to-r from-gray-400 to-slate-400' :
                                'bg-gradient-to-r from-gray-300 to-gray-400'
                              } text-white shadow-lg`}>
                                {user.membership.tier === 'platinum' ? 'PLATINUM' :
                                 user.membership.tier === 'diamond' ? 'DIAMOND' :
                                 user.membership.tier === 'vip2' ? 'VIP2' :
                                 user.membership.tier === 'vip1' ? 'VIP1' :
                                 user.membership.tier === 'vip' ? 'VIP' :
                                 user.membership.tier === 'gold' ? 'GOLD' :
                                 user.membership.tier === 'silver' ? 'SILVER' :
                                 'MEMBER'}
                              </Badge>
                            </div>
                          )}
                          
                          {/* Vote Score Display - Top Right */}
                          <div className="absolute top-2 sm:top-4 right-2 sm:right-4">
                            <HeartVote
                              candidateId={user._id || (user as any)?.id}
                              candidateGender={user?.gender || 'male'}
                              candidateDisplayName={displayName}
                              isOwnProfile={false}
                              className=""
                            />
                          </div>
                          
                          
                          <div className="absolute bottom-2 sm:bottom-4 left-2 sm:left-4 right-2 sm:right-4 text-white">
                            <div className="flex justify-between items-end">
                              <div className="flex-1 min-w-0">
                                <h3 className="text-sm sm:text-base md:text-lg font-bold truncate text-white">{displayName}, {age}</h3>
                                <div className="flex items-center text-white/90 text-xs sm:text-sm">
                                  <MapPin className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                                  <span className="truncate">{location}</span>
                                </div>
                              </div>
                              <div className="ml-2 flex gap-1 sm:gap-2">
                                {/* Profile Details Button */}
                                <Button 
                                  size="icon" 
                                  variant="ghost" 
                                  className={`rounded-full transition-all duration-300 hover:scale-110 h-8 w-8 sm:h-10 sm:w-10 ${
                                    (user as any).isOnline 
                                      ? 'text-green-300 hover:text-green-200 hover:bg-green-400/40 shadow-green-400/50 shadow-lg' 
                                      : 'text-gray-500 hover:text-gray-400 hover:bg-gray-500/20'
                                  }`}
                                  onClick={async (e: any) => {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    
                                    const token = sessionStorage.getItem('token');
                                    if (!token) {
                                      showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô')
                                      return
                                    }
                                    
                                    try {
                                      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ï‡πá‡∏°
                                      const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
                                      const response = await fetch(`${baseUrl}/api/profile/${user._id}`, {
                                        headers: {
                                          'Authorization': `Bearer ${token}`,
                                          'Content-Type': 'application/json'
                                        }
                                      });
                                      
                                      if (!response.ok) {
                                        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
                                      }
                                      
                                      const result = await response.json();
                                      if (!result.success) {
                                        throw new Error(result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
                                      }
                                      
                                      const fullProfile = result.data.profile;
                                      
                                      // ‡∏™‡∏£‡πâ‡∏≤‡∏á profile data object ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
                                      const profileData = {
                                        id: fullProfile._id,
                                        name: fullProfile.nickname || `${fullProfile.firstName || ''} ${fullProfile.lastName || ''}`.trim() || displayName,
                                        age: fullProfile.age || parseInt(String(age)) || 0,
                                        location: fullProfile.location || location,
                                        bio: fullProfile.bio || bio,
                                        interests: Array.isArray(fullProfile.interests)
                                          ? fullProfile.interests.map((it: any) => it?.category || it?.name || `${it}`).filter(Boolean)
                                          : interests,
                                        images: (fullProfile.profileImages || []).filter(img => 
                                          typeof img === 'string' && !img.startsWith('data:image/svg+xml')
                                        ).map(img => 
                                          getProfileImageUrl(img, fullProfile._id)
                                        ),
                                        verified: fullProfile.isVerified || false,
                                        online: fullProfile.isOnline || false,
                                        lastActive: fullProfile.lastActive,
                                        membershipTier: fullProfile.membership?.tier || 'member',
                                        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ï‡πá‡∏°
                                        username: fullProfile.username || '',
                                        firstName: fullProfile.firstName || '',
                                        lastName: fullProfile.lastName || '',
                                        email: fullProfile.email || '',
                                        phone: fullProfile.phone || '',
                                        birthDate: fullProfile.birthDate || '',
                                        gender: fullProfile.gender || '',
                                        lookingFor: fullProfile.lookingFor || '',
                                        education: fullProfile.education || '',
                                        occupation: fullProfile.occupation || '',
                                        height: fullProfile.height || '',
                                        weight: fullProfile.weight || '',
                                        relationshipStatus: fullProfile.relationshipStatus || '',
                                        smoking: fullProfile.smoking || '',
                                        drinking: fullProfile.drinking || '',
                                        exercise: fullProfile.exercise || '',
                                        languages: fullProfile.languages || [],
                                        hobbies: fullProfile.hobbies || [],
                                        profileVideos: fullProfile.profileVideos || [],
                                        religion: fullProfile.religion || '',
                                        pets: fullProfile.pets || '',
                                        children: fullProfile.children || '',
                                        wantChildren: fullProfile.wantChildren || ''
                                      };
                                      
                                      console.log('üéØ Discover: Opening full profile modal with complete data:', profileData);
                                      
                                      // ‡πÄ‡∏õ‡∏¥‡∏î profile modal ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏°
                                      openProfileModal(profileData, true);
                                      
                                    } catch (error) {
                                      console.error('Error loading full profile:', error);
                                      showWebappNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
                                    }
                                  }}
                                >
                                  <User className="h-4 w-4 sm:h-5 sm:w-5 md:h-6 md:w-6" />
                                </Button>
                                
                                {/* Heart Button */}
                                <Button 
                                  size="icon" 
                                  variant="ghost" 
                                  className={`rounded-full transition-all duration-300 hover:scale-110 h-8 w-8 sm:h-10 sm:w-10 ${
                                    likedProfiles.has(user._id || '')
                                      ? 'text-red-500'
                                      : 'text-white hover:text-pink-300 hover:bg-white/20'
                                  }`}
                                  onClick={(e: any) => {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    
                                    const token = sessionStorage.getItem('token');
                                    if (!token) {
                                      showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô')
                                      return
                                    }
                                    
                                    const userId = user._id || '';
                                    handleProfileLike(userId);
                                  }}
                                >
                                  <Heart className={`h-5 w-5 sm:h-6 sm:w-6 md:h-7 md:w-7 ${
                                    likedProfiles.has(user._id || '') ? 'fill-current' : ''
                                  }`} />
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    )
                  })
                ) : (
                  <div className="col-span-full text-center py-12">
                    <Users className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500 mb-2">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
                    <p className="text-gray-400 text-sm">‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
                    <Button 
                      onClick={() => {
                        setIsLoadingAllUsers(true)
                        setCurrentPage(1)
                        setHasMoreUsers(true)
                        // Trigger reload
                        const base = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
                        fetch(`${base}/api/profile/discover?limit=50`, {
                          headers: {
                            'Content-Type': 'application/json',
                            ...(sessionStorage.getItem('token') ? { 'Authorization': `Bearer ${sessionStorage.getItem('token')}` } : {})
                          }
                        })
                        .then(res => res.json())
                        .then(data => {
                          if (data.success) {
                            setAllUsers(data.data.users)
                            setHasMoreUsers(data.data.pagination.page < data.data.pagination.pages)
                            setCurrentPage(1)
                          }
                        })
                        .catch(() => {})
                        .finally(() => setIsLoadingAllUsers(false))
                      }}
                      disabled={isLoadingAllUsers}
                      className="mt-4 bg-gradient-to-r from-pink-500 to-violet-500 hover:from-pink-600 hover:to-violet-600 text-white"
                    >
                      <RefreshCw className={`w-4 h-4 mr-2 ${isLoadingAllUsers ? 'animate-spin' : ''}`} />
                      ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                    </Button>
                  </div>
                )}
                
                {/* Load More Button */}
                {!isLoadingAllUsers && allUsers.length > 0 && visibleCount < allUsers.length && (
                  <div className="col-span-full text-center py-8">
                    <Button
                      onClick={() => {
                        const nextCount = Math.min(visibleCount + 12, allUsers.length)
                        setVisibleCount(nextCount)
                        console.log(`üìä Loading more cards: ${visibleCount} ‚Üí ${nextCount} (total: ${allUsers.length})`)
                      }}
                      disabled={false}
                      variant="outline"
                      size="lg"
                      className="bg-gradient-to-r from-pink-500 to-violet-500 hover:from-pink-600 hover:to-violet-600 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300"
                    >
                      {false ? (
                        <>
                          <RefreshCw className="w-5 h-5 mr-2 animate-spin" />
                          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
                        </>
                      ) : (
                        <>
                          <Users className="w-5 h-5 mr-2" />
                          ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡πà‡∏≠
                        </>
                      )}
                    </Button>
                    {(() => {
                      const allowed = ['member','silver','gold','vip','vip1','vip2']
                      const filteredLen = allUsers.filter(u => allowed.includes((u?.membership?.tier || 'member') as string)).length
                      return hasMoreUsers || visibleCount < filteredLen
                    })() && (
                      <p className="text-gray-500 text-sm mt-2">
                        ‡∏´‡∏ô‡πâ‡∏≤ {currentPage} ‚Ä¢ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏° 20 ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                      </p>
                    )}
                  </div>
                )}
                
                {/* No More Users */}
                {!isLoadingAllUsers && allUsers.length > 0 && !hasMoreUsers && (
                  <div className="col-span-full text-center py-8">
                    <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-6 border border-green-200">
                      <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-3" />
                      <p className="text-green-700 font-semibold">‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!</p>
                      <p className="text-green-600 text-sm">‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏î‡∏π‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà</p>
                    </div>
                  </div>
                )}
              </div>
            </TabsContent>
            
            {/* Mobile-First Matches Tab */}
            <TabsContent value="matches" id="matches-content" className="p-1 sm:p-6">
              {!isAuthenticated ? (
                <div className="text-center py-8 sm:py-12">
                  <Users className="h-12 w-12 sm:h-16 sm:w-16 text-gray-400 mx-auto mb-3 sm:mb-4" />
                  <p className="text-gray-500 mb-3 sm:mb-4 text-sm sm:text-base">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AI Matching</p>
                  <Button onClick={() => setShowLoginDialog(true)} className="text-sm sm:text-base px-4 sm:px-6 py-2 sm:py-3">
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                  </Button>
                </div>
              ) : (
                <AIMatchingSystem currentUser={user} />
              )}
            </TabsContent>
            {/* Mobile-First Messages Tab */}
            <TabsContent value="messages" className="p-0">
              {!isAuthenticated ? (
                <div className="text-center py-8 sm:py-12">
                  <MessageCircle className="h-12 w-12 sm:h-16 sm:w-16 text-gray-400 mx-auto mb-3 sm:mb-4" />
                  <p className="text-gray-500 mb-3 sm:mb-4 text-sm sm:text-base">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó</p>
                  <Button onClick={() => setShowLoginDialog(true)} className="text-sm sm:text-base px-4 sm:px-6 py-2 sm:py-3">
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                  </Button>
                </div>
              ) : (
                <div className="h-[calc(100vh-10rem)] sm:h-[700px] flex flex-col keyboard-aware">
                  {/* Mobile-First Tab Navigation for Chat Types */}
                  <div className="bg-gradient-to-r from-pink-500 to-violet-500 text-white p-2 sm:p-4 rounded-t-lg -mt-2">
                    <div className="flex space-x-1 sm:space-x-2">
                      <button
                        onClick={() => {
                          setChatType('public');
                          setChatView('list');
                          setPrivateChatView('list');
                        }}
                        className={`flex-1 px-3 py-2 sm:px-4 sm:py-2 rounded-lg text-sm sm:text-base font-medium transition-all duration-200 ${
                          chatType === 'public'
                            ? 'bg-white text-pink-600 shadow-sm'
                            : 'text-white/80 hover:text-white hover:bg-white/20'
                        }`}
                      >
                        <span className="hidden sm:inline">‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞</span>
                        <span className="sm:hidden">‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞</span>
                      </button>
                      <button
                        onClick={() => {
                          setChatType('private');
                          setChatView('list');
                          setPrivateChatView('list');
                          console.log('üîÑ Private chat tab clicked, fetching chats...');
                          // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                          fetchPrivateChats();
                        }}
                        className={`flex-1 px-3 py-2 sm:px-4 sm:py-2 rounded-lg text-sm sm:text-base font-medium transition-all duration-200 ${
                          chatType === 'private'
                            ? 'bg-white text-pink-600 shadow-sm'
                            : 'text-white/80 hover:text-white hover:bg-white/20'
                        }`}
                      >
                        <span className="hidden sm:inline">‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</span>
                        <span className="sm:hidden">‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</span>
                      </button>
                    </div>
                  </div>

                  {/* Chat Content */}
                  <div className="flex-1 overflow-y-auto bg-white rounded-b-lg">
                    {chatType === 'public' ? (
                      chatView === 'list' ? (
                        <ChatRoomList
                          currentUser={user}
                          onSelectRoom={handleSelectRoom}
                          onCreatePrivateRoom={() => setShowCreateRoomModal(true)}
                          showWebappNotification={showWebappNotification}
                        />
                      ) : (
                        <RealTimeChat
                          roomId={selectedRoomId}
                          currentUser={user}
                          onBack={handleBackToRoomList}
                          showWebappNotification={showWebappNotification}
                        />
                      )
                    ) : (
                      privateChatView === 'list' ? (
                        <PrivateChatList
                          currentUser={user}
                          onSelectChat={handleSelectPrivateChat}
                          onCreateNewChat={() => setShowNewPrivateChatModal(true)}
                          onDeleteChat={handleDeletePrivateChat}
                          onRefresh={fetchPrivateChats}
                          privateChats={privateChats}
                          isLoading={false}
                          showWebappNotification={showWebappNotification}
                        />
                      ) : (
                        <PrivateChat
                          currentUser={user}
                          selectedChat={selectedPrivateChat}
                          onSendMessage={handleSendPrivateMessage}
                          onClose={handleBackToPrivateChatList}
                          messages={selectedPrivateChat?.messages || []}
                          isLoading={false}
                          isTyping={false}
                          onTyping={() => {}}
                          onStopTyping={() => {}}
                        />
                      )
                    )}
                  </div>
                </div>
              )}
            </TabsContent>
            {/* Mobile-First Ranking Tab */}
            <TabsContent value="ranking" className="p-0">
              <Suspense fallback={<LoadingSpinner />}>
                <VoteRanking onUserProfileClick={handleVoteUserProfileClick} />
              </Suspense>
            </TabsContent>
            {/* Mobile-First Membership Tab */}
            <TabsContent value="membership" id="membership-content" className="p-1 sm:p-6">
              <div className="space-y-4 sm:space-y-6 lg:space-y-8">
                {/* Premium Tabs Navigation */}
                <Tabs defaultValue="dashboard" className="w-full">
                  <TabsList className="grid w-full grid-cols-2 bg-white border rounded-lg p-1 h-auto mb-6">
                    <TabsTrigger 
                      value="dashboard"
                      className="text-xs sm:text-sm py-2 px-1 sm:px-3 rounded-md data-[state=active]:bg-pink-500 data-[state=active]:text-white"
                    >
                      <FontAwesomeIcon icon={faGem} className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                      <span className="hidden sm:inline">‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î</span>
                      <span className="sm:hidden">‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î</span>
                    </TabsTrigger>
                    <TabsTrigger 
                      value="shop"
                      className="text-xs sm:text-sm py-2 px-1 sm:px-3 rounded-md data-[state=active]:bg-pink-500 data-[state=active]:text-white"
                    >
                      <FontAwesomeIcon icon={faShoppingCart} className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                      <span className="hidden sm:inline">‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</span>
                      <span className="sm:hidden">‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</span>
                    </TabsTrigger>
                  </TabsList>

                  {/* Dashboard Tab Content */}
                  <TabsContent value="dashboard" className="space-y-4 sm:space-y-6 lg:space-y-8">
                    <Suspense fallback={<LoadingSpinner />}>
                      <MembershipDashboard userId={user?._id} />
                    </Suspense>
                    <div id="membership-comparison" className="border-t border-slate-200 pt-4 sm:pt-6 lg:pt-8">
                      <Suspense fallback={<LoadingSpinner />}>
                        <MembershipPlans currentUserId={user?._id} currentTier={user?.membership?.tier || 'member'} />
                      </Suspense>
                    </div>
                  </TabsContent>

                  {/* Shop Tab Content */}
                  <TabsContent value="shop" className="space-y-4 sm:space-y-6">
                    <Suspense fallback={<LoadingSpinner />}>
                      <CoinShop 
                        userId={user?._id} 
                        onNavigateToPayment={(plan) => {
                          // Navigate to payment page
                          setSelectedPlan(plan);
                          setCurrentView('payment');
                        }}
                      />
                    </Suspense>
                  </TabsContent>
                </Tabs>
              </div>
            </TabsContent>
            {/* Mobile-First Profile Tab */}
            <TabsContent value="profile" className="p-1 sm:p-6">
              {showVoteUserProfile && selectedVoteUser ? (
                <div className="space-y-4">
                  {/* Header with back button */}
                  <div className="flex items-center space-x-3 mb-4">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCloseVoteUserProfile}
                      className="flex items-center space-x-2"
                    >
                      <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                      </svg>
                      <span>‡∏Å‡∏•‡∏±‡∏ö</span>
                    </Button>
                    <h2 className="text-lg font-semibold text-gray-800">
                      ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á {selectedVoteUser.displayName || selectedVoteUser.username || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}
                    </h2>
                  </div>
                  
                  {/* User Profile Component */}
                  <Suspense fallback={<LoadingSpinner />}>
                    <UserProfile
                      userId={selectedVoteUser._id || selectedVoteUser.id}
                      isOwnProfile={false}
                    />
                  </Suspense>
                </div>
              ) : isAuthenticated && user ? (
                <Suspense fallback={<LoadingSpinner />}>
                  <UserProfile
                    userId={user._id || user.id}
                    isOwnProfile={true}
                  />
                </Suspense>
              ) : (
                <div className="text-center py-8 sm:py-12">
                  <p className="text-gray-500 mb-3 sm:mb-4 text-sm sm:text-base">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</p>
                  <Button onClick={() => setShowLoginDialog(true)} className="text-sm sm:text-base px-4 sm:px-6 py-2 sm:py-3">
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                  </Button>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </div>
      </section>

      {/* Mobile-First Bottom Navigation Bar */}
      <div className="fixed bottom-0 left-0 right-0 z-50 bg-white/95 backdrop-blur-lg border-t border-gray-200/50 shadow-lg">
        <div className="max-w-md mx-auto">
          <Tabs value={activeTab} onValueChange={handleTabChange}>
            <TabsList className="w-full justify-between bg-transparent h-12 sm:h-16 p-0">
              <TabsTrigger 
                value="discover" 
                className="flex-1 h-full data-[state=active]:bg-pink-100 data-[state=active]:text-pink-700 rounded-none text-gray-500 data-[state=active]:border-t-2 data-[state=active]:border-pink-700 transition-all duration-300 flex flex-col items-center justify-center space-y-0.5 sm:space-y-1"
              >
                <FontAwesomeIcon 
                  icon={faSearch} 
                  className={`h-3 w-3 sm:h-5 sm:w-5 transition-all duration-300 ${activeTab === 'discover' ? 'text-pink-700 drop-shadow-lg scale-105 animate-pulse' : 'text-gray-500'}`} 
                  style={activeTab === 'discover' ? { color: '#be185d' } : {}} 
                />
                <span className="text-xs font-medium">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</span>
              </TabsTrigger>
              <TabsTrigger 
                value="matches" 
                className="flex-1 h-full data-[state=active]:bg-pink-100 data-[state=active]:text-pink-700 rounded-none text-gray-500 data-[state=active]:border-t-2 data-[state=active]:border-pink-700 transition-all duration-300 flex flex-col items-center justify-center space-y-0.5 sm:space-y-1"
              >
                <FontAwesomeIcon 
                  icon={faHeart} 
                  className={`h-5 w-5 transition-all duration-300 ${activeTab === 'matches' ? 'text-pink-700 drop-shadow-lg scale-105 animate-pulse' : 'text-gray-500'}`} 
                  style={activeTab === 'matches' ? { color: '#be185d' } : {}} 
                />
                <span className="text-xs font-medium">‡πÅ‡∏°‡∏ó</span>
              </TabsTrigger>
              <TabsTrigger 
                value="messages" 
                className="flex-1 h-full data-[state=active]:bg-pink-100 data-[state=active]:text-pink-700 rounded-none text-gray-500 data-[state=active]:border-t-2 data-[state=active]:border-pink-700 transition-all duration-300 flex flex-col items-center justify-center space-y-0.5 sm:space-y-1"
              >
                <FontAwesomeIcon 
                  icon={faComments} 
                  className={`h-5 w-5 transition-all duration-300 ${activeTab === 'messages' ? 'text-pink-700 drop-shadow-lg scale-105 animate-pulse' : 'text-gray-500'}`} 
                  style={activeTab === 'messages' ? { color: '#be185d' } : {}} 
                />
                <span className="text-xs font-medium">‡πÅ‡∏ä‡∏ó</span>
              </TabsTrigger>
              <TabsTrigger 
                value="ranking" 
                className="flex-1 h-full data-[state=active]:bg-pink-100 data-[state=active]:text-pink-700 rounded-none text-gray-500 data-[state=active]:border-t-2 data-[state=active]:border-pink-700 transition-all duration-300 flex flex-col items-center justify-center space-y-0.5 sm:space-y-1"
              >
                <FontAwesomeIcon 
                  icon={faTrophy} 
                  className={`h-5 w-5 transition-all duration-300 ${activeTab === 'ranking' ? 'text-pink-700 drop-shadow-lg scale-105 animate-pulse' : 'text-gray-500'}`} 
                  style={activeTab === 'ranking' ? { color: '#be185d' } : {}} 
                />
                <span className="text-xs font-medium">‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö</span>
              </TabsTrigger>
              <TabsTrigger 
                value="membership" 
                className="flex-1 h-full data-[state=active]:bg-pink-100 data-[state=active]:text-pink-700 rounded-none text-gray-500 data-[state=active]:border-t-2 data-[state=active]:border-pink-700 transition-all duration-300 flex flex-col items-center justify-center space-y-0.5 sm:space-y-1"
              >
                <FontAwesomeIcon 
                  icon={faGem} 
                  className={`h-5 w-5 transition-all duration-300 ${activeTab === 'membership' ? 'text-pink-700 drop-shadow-lg scale-105 animate-pulse' : 'text-gray-500'}`} 
                  style={activeTab === 'membership' ? { color: '#be185d' } : {}} 
                />
                <span className="text-xs font-medium">‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°</span>
              </TabsTrigger>
              <TabsTrigger 
                value="profile" 
                className="flex-1 h-full data-[state=active]:bg-pink-100 data-[state=active]:text-pink-700 rounded-none text-gray-500 data-[state=active]:border-t-2 data-[state=active]:border-pink-700 transition-all duration-300 flex flex-col items-center justify-center space-y-0.5 sm:space-y-1"
              >
                <FontAwesomeIcon 
                  icon={faUser} 
                  className={`h-5 w-5 transition-all duration-300 ${activeTab === 'profile' ? 'text-pink-700 drop-shadow-lg scale-105 animate-pulse' : 'text-gray-500'}`} 
                  style={activeTab === 'profile' ? { color: '#be185d' } : {}} 
                />
                <span className="text-xs font-medium">‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</span>
              </TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
      </div>
      
      {/* Footer */}
      <footer className="bg-gradient-to-r from-pink-100 via-violet-100 to-pink-100 border-t border-pink-300/30 py-4">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-center space-x-3">
            <div className="w-5 h-5 bg-gradient-to-r from-pink-500 to-violet-500 rounded-full flex items-center justify-center shadow-lg">
              <Heart className="h-3 w-3 text-white" fill="white" />
            </div>
            <a 
              href="https://devnid.xyz/" 
              target="_blank" 
              rel="noopener noreferrer"
              className="text-base font-bold bg-gradient-to-r from-pink-600 via-violet-600 to-pink-600 bg-clip-text text-transparent hover:from-pink-700 hover:via-violet-700 hover:to-pink-700 transition-all duration-300 cursor-pointer transform hover:scale-105"
            >
              Power By DevKao & DevMax ¬© {new Date().getFullYear()}
            </a>
          </div>
        </div>
      </footer>
      
      {/* Profile Image Modal */}
      {selectedProfile && (
        <Dialog open={showProfileModal} onOpenChange={setShowProfileModalDebug}>
          <DialogContent 
            className="fixed left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] w-[90vw] h-[80vh] max-w-[400px] max-h-[600px] sm:w-[500px] sm:h-[700px] bg-white backdrop-blur-md border border-gray-200 shadow-2xl rounded-none sm:rounded-xl p-0 overflow-hidden"
            style={{
              position: 'fixed',
              left: '50%',
              top: '50%',
              transform: 'translate(-50%, -50%)',
              zIndex: 50
            }}
          >
            <VisuallyHidden>
              <DialogTitle>Profile of {selectedProfile.name}</DialogTitle>
              <DialogDescription>
                View profile images for {selectedProfile.name}, age {selectedProfile.age} from {selectedProfile.location}
              </DialogDescription>
            </VisuallyHidden>
            {/* Image Container */}
            <div className="relative w-full h-full">
              {/* Full Size Image */}
              {(() => {
                // Get images from images field
                const images = selectedProfile.images || [];
                const currentImage = images[activeImageIndex];
                
                // Handle both string and object image formats
                const imagePath = typeof currentImage === 'string' ? currentImage : (currentImage as any)?.url || '';
                const isBlurred = typeof currentImage === 'object' && (currentImage as any)?.isBlurred;
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const currentUser = JSON.parse(sessionStorage.getItem('user') || '{}');
                const profileId = selectedProfile?.id?.toString();
                const imageId = (currentImage as any)?._id?.toString() || `image_${activeImageIndex}`;
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏π‡∏õ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                const hasPaidForThisImage = currentUser.purchasedImages?.some((purchased: any) => 
                  purchased.profileId === profileId && purchased.imageId === imageId
                );
                
                // ‡∏£‡∏π‡∏õ‡∏à‡∏∞‡πÄ‡∏ö‡∏•‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠: ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏•‡∏≠ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ
                const finalIsBlurred = isBlurred && !hasPaidForThisImage;
                
                console.log('üîç Modal image blur check:', {
                  activeImageIndex,
                  imagePath,
                  isBlurred,
                  hasPaidForThisImage,
                  finalIsBlurred,
                  profileId: selectedProfile?.id,
                  imageId,
                  purchasedImages: currentUser.purchasedImages,
                  currentImage,
                  selectedProfile,
                  allImages: selectedProfile.images,
                  forceUpdate, // ‡πÄ‡∏û‡∏¥‡πà‡∏° forceUpdate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£ re-render
                  matchingPurchases: currentUser.purchasedImages?.filter((purchased: any) => 
                    purchased.profileId === profileId && purchased.imageId === imageId
                  )
                });
                
                if (images.length > 0 && imagePath && !imagePath.startsWith('data:image/svg+xml')) {
                  // Use getProfileImageUrl to ensure correct URL
                  const imageUrl = getProfileImageUrl(imagePath, selectedProfile.id?.toString());
                  return (
                    <div className="relative w-full h-full">
                      <img
                        src={imageUrl}
                        alt={selectedProfile.name}
                        className={`w-full h-full object-cover ${finalIsBlurred ? 'filter blur-lg' : ''}`}
                        style={{
                          ...(finalIsBlurred && { 
                            filter: 'blur(16px)',
                            transition: 'filter 0.3s ease'
                          })
                        }}
                        onError={(e) => {
                          console.error('‚ùå Profile modal image failed to load:', {
                            imageUrl: imageUrl,
                            originalImage: currentImage,
                            profileId: selectedProfile.id
                          });
                          (e.target as HTMLImageElement).style.display = 'none';
                        }}
                        onLoad={() => {
                          console.log('‚úÖ Profile modal image loaded successfully:', {
                            imageUrl: imageUrl,
                            originalImage: currentImage,
                            profileId: selectedProfile.id
                          });
                        }}
                      />
                      {/* Overlay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏ö‡∏•‡∏≠ */}
                      {finalIsBlurred && (
                        <div className="absolute inset-0 bg-black bg-opacity-30 flex flex-col items-center justify-center">
                          <div className="w-16 h-16 text-white opacity-60 mb-4">
                            <svg viewBox="0 0 24 24" fill="currentColor" className="w-full h-full">
                              <path d="M12 6c3.79 0 7.17 2.13 8.82 5.5-.59 1.22-1.42 2.27-2.41 3.12l1.41 1.41c1.39-1.23 2.49-2.77 3.18-4.53C21.27 7.11 17 4 12 4c-1.27 0-2.49.2-3.64.57l1.65 1.65C10.66 6.09 11.32 6 12 6zm-1.07 1.14L13 9.21c.57.25 1.03.71 1.28 1.28l2.07 2.07c.08-.34.14-.7.14-1.07C16.5 9.01 14.48 7 12 7c-.37 0-.72.05-1.07.14zM2.01 3.87l2.68 2.68C3.06 7.83 1.77 9.53 1 11.5 2.73 15.89 7 19 12 19c1.52 0 2.98-.29 4.32-.82l3.42 3.42 1.41-1.41L3.42 2.46 2.01 3.87zm7.5 7.5l2.61 2.61c-.04.01-.08.02-.12.02-1.38 0-2.5-1.12-2.5-2.5 0-.05.01-.08.01-.13zm-3.4-3.4l1.75 1.75c-.23.55-.36 1.15-.36 1.78 0 2.48 2.02 4.5 4.5 4.5.63 0 1.23-.13 1.77-.36l.98.98c-.88.24-1.8.38-2.75.38-3.79 0-7.17-2.13-8.82-5.5.7-1.43 1.72-2.61 2.93-3.53z"/>
                            </svg>
                          </div>
                          
                          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç */}
                          <button
                            onClick={(e) => {
                              e.preventDefault();
                              e.stopPropagation();
                              
                              const token = sessionStorage.getItem('token');
                              if (!token) {
                                showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
                                return;
                              }
                              
                              // Handle blur payment - ‡∏™‡πà‡∏á imageId ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á
                              const currentImage = images[activeImageIndex];
                              const currentImageId = (currentImage as any)?._id?.toString() || `image_${activeImageIndex}`;
                              const targetUserId = selectedProfile?.id?.toString() || (selectedProfile as any)?._id?.toString() || '';
                              
                              console.log('üîç Blur payment debug:', {
                                selectedProfile,
                                targetUserId,
                                currentImageId,
                                currentImage,
                                images: images.length
                              });
                              
                              if (!targetUserId) {
                                showWebappNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
                                return;
                              }
                              
                              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
                              if (!currentImage) {
                                showWebappNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠');
                                return;
                              }
                              
                              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏ö‡∏•‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                              const isImageBlurred = typeof currentImage === 'object' && (currentImage as any)?.isBlurred;
                              if (!isImageBlurred) {
                                showWebappNotification('‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏•‡∏≠');
                                return;
                              }
                              
                              console.log('‚úÖ Validation passed, proceeding with payment');
                              handleBlurPayment(targetUserId, selectedProfile?.name || '', currentImageId);
                            }}
                            className="bg-gradient-to-r from-yellow-400 to-yellow-600 hover:from-yellow-500 hover:to-yellow-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transform transition-all duration-200 hover:scale-105 flex items-center gap-2"
                          >
                            <span className="text-xl">üí∞</span>
                            <div className="text-center">
                              <div className="text-sm">‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ</div>
                              <div className="text-xs opacity-90">10,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç</div>
                            </div>
                          </button>
                          
                          <p className="text-white text-xs mt-2 opacity-80 text-center">
                            ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ ‚Ä¢ ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î
                          </p>
                        </div>
                      )}
                    </div>
                  );
                }
                return null;
              })()}
              {(() => {
                // Show fallback if no image is displayed
                const images = selectedProfile.images || [];
                const currentImage = images[activeImageIndex];
                const imagePath = typeof currentImage === 'string' ? currentImage : (currentImage as any)?.url || '';
                const hasValidImage = images.length > 0 && imagePath && !imagePath.startsWith('data:image/svg+xml');
                
                if (!hasValidImage) {
                  return (
                    /* Fallback when no image */
                    <div className="w-full h-full bg-gradient-to-br from-pink-500 to-violet-500 flex items-center justify-center">
                      <div className="text-center text-white">
                        <User className="h-24 w-24 mx-auto mb-4 opacity-80" />
                        <h3 className="text-2xl font-bold mb-2">{selectedProfile.name}</h3>
                        <p className="text-lg opacity-90">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</p>
                      </div>
                    </div>
                  );
                }
                return null;
              })()}
            </div>

            {/* Control Buttons - ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å image container */}
            <button
              onClick={() => {
                // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î modal ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
                if (preventModalClose) {
                  console.log('üîí Preventing modal close due to preventModalClose flag (X button)');
                  showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô');
                  return;
                }
                
                setShowProfileModalDebug(false);
                setModalAction(null);
                setShowProfileDetails(false);
                setProfileData(null);
                setProfileAlert(null);
              }}
              className="absolute top-3 right-3 sm:top-4 sm:right-4 z-30 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-full p-2 sm:p-3 transition-colors"
            >
              <X className="h-4 w-4 sm:h-5 sm:w-5" />
            </button>

            {/* Back Button (when showing profile details) */}
            {showProfileDetails && (
              <button
                onClick={() => {
                  setShowProfileDetails(false);
                  setProfileData(null);
                  setProfileAlert(null);
                }}
                className="absolute top-3 left-3 sm:top-4 sm:left-4 z-30 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-full p-2 sm:p-3 transition-colors"
              >
                <ArrowLeft className="h-4 w-4 sm:h-5 sm:w-5" />
              </button>
            )}
              
            {/* Fixed Profile Info Overlay - ‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Modal Container (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏†‡∏≤‡∏û) */}
            <div className="absolute bottom-0 left-0 right-0 h-48 sm:h-52 z-20 pointer-events-none">
                {/* Background overlay for better text visibility - ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå */}
                {!showProfileDetails && (
                  <div className="absolute inset-0 bg-gradient-to-t from-black/95 via-black/70 to-transparent"></div>
                )}
                
                {/* Content positioned at very bottom - ‡∏•‡πá‡∏≠‡∏Ñ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û */}
                <div className="absolute bottom-4 left-4 right-4 text-white pointer-events-auto">
                  {/* Alert Message */}
                  {profileAlert && (
                    <div className={`mb-2 sm:mb-3 md:mb-4 p-2 sm:p-3 rounded-lg flex items-center justify-between ${
                      profileAlert.type === 'error' ? 'bg-red-500/90 text-white' :
                      profileAlert.type === 'success' ? 'bg-green-500/90 text-white' :
                      'bg-yellow-500/90 text-white'
                    }`}>
                      <span className="text-xs sm:text-sm font-medium">{profileAlert.message}</span>
                      <button 
                        onClick={() => setProfileAlert(null)}
                        className="ml-1 sm:ml-2 text-white/80 hover:text-white"
                      >
                        <X className="h-3 w-3 sm:h-4 sm:w-4" />
                      </button>
                    </div>
                  )}
                  
                  {/* Profile Info - ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå */}
                  {!showProfileDetails && (
                    <>
                      <div className="flex justify-between items-end mb-1">
                        <div className="flex-1 min-w-0">
                          <h3 className="text-xl font-bold mb-1 text-white" style={{textShadow: '2px 2px 4px rgba(0,0,0,0.8), 0 0 8px rgba(0,0,0,0.6)'}}>{selectedProfile.name}, {selectedProfile.age}</h3>
                          <div className="flex items-center text-white text-base" style={{textShadow: '1px 1px 3px rgba(0,0,0,0.8), 0 0 6px rgba(0,0,0,0.6)'}}>
                            <MapPin className="h-5 w-5 mr-2" />
                            <span className="truncate">{selectedProfile.location}</span>
                            <span className="mx-2">‚Ä¢</span>
                            <div className="flex items-center">
                              {selectedProfile.membershipTier === 'platinum' && <Crown className="h-5 w-5 mr-2 text-purple-300" />}
                              {selectedProfile.membershipTier === 'diamond' && <Crown className="h-5 w-5 mr-2 text-blue-300" />}
                              {selectedProfile.membershipTier === 'gold' && <Crown className="h-5 w-5 mr-2 text-yellow-300" />}
                              {selectedProfile.membershipTier === 'silver' && <Crown className="h-5 w-5 mr-2 text-gray-300" />}
                              {selectedProfile.membershipTier === 'vip' && <Crown className="h-5 w-5 mr-2 text-pink-300" />}
                              {selectedProfile.membershipTier === 'vip1' && <Crown className="h-5 w-5 mr-2 text-orange-300" />}
                              {selectedProfile.membershipTier === 'vip2' && <Crown className="h-5 w-5 mr-2 text-red-300" />}
                              <span className="capitalize text-base">{selectedProfile.membershipTier || 'Member'}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      {/* Bio Section */}
                      {selectedProfile.bio && selectedProfile.bio !== 'No bio available' ? (
                        <div className="mb-1">
                          <h4 className="text-base font-semibold mb-1 text-white" style={{textShadow: '1px 1px 3px rgba(0,0,0,0.8), 0 0 6px rgba(0,0,0,0.6)'}}>‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô</h4>
                          <p className="text-base text-white leading-relaxed line-clamp-1" style={{textShadow: '1px 1px 3px rgba(0,0,0,0.8), 0 0 6px rgba(0,0,0,0.6)'}}>{selectedProfile.bio}</p>
                        </div>
                      ) : (
                        <div className="mb-1">
                          <h4 className="text-base font-semibold mb-1 text-white" style={{textShadow: '1px 1px 3px rgba(0,0,0,0.8), 0 0 6px rgba(0,0,0,0.6)'}}>‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô</h4>
                          <p className="text-base text-white leading-relaxed line-clamp-1" style={{textShadow: '1px 1px 3px rgba(0,0,0,0.8), 0 0 6px rgba(0,0,0,0.6)'}}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô</p>
                        </div>
                      )}
                      
                      {/* Interests Section */}
{/* Interests section hidden as requested */}
                    </>
                  )}
                  
                  
                  {/* Image Indicators */}
                  {(() => {
                    const images = selectedProfile.images || [];
                    return images.length > 1 && (
                      <div className="flex justify-center space-x-2 mb-1">
                        {images.map((_, index) => (
                          <button
                            key={index}
                            onClick={() => setActiveImageIndex(index)}
                            className={`w-3 h-3 rounded-full transition-all ${
                              index === activeImageIndex ? 'bg-white' : 'bg-white/50'
                            }`}
                          />
                        ))}
                      </div>
                    );
                  })()}
                  
                  {/* Action Icons - ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå */}
                  {!showProfileDetails && (
                    <div className="flex justify-center items-center gap-4 mt-4">
                      {/* Chat Icon */}
                      <button
                        className="w-12 h-12 rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transform hover:scale-110 transition-all duration-300 bg-blue-500 hover:bg-blue-600 text-white border border-blue-600"
                        onClick={() => {
                          console.log('üí¨ Start chat with:', selectedProfile.name);
                          
                          // ‡∏™‡∏£‡πâ‡∏≤‡∏á user object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö handleStartPrivateChat
                          const targetUser = createUserObject(selectedProfile);
                          handleStartPrivateChat(targetUser);
                        }}
                      >
                        <MessageCircle className="h-6 w-6" />
                      </button>
                      
                      {/* Heart Icon */}
                      <button
                        className={`w-12 h-12 rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transform hover:scale-110 transition-all duration-300 ${
                          likedProfiles.has(selectedProfile.id?.toString() || '')
                            ? 'bg-red-500 text-white scale-110 border border-red-600'
                            : 'bg-pink-500 hover:bg-pink-600 text-white border border-pink-600'
                        }`}
                        onClick={() => {
                          console.log('üíñ Like profile:', selectedProfile.name);
                          const profileId = selectedProfile.id?.toString() || '';
                          handleProfileLike(profileId);
                        }}
                      >
                        <Heart className={`h-6 w-6 ${
                          likedProfiles.has(selectedProfile.id?.toString() || '') ? 'fill-current' : ''
                        }`} />
                      </button>
                      
                      {/* Profile Details Icon */}
                      <button
                        className="w-12 h-12 rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transform hover:scale-110 transition-all duration-300 bg-purple-500 hover:bg-purple-600 text-white border border-purple-600"
                        onClick={async () => {
                          console.log('üë§ View profile details:', selectedProfile.name);
                          
                          const token = sessionStorage.getItem('token');
                          if (!token) {
                            showWebappNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô')
                            return
                          }
                          
                          try {
                            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ï‡πá‡∏°
                            const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
                            const response = await fetch(`${baseUrl}/api/profile/${selectedProfile.id}`, {
                              headers: {
                                'Authorization': `Bearer ${token}`,
                                'Content-Type': 'application/json'
                              }
                            });
                            
                            if (!response.ok) {
                              throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
                            }
                            
                            const result = await response.json();
                            if (!result.success) {
                              throw new Error(result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
                            }
                            
                            const fullProfile = result.data.profile;
                            
                            // ‡∏™‡∏£‡πâ‡∏≤‡∏á profile data object ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
                            const profileData = {
                              id: fullProfile._id,
                              name: fullProfile.nickname || `${fullProfile.firstName || ''} ${fullProfile.lastName || ''}`.trim() || selectedProfile.name,
                              age: fullProfile.age || selectedProfile.age,
                              location: fullProfile.location || selectedProfile.location,
                              bio: fullProfile.bio || selectedProfile.bio,
                              interests: Array.isArray(fullProfile.interests)
                                ? fullProfile.interests.map((it: any) => it?.category || it?.name || `${it}`).filter(Boolean)
                                : selectedProfile.interests || [],
                              images: (fullProfile.profileImages || []).filter(img => 
                                typeof img === 'string' && !img.startsWith('data:image/svg+xml')
                              ).map(img => 
                                getProfileImageUrl(img, fullProfile._id)
                              ),
                              verified: fullProfile.isVerified || false,
                              online: fullProfile.isOnline || false,
                              lastActive: fullProfile.lastActive,
                              membershipTier: fullProfile.membership?.tier || 'member',
                              // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ï‡πá‡∏°
                              username: fullProfile.username || '',
                              firstName: fullProfile.firstName || '',
                              lastName: fullProfile.lastName || '',
                              email: fullProfile.email || '',
                              phone: fullProfile.phone || '',
                              birthDate: fullProfile.birthDate || '',
                              gender: fullProfile.gender || '',
                              lookingFor: fullProfile.lookingFor || '',
                              education: fullProfile.education || '',
                              occupation: fullProfile.occupation || '',
                              height: fullProfile.height || '',
                              weight: fullProfile.weight || '',
                              relationshipStatus: fullProfile.relationshipStatus || '',
                              smoking: fullProfile.smoking || '',
                              drinking: fullProfile.drinking || '',
                              exercise: fullProfile.exercise || '',
                              languages: fullProfile.languages || [],
                              hobbies: fullProfile.hobbies || [],
                              profileVideos: fullProfile.profileVideos || [],
                              religion: fullProfile.religion || '',
                              pets: fullProfile.pets || '',
                              children: fullProfile.children || '',
                              wantChildren: fullProfile.wantChildren || ''
                            };
                            
                            console.log('üéØ Modal: Opening full profile modal with complete data:', profileData);
                            
                            // ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
                            setShowProfileModalDebug(false);
                            
                            // ‡πÄ‡∏õ‡∏¥‡∏î profile modal ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏° (‡∏£‡∏ß‡∏° blur information)
                            setTimeout(() => {
                              openProfileModal(profileData, true);
                            }, 100);
                            
                          } catch (error) {
                            console.error('Error loading full profile:', error);
                            showWebappNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
                          }
                        }}
                      >
                        <User className="h-6 w-6" />
                      </button>
                    </div>
                  )}
                  
                  {/* Action Result Display */}
                  {modalAction && !isStartingChat && (
                    <div className="mt-2 mb-2 p-3 bg-black/40 backdrop-blur-sm rounded-xl border border-white/30">
                      {modalAction === 'like' && (
                        <div className="text-center text-white">
                          <Heart className="h-5 w-5 mx-auto mb-2 text-red-400 fill-current" />
                          <p className="text-base font-medium">‡∏™‡πà‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÉ‡∏´‡πâ {selectedProfile.name}</p>
                          <p className="text-sm text-white/80 mt-1">üíñ ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô!</p>
                        </div>
                      )}
                      {modalAction === 'profile' && (
                        <div className="text-center text-white">
                          <User className="h-5 w-5 mx-auto mb-2 text-blue-400" />
                          <p className="text-base font-medium">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î {selectedProfile.name}</p>
                          <p className="text-sm text-white/80 mt-1">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå...</p>
                        </div>
                      )}
                    </div>
                  )}
                  
                  {/* Chat Countdown Display */}
                  {isStartingChat && chatCountdown !== null && (
                    <div className="mt-2 mb-2 p-3 bg-black/40 backdrop-blur-sm rounded-xl border border-white/30">
                      <div className="text-center text-white">
                        <MessageCircle className="h-5 w-5 mx-auto mb-2 text-pink-400" />
                        <p className="text-base font-medium">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö {selectedProfile.name}</p>
                        <p className="text-sm text-white/80 mt-1">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏ä‡∏ó... {chatCountdown}</p>
                      </div>
                    </div>
                  )}
                </div>
            </div>
              
              {/* Full Profile Details View */}
              {showProfileDetails && (
                <div className="absolute inset-0 bg-gradient-to-br from-pink-50/95 via-violet-50/95 to-blue-50/95 backdrop-blur-md overflow-y-auto">
                  {/* Background Elements */}
                  <div className="absolute inset-0 pointer-events-none">
                    <div className="absolute top-10 left-4 w-48 h-48 sm:top-20 sm:left-10 sm:w-96 sm:h-96 bg-gradient-to-br from-pink-300/20 to-violet-300/20 rounded-full blur-3xl animate-pulse"></div>
                    <div className="absolute top-40 right-8 w-40 h-40 sm:top-60 sm:right-20 sm:w-80 sm:h-80 bg-gradient-to-br from-blue-300/15 to-cyan-300/15 rounded-full blur-3xl animate-pulse delay-1000"></div>
                    <div className="absolute bottom-20 left-1/4 w-36 h-36 sm:bottom-32 sm:left-1/4 sm:w-72 sm:h-72 bg-gradient-to-br from-orange-300/20 to-pink-300/20 rounded-full blur-3xl animate-pulse delay-2000"></div>
                    <div className="absolute bottom-40 right-1/3 w-32 h-32 sm:bottom-60 sm:right-1/3 sm:w-64 sm:h-64 bg-gradient-to-br from-purple-300/25 to-indigo-300/25 rounded-full blur-3xl animate-pulse delay-3000"></div>
                  </div>
                  {/* Floating Elements */}
                  <div className="absolute inset-0 pointer-events-none overflow-hidden">
                    <div className="absolute top-1/4 left-1/4 text-2xl sm:text-4xl opacity-20 animate-float">‚ú®</div>
                    <div className="absolute top-1/3 right-1/4 text-3xl sm:text-5xl opacity-15 animate-float delay-1000">üí´</div>
                    <div className="absolute bottom-1/3 left-1/3 text-4xl sm:text-6xl opacity-10 animate-float delay-2000">üåü</div>
                    <div className="absolute bottom-1/4 right-1/3 text-2xl sm:text-3xl opacity-25 animate-float delay-3000">üíñ</div>
                    <div className="absolute top-1/2 left-1/6 text-2xl sm:text-4xl opacity-20 animate-float delay-4000">üéâ</div>
                    <div className="absolute top-3/4 right-1/6 text-3xl sm:text-5xl opacity-15 animate-float delay-5000">üåà</div>
                  </div>
                  
                  <div className="relative p-6 sm:p-8 text-gray-800 space-y-6">
                    {/* Loading State */}
                    {false && (
                      <div className="flex items-center justify-center py-12">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-pink-500"></div>
                        <span className="ml-3 text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå...</span>
                      </div>
                    )}
                    
                    {/* Profile Data */}
                    {(profileData || selectedProfile) && (() => {
                      // Create a unified profile object with all available data
                      const unifiedProfile = {
                        ...selectedProfile,
                        ...profileData,
                        // Ensure images field is available - prioritize profileData
                        profileImages: profileData?.profileImages || profileData?.images || selectedProfile?.images || [],
                        images: profileData?.images || profileData?.profileImages || selectedProfile?.images || [],
                        // Ensure basic fields are always available
                        name: profileData?.name || selectedProfile?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
                        age: profileData?.age || selectedProfile?.age || null,
                        location: profileData?.location || selectedProfile?.location || null,
                        bio: profileData?.bio || selectedProfile?.bio || null,
                        membership: profileData?.membership || selectedProfile?.membership || { tier: 'member' }
                      };
                      
                      
                      return (
                      <>
                        {/* Profile Header */}
                        <div className="flex flex-col sm:flex-row items-start gap-4">
                          <div className="relative">
                            <div className="w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex items-center justify-center text-white text-2xl font-bold overflow-hidden">
                              {(() => {
                                // ‡πÉ‡∏ä‡πâ utility function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á profile image URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                                const profileImageUrl = getMainProfileImage(
                                  unifiedProfile.profileImages || [], 
                                  unifiedProfile.mainProfileImageIndex, 
                                  unifiedProfile.id
                                )
                                
                                return profileImageUrl ? (
                                  <img 
                                    src={profileImageUrl}
                                    alt="Profile"
                                    className="w-full h-full rounded-full object-cover object-center"
                                    style={{ objectFit: 'cover', width: '100%', height: '100%' }}
                                    onError={(e) => {
                                      console.error('‚ùå Profile modal image failed to load:', {
                                        imageUrl: profileImageUrl,
                                        originalImage: unifiedProfile.profileImages[0],
                                        profileId: unifiedProfile.id
                                      });
                                      (e.target as HTMLImageElement).style.display = 'none';
                                      ((e.target as HTMLImageElement).nextSibling as HTMLElement).style.display = 'flex';
                                    }}
                                    onLoad={() => {
                                      console.log('‚úÖ Profile modal image loaded successfully:', {
                                        imageUrl: profileImageUrl,
                                        originalImage: unifiedProfile.profileImages[0],
                                        profileId: unifiedProfile.id
                                      });
                                    }}
                                  />
                                ) : null
                              })()}
                              <div className={`absolute inset-0 w-full h-full rounded-full bg-gradient-to-r from-pink-500 to-violet-500 flex items-center justify-center text-white text-2xl font-bold ${(() => {
                                const profileImageUrl = getMainProfileImage(
                                  unifiedProfile.profileImages || [], 
                                  unifiedProfile.mainProfileImageIndex, 
                                  unifiedProfile.id
                                )
                                return profileImageUrl && !profileImageUrl.startsWith('data:image/svg+xml') ? 'hidden' : ''
                              })()}`}>
                                <User className="h-10 w-10 sm:h-12 sm:w-12" />
                              </div>
                            </div>
                            {unifiedProfile.membership?.tier && unifiedProfile.membership.tier !== 'member' && (
                              <div className="absolute -bottom-1 -right-1 w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white text-xs shadow-lg">
                                <Crown className="h-4 w-4" />
                              </div>
                            )}
                          </div>
                          
                          <div className="flex-1">
                            <div className="flex flex-col sm:flex-row items-start sm:items-center space-y-1 sm:space-y-0 sm:space-x-2 mb-1">
                              <h1 className="text-xl sm:text-2xl font-bold text-gray-800">
                                {unifiedProfile.nickname || unifiedProfile.name || `${unifiedProfile.firstName || ''} ${unifiedProfile.lastName || ''}`.trim() || (unifiedProfile as any).username || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}
                              </h1>
                              {unifiedProfile.membership?.tier && (
                                <Badge className={`bg-gradient-to-r ${
                                  unifiedProfile.membership.tier === 'platinum' ? 'from-purple-500 to-pink-500' :
                                  unifiedProfile.membership.tier === 'diamond' ? 'from-blue-500 to-cyan-500' :
                                  unifiedProfile.membership.tier === 'vip2' ? 'from-red-500 to-orange-500' :
                                  unifiedProfile.membership.tier === 'vip1' ? 'from-orange-500 to-yellow-500' :
                                  unifiedProfile.membership.tier === 'vip' ? 'from-purple-400 to-pink-400' :
                                  unifiedProfile.membership.tier === 'gold' ? 'from-yellow-500 to-amber-500' :
                                  unifiedProfile.membership.tier === 'silver' ? 'from-gray-400 to-slate-400' :
                                  'from-gray-300 to-gray-400'
                                } text-white text-xs`}>
                                  <Crown className="h-3 w-3 mr-1" />
                                  {unifiedProfile.membership.tier === 'platinum' ? 'PLATINUM' :
                                   unifiedProfile.membership.tier === 'diamond' ? 'DIAMOND' :
                                   unifiedProfile.membership.tier === 'vip2' ? 'VIP2' :
                                   unifiedProfile.membership.tier === 'vip1' ? 'VIP1' :
                                   unifiedProfile.membership.tier === 'vip' ? 'VIP' :
                                   unifiedProfile.membership.tier === 'gold' ? 'GOLD' :
                                   unifiedProfile.membership.tier === 'silver' ? 'SILVER' :
                                   'MEMBER'}
                                </Badge>
                              )}
                            </div>
                            
                            <div className="flex flex-col sm:flex-row items-start sm:items-center space-y-1 sm:space-y-0 sm:space-x-4 text-sm text-gray-600">
                              {unifiedProfile.location && (
                                <span className="flex items-center">
                                  <MapPin className="h-4 w-4 mr-1" />
                                  {unifiedProfile.location}
                                </span>
                              )}
                            </div>
                          </div>
                        </div>
                    
                        {/* Bio Section */}
                        {unifiedProfile.bio && (
                          <div className="space-y-2">
                            <h3 className="text-lg font-semibold text-gray-800">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô</h3>
                            <p className="text-gray-600 leading-relaxed">{unifiedProfile.bio}</p>
                          </div>
                        )}
                        
                        {/* Interests Section */}
                        {unifiedProfile.interests && unifiedProfile.interests.length > 0 && (
                          <div className="space-y-2">
                            <h3 className="text-lg font-semibold text-gray-800">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à</h3>
                            <div className="flex flex-wrap gap-2">
                              {formatInterests(unifiedProfile.interests).map((interest: string, index: number) => (
                                <Badge key={index} variant="secondary" className="px-3 py-1 bg-white/80 text-gray-700 border-gray-300 shadow-sm">
                                  {interest}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                        
                        {/* Images Section */}
                        {unifiedProfile.profileImages && unifiedProfile.profileImages.length > 1 && !unifiedProfile.profileImages.every(img => typeof img === 'string' && img.startsWith('data:image/svg+xml')) && (
                          <div className="space-y-2">
                            <h3 className="text-lg font-semibold text-gray-800">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</h3>
                            <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
                              {unifiedProfile.profileImages.slice(1).filter(img => typeof img === 'string' && !img.startsWith('data:image/svg+xml')).map((image: string, index: number) => {
                                // ‡∏™‡∏£‡πâ‡∏≤‡∏á image URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                                let imageUrl = image
                                if (!image.startsWith('http') && !image.startsWith('data:')) {
                                  // const baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000'
                                  imageUrl = getProfileImageUrl(image, unifiedProfile.id)
                                }
                                
                                return (
                                <div key={`${unifiedProfile.id}-${index}`} className="aspect-square rounded-lg overflow-hidden shadow-lg">
                                  <img 
                                    src={imageUrl}
                                    alt={`${unifiedProfile.nickname || unifiedProfile.firstName} ${index + 2}`}
                                    className="w-full h-full object-cover"
                                    onError={(e) => {
                                      console.error('‚ùå Profile modal gallery image failed to load:', {
                                        imageUrl: imageUrl,
                                        originalImage: image,
                                        profileId: unifiedProfile.id
                                      });
                                      (e.target as HTMLImageElement).style.display = 'none';
                                    }}
                                    onLoad={() => {
                                      console.log('‚úÖ Profile modal gallery image loaded successfully:', {
                                        imageUrl: imageUrl,
                                        originalImage: image,
                                        profileId: unifiedProfile.id
                                      });
                                    }}
                                  />
                                </div>
                                )
                              })}
                            </div>
                          </div>
                        )}
                        
                        {/* Basic Information - Always show */}
                        <div className="space-y-3">
                          <h3 className="text-lg font-semibold text-gray-800 border-b border-gray-200 pb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</h3>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                              <Calendar className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                              <div className="min-w-0 flex-1">
                                <span className="text-sm font-medium text-gray-700">‡∏≠‡∏≤‡∏¢‡∏∏</span>
                                <p className="text-sm text-gray-600 mt-1">{unifiedProfile.age ? `${unifiedProfile.age} ‡∏õ‡∏µ` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                              </div>
                            </div>
                            <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                              <MapPin className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                              <div className="min-w-0 flex-1">
                                <span className="text-sm font-medium text-gray-700">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</span>
                                <p className="text-sm text-gray-600 mt-1">{unifiedProfile.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                              </div>
                            </div>
                            <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                              <div className={`h-5 w-5 rounded-full mt-0.5 flex-shrink-0 ${unifiedProfile.online ? 'bg-green-500' : 'bg-red-500'}`}></div>
                              <div className="min-w-0 flex-1">
                                <span className="text-sm font-medium text-gray-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</span>
                                <p className="text-sm text-gray-600 mt-1">{unifiedProfile.online ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}</p>
                              </div>
                            </div>
                            <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                              <User className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                              <div className="min-w-0 flex-1">
                                <span className="text-sm font-medium text-gray-700">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</span>
                                <p className="text-sm text-gray-600 mt-1">{unifiedProfile.membership?.tier || 'Member'}</p>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        {/* Additional Profile Information */}
                        <div className="space-y-6">
                          {/* Personal Information */}
                          <div className="space-y-3">
                            <h3 className="text-lg font-semibold text-gray-800 border-b border-gray-200 pb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h3>
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <User className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡πÄ‡∏û‡∏®</span>
                                  <p className="text-sm text-gray-600 mt-1">{translateGender(unifiedProfile.gender)}</p>
                                </div>
                              </div>
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <GraduationCap className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</span>
                                  <p className="text-sm text-gray-600 mt-1">{safeDisplay(unifiedProfile.education) || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <Briefcase className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏≠‡∏≤‡∏ä‡∏µ‡∏û</span>
                                  <p className="text-sm text-gray-600 mt-1">{safeDisplay(unifiedProfile.occupation) || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <Church className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏®‡∏≤‡∏™‡∏ô‡∏≤</span>
                                  <p className="text-sm text-gray-600 mt-1">{safeDisplay(unifiedProfile.religion) || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <Languages className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏†‡∏≤‡∏©‡∏≤</span>
                                  <p className="text-sm text-gray-600 mt-1">{unifiedProfile.languages ? (Array.isArray(unifiedProfile.languages) ? unifiedProfile.languages.join(', ') : safeDisplay(unifiedProfile.languages)) : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                            </div>
                          </div>
                          
                          {/* Lifestyle Information */}
                          <div className="space-y-3">
                            <h3 className="text-lg font-semibold text-gray-800 border-b border-gray-200 pb-2">‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå</h3>
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <Cigarette className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà</span>
                                  <p className="text-sm text-gray-600 mt-1">{safeDisplay(unifiedProfile.smoking) || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <Wine className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå</span>
                                  <p className="text-sm text-gray-600 mt-1">{safeDisplay(unifiedProfile.drinking) || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <Dumbbell className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</span>
                                  <p className="text-sm text-gray-600 mt-1">{safeDisplay(unifiedProfile.exercise) || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <Utensils className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏≠‡∏≤‡∏´‡∏≤‡∏£</span>
                                  <p className="text-sm text-gray-600 mt-1">{safeDisplay(unifiedProfile.diet) || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                            </div>
                          </div>
                          
                          {/* Additional Information */}
                          <div className="space-y-3">
                            <h3 className="text-lg font-semibold text-gray-800 border-b border-gray-200 pb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h3>
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <Heart className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</span>
                                  <p className="text-sm text-gray-600 mt-1">{translateRelationship(safeDisplay(unifiedProfile.lookingFor))}</p>
                                </div>
                              </div>
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <PawPrint className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</span>
                                  <p className="text-sm text-gray-600 mt-1">{safeDisplay(unifiedProfile.pets) || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <Building className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢</span>
                                  <p className="text-sm text-gray-600 mt-1">{safeDisplay(unifiedProfile.livingSituation) || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                              <div className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                <Baby className="h-5 w-5 text-gray-500 mt-0.5 flex-shrink-0" />
                                <div className="min-w-0 flex-1">
                                  <span className="text-sm font-medium text-gray-700">‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏•‡∏π‡∏Å</span>
                                  <p className="text-sm text-gray-600 mt-1">{safeDisplay(unifiedProfile.wantChildren) || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </>
                      )})()}
                    
                    {/* No Data State */}
                    {!(profileData || selectedProfile) && (
                      <div className="text-center py-12">
                        <User className="h-16 w-16 mx-auto text-gray-400 mb-4" />
                        <p className="text-gray-600">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ</p>
                      </div>
                    )}
                    
                    
                  </div>
                </div>
              )}
          </DialogContent>
        </Dialog>
      )}
      {/* Login Modal */}
      <LoginModal 
        isOpen={showLoginDialog}
        onClose={() => setShowLoginDialog(false)}
        onLoginSuccess={handleLoginSuccess}
      />
      {/* Idle Warning Modal */}
      <IdleWarningModal 
        isOpen={showIdleWarning}
        onDismiss={dismissIdleWarning}
        onLogout={logout}
      />
      {/* Create Private Room Modal */}
      <CreatePrivateRoomModal
        isOpen={showCreateRoomModal}
        onClose={() => setShowCreateRoomModal(false)}
        onCreateRoom={handleCreatePrivateRoom}
        currentUser={user}
      />
      {/* New Private Chat Modal */}
      {user && (
        <NewPrivateChatModal
          isOpen={showNewPrivateChatModal}
          onClose={() => setShowNewPrivateChatModal(false)}
          currentUser={user}
          onStartChat={handleStartPrivateChat}
          existingChats={privateChats}
        />
      )}

      {/* Payment Confirmation Modal */}
      {showPaymentConfirmation && paymentDetails && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4" 
          style={{ zIndex: 100 }}
          onClick={(e) => {
            // ‡∏Å‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î modal
            if (e.target === e.currentTarget) {
              cancelBlurPayment();
            }
          }}
        >
          <div 
            className="bg-white rounded-2xl shadow-2xl max-w-md w-full mx-4 overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div className="bg-gradient-to-r from-yellow-400 to-orange-500 px-6 py-4">
              <div className="flex items-center justify-center text-white">
                <div className="text-2xl mr-3">üí∞</div>
                <h3 className="text-xl font-bold">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç</h3>
              </div>
            </div>

            {/* Content */}
            <div className="p-6">
              <div className="text-center mb-6">
                <div className="text-lg font-semibold text-gray-800 mb-2">
                  ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏π‡∏õ‡πÄ‡∏ö‡∏•‡∏≠‡∏Ç‡∏≠‡∏á
                </div>
                <div className="text-xl font-bold text-pink-600 mb-4">
                  {paymentDetails.targetUserName}
                </div>
                
                <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢:</span>
                    <span className="font-bold text-red-600 text-lg">10,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</span>
                    <span className="font-semibold text-green-600">
                      {paymentDetails.currentCoins.toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
                    </span>
                  </div>
                  <div className="border-t pt-3">
                    <div className="flex justify-between items-center">
                      <span className="text-gray-600">‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏´‡∏•‡∏±‡∏á‡∏à‡πà‡∏≤‡∏¢:</span>
                      <span className="font-bold text-blue-600 text-lg">
                        {(paymentDetails.currentCoins - 10000).toLocaleString()} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
                      </span>
                    </div>
                  </div>
                </div>

                <div className="mt-4 text-sm text-gray-500 bg-blue-50 p-3 rounded-lg">
                  <div className="flex items-center justify-center mb-1">
                    <span className="text-blue-600 mr-1">‚ÑπÔ∏è</span>
                    <span className="font-medium">‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ</span>
                  </div>
                  <div className="text-xs">
                    ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î ‡∏£‡∏π‡∏õ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
                  </div>
                </div>
              </div>

              {/* Buttons */}
              <div className="flex gap-3">
                <button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üî¥ Cancel button clicked');
                    cancelBlurPayment();
                  }}
                  onMouseDown={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üî¥ Cancel button mousedown');
                  }}
                  onTouchStart={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üî¥ Cancel button touchstart');
                  }}
                  className="flex-1 px-4 py-3 bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium rounded-lg transition-colors duration-200 cursor-pointer relative"
                  style={{ pointerEvents: 'auto', zIndex: 1000 }}
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üü¢ Confirm button clicked');
                    // Throttle the click handler
                    if (Date.now() - (window.lastBlurClickTime || 0) < 500) {
                      console.log('üö´ Blur payment click throttled');
                      return;
                    }
                    window.lastBlurClickTime = Date.now();
                    confirmBlurPayment();
                  }}
                  onMouseDown={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üü¢ Confirm button mousedown');
                  }}
                  onTouchStart={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üü¢ Confirm button touchstart');
                  }}
                  className="flex-1 px-4 py-3 bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-white font-bold rounded-lg transition-all duration-200 transform hover:scale-[1.02] shadow-lg cursor-pointer relative"
                  style={{ pointerEvents: 'auto', zIndex: 1000 }}
                >
                  ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡πà‡∏≤‡∏¢
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Toast Container */}
      <ToastContainer />
      
    </div>
  )
}

// Wrapper component ‡∏ó‡∏µ‡πà‡∏°‡∏µ DataCacheProvider
const AppWithProviders = () => {
  return (
    <ToastProvider>
      <DataCacheProvider>
        <App />
      </DataCacheProvider>
    </ToastProvider>
  );
};

export default AppWithProviders
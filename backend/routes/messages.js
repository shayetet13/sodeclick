const express = require('express');
const router = express.Router();
const Message = require('../models/Message');
const ChatRoom = require('../models/ChatRoom');
const User = require('../models/User');
const mongoose = require('mongoose');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { auth } = require('../middleware/auth');
const { getSocketInstance } = require('../socket'); // ‡πÄ‡∏û‡∏¥‡πà‡∏° Socket.IO

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadPath = path.join(__dirname, '../uploads/messages');
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    cb(null, uploadPath);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB limit
  },
  fileFilter: function (req, file, cb) {
    const allowedTypes = /jpeg|jpg|png|gif|mp4|mov|avi|mp3|wav|pdf|doc|docx/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Invalid file type'));
    }
  }
});

// GET /api/messages/:roomId - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
router.get('/:roomId', async (req, res) => {
  try {
  const { roomId } = req.params;
  const { page = 1, limit = 30, userId } = req.query; // limit default 30 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö private chat ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ChatRoom
    if (roomId.startsWith('private_')) {
      console.log('üîí Fetching messages for private chat:', roomId);
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏´‡∏°‡πà -> ‡πÄ‡∏Å‡πà‡∏≤)
      const messages = await Message.find({ chatRoom: roomId })
        .populate('sender', 'username displayName membership membershipTier profileImages')
        .populate('replyTo', 'content sender')
        .sort({ createdAt: -1 }) // ‡πÉ‡∏´‡∏°‡πà -> ‡πÄ‡∏Å‡πà‡∏≤
        .limit(parseInt(limit));
      // reverse ‡∏ó‡∏µ‡πà backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ frontend ‡πÑ‡∏î‡πâ array ‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤ -> ‡πÉ‡∏´‡∏°‡πà
      const orderedMessages = [...messages].reverse();
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô react ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const messagesWithUserReactions = orderedMessages.map(message => {
        const messageObj = message.toObject();
        if (userId) {
          messageObj.userReaction = message.getUserReactionType(userId);
          messageObj.hasUserReacted = message.hasUserReacted(userId);
        }
        return messageObj;
      });
      res.json({
        success: true,
        data: {
          messages: messagesWithUserReactions,
          pagination: {
            current: parseInt(page),
            limit: parseInt(limit),
            hasMore: messages.length === parseInt(limit)
          }
        }
      });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ChatRoom ‡∏õ‡∏Å‡∏ï‡∏¥)
    const chatRoom = await ChatRoom.findById(roomId);
    if (!chatRoom) {
      return res.status(404).json({
        success: false,
        message: 'Chat room not found'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞)
    if (userId && chatRoom.type === 'private' && !chatRoom.isMember(userId)) {
      return res.status(403).json({
        success: false,
        message: 'You are not a member of this private chat room'
      });
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (userId && chatRoom.type === 'public' && !chatRoom.isMember(userId)) {
      chatRoom.addMember(userId);
      await chatRoom.save();
    }

    const messages = await Message.getMessagesInRoom(roomId, parseInt(page), parseInt(limit));
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô react ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const messagesWithUserReactions = messages.map(message => {
      const messageObj = message.toObject();
      if (userId) {
        messageObj.userReaction = message.getUserReactionType(userId);
        messageObj.hasUserReacted = message.hasUserReacted(userId);
      }
      return messageObj;
    });

    res.json({
      success: true,
      data: {
        messages: messagesWithUserReactions.reverse(), // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
        pagination: {
          current: parseInt(page),
          limit: parseInt(limit),
          hasMore: messages.length === parseInt(limit)
        }
      }
    });

  } catch (error) {
    console.error('Error fetching messages:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch messages',
      error: error.message
    });
  }
});

// POST /api/messages - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
router.post('/', upload.array('attachments', 5), async (req, res) => {
  try {
    const { content, senderId, chatRoomId, messageType = 'text', replyToId } = req.body;

    if (!senderId || !chatRoomId) {
      return res.status(400).json({
        success: false,
        message: 'Sender ID and Chat Room ID are required'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const sender = await User.findById(senderId);
    if (!sender) {
      return res.status(404).json({
        success: false,
        message: 'Sender not found'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô private chat ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let chatRoom = null;
    if (chatRoomId.startsWith('private_')) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö private chat ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ChatRoom
      console.log('üîí Processing private chat message:', chatRoomId);
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ChatRoom ‡∏õ‡∏Å‡∏ï‡∏¥
      chatRoom = await ChatRoom.findById(chatRoomId);
      if (!chatRoom) {
        return res.status(404).json({
          success: false,
          message: 'Chat room not found'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!chatRoom.isMember(senderId)) {
        return res.status(403).json({
          success: false,
          message: 'You are not a member of this chat room'
        });
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° membership
    sender.resetDailyUsage();
    if (!sender.canPerformAction('chat')) {
      const limits = sender.getMembershipLimits();
      return res.status(403).json({
        success: false,
        message: `Daily chat limit reached. Your limit: ${limits.dailyChats} messages per day`,
        currentUsage: sender.dailyUsage.chatCount,
        limit: limits.dailyChats
      });
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
    let attachments = [];
    if (req.files && req.files.length > 0) {
      attachments = req.files.map(file => ({
        type: file.mimetype.startsWith('image/') ? 'image' : 
              file.mimetype.startsWith('video/') ? 'video' :
              file.mimetype.startsWith('audio/') ? 'audio' : 'file',
        url: `/uploads/messages/${file.filename}`,
        filename: file.originalname,
        size: file.size,
        mimeType: file.mimetype
      }));
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    const message = new Message({
      content: content || '',
      sender: senderId,
      chatRoom: chatRoomId,
      messageType,
      attachments,
      replyTo: replyToId || null
    });

    await message.save();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï lastActive ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    await User.findByIdAndUpdate(userId, {
      lastActive: new Date()
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    sender.dailyUsage.chatCount += 1;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ChatRoom ‡∏õ‡∏Å‡∏ï‡∏¥)
    if (chatRoom) {
      chatRoom.stats.totalMessages += 1;
      chatRoom.lastActivity = new Date();
      await chatRoom.save();
    }

    await sender.save();

    // Populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    await message.populate([
      { path: 'sender', select: 'username displayName membership membershipTier profileImages mainProfileImageIndex' },
      { path: 'replyTo', select: 'content sender', populate: { path: 'sender', select: 'username displayName' } }
    ]);

    // üöÄ Broadcast ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô Socket.IO ‡πÑ‡∏õ‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
    try {
      const io = getSocketInstance();
      if (io) {
        console.log('üì§ [messages.js] Broadcasting message to room:', chatRoomId);
        console.log('üì§ [messages.js] Message ID:', message._id);
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
        io.to(chatRoomId).emit('new-message', message);
        
        // Log ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
        const roomSize = io.sockets.adapter.rooms.get(chatRoomId)?.size || 0;
        console.log('‚úÖ [messages.js] Broadcasted to', roomSize, 'client(s) in room', chatRoomId);
      } else {
        console.warn('‚ö†Ô∏è [messages.js] Socket.IO instance not available');
      }
    } catch (socketError) {
      console.error('‚ùå [messages.js] Error broadcasting message:', socketError);
      // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ socket error ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö API
    }

    res.status(201).json({
      success: true,
      message: 'Message sent successfully',
      data: message
    });

  } catch (error) {
    console.error('Error sending message:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to send message',
      error: error.message
    });
  }
});

// POST /api/messages/:messageId/react - ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö reaction
router.post('/:messageId/react', async (req, res) => {
  try {
    const { messageId } = req.params;
    const { userId, reactionType = 'heart' } = req.body;

    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'User ID is required'
      });
    }

    const message = await Message.findById(messageId);
    if (!message) {
      return res.status(404).json({
        success: false,
        message: 'Message not found'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const chatRoom = await ChatRoom.findById(message.chatRoom);
    if (!chatRoom.isMember(userId)) {
      return res.status(403).json({
        success: false,
        message: 'You are not a member of this chat room'
      });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö reaction
    const hadReaction = message.hasUserReacted(userId);
    const previousReactionType = message.getUserReactionType(userId);
    
    message.addReaction(userId, reactionType);
    await message.save();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    const hasReactionNow = message.hasUserReacted(userId);
    const currentReactionType = message.getUserReactionType(userId);

    let action = 'added';
    if (hadReaction && !hasReactionNow) {
      action = 'removed';
    } else if (hadReaction && hasReactionNow && previousReactionType !== currentReactionType) {
      action = 'changed';
    }

    // üöÄ Broadcast reaction update ‡∏ú‡πà‡∏≤‡∏ô Socket.IO
    try {
      const io = getSocketInstance();
      if (io) {
        console.log('üíñ [messages.js] Broadcasting reaction update for message:', messageId);
        io.to(message.chatRoom.toString()).emit('message-reaction-updated', {
          messageId: message._id,
          userId,
          reactionType: currentReactionType,
          action: hasReactionNow ? action : 'removed',
          stats: message.stats
        });
        console.log('‚úÖ [messages.js] Reaction broadcasted');
      }
    } catch (socketError) {
      console.error('‚ùå [messages.js] Error broadcasting reaction:', socketError);
    }

    res.json({
      success: true,
      message: `Reaction ${action} successfully`,
      data: {
        messageId: message._id,
        action,
        reactionType: currentReactionType,
        hasReaction: hasReactionNow,
        stats: message.stats
      }
    });

  } catch (error) {
    console.error('Error reacting to message:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to react to message',
      error: error.message
    });
  }
});

// PUT /api/messages/:messageId - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
router.put('/:messageId', async (req, res) => {
  try {
    const { messageId } = req.params;
    const { content, userId } = req.body;

    if (!userId || !content) {
      return res.status(400).json({
        success: false,
        message: 'User ID and content are required'
      });
    }

    const message = await Message.findById(messageId);
    if (!message) {
      return res.status(404).json({
        success: false,
        message: 'Message not found'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (message.sender.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: 'You can only edit your own messages'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÄ‡∏ä‡πà‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ)
    const fifteenMinutesAgo = new Date(Date.now() - 15 * 60 * 1000);
    if (message.createdAt < fifteenMinutesAgo) {
      return res.status(403).json({
        success: false,
        message: 'Cannot edit messages older than 15 minutes'
      });
    }

    await message.editMessage(content);

    // üöÄ Broadcast message edit ‡∏ú‡πà‡∏≤‡∏ô Socket.IO
    try {
      const io = getSocketInstance();
      if (io) {
        console.log('‚úèÔ∏è [messages.js] Broadcasting message edit:', messageId);
        io.to(message.chatRoom.toString()).emit('message-edited', {
          messageId: message._id,
          content: message.content,
          isEdited: message.isEdited,
          editedAt: message.editedAt
        });
        console.log('‚úÖ [messages.js] Edit broadcasted');
      }
    } catch (socketError) {
      console.error('‚ùå [messages.js] Error broadcasting edit:', socketError);
    }

    res.json({
      success: true,
      message: 'Message edited successfully',
      data: message
    });

  } catch (error) {
    console.error('Error editing message:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to edit message',
      error: error.message
    });
  }
});

// DELETE /api/messages/:messageId - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
router.delete('/:messageId', async (req, res) => {
  try {
    const { messageId } = req.params;
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'User ID is required'
      });
    }

    const message = await Message.findById(messageId);
    if (!message) {
      return res.status(404).json({
        success: false,
        message: 'Message not found'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö (‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á)
    const chatRoom = await ChatRoom.findById(message.chatRoom);
    const isOwner = message.sender.toString() === userId;
    const isRoomOwner = chatRoom.isOwner(userId);

    if (!isOwner && !isRoomOwner) {
      return res.status(403).json({
        success: false,
        message: 'You can only delete your own messages or you must be the room owner'
      });
    }

    await message.softDelete();

    // üöÄ Broadcast message deletion ‡∏ú‡πà‡∏≤‡∏ô Socket.IO
    try {
      const io = getSocketInstance();
      if (io) {
        console.log('üóëÔ∏è [messages.js] Broadcasting message deletion:', messageId);
        io.to(message.chatRoom.toString()).emit('message-deleted', {
          messageId: message._id,
          deletedAt: message.deletedAt,
          isDeleted: message.isDeleted
        });
        console.log('‚úÖ [messages.js] Deletion broadcasted');
      }
    } catch (socketError) {
      console.error('‚ùå [messages.js] Error broadcasting deletion:', socketError);
    }

    res.json({
      success: true,
      message: 'Message deleted successfully',
      data: {
        messageId: message._id,
        deletedAt: message.deletedAt
      }
    });

  } catch (error) {
    console.error('Error deleting message:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to delete message',
      error: error.message
    });
  }
});

// GET /api/messages/:messageId/reactions - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î reactions
router.get('/:messageId/reactions', async (req, res) => {
  try {
    const { messageId } = req.params;

    const message = await Message.findById(messageId)
      .populate('reactions.user', 'username displayName profileImages membershipTier');

    if (!message) {
      return res.status(404).json({
        success: false,
        message: 'Message not found'
      });
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° reactions ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    const reactionsByType = {};
    message.reactions.forEach(reaction => {
      if (!reactionsByType[reaction.type]) {
        reactionsByType[reaction.type] = [];
      }
      reactionsByType[reaction.type].push({
        user: reaction.user,
        createdAt: reaction.createdAt
      });
    });

    res.json({
      success: true,
      data: {
        messageId: message._id,
        totalReactions: message.reactions.length,
        reactionsByType,
        stats: message.stats
      }
    });

  } catch (error) {
    console.error('Error fetching message reactions:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch message reactions',
      error: error.message
    });
  }
});

// GET /api/messages/private-chats/:userId - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
router.get('/private-chats/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'User ID is required'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (ChatRoom ‡∏õ‡∏Å‡∏ï‡∏¥)
    const privateChatRooms = await ChatRoom.find({
      type: 'private',
      'members.user': userId,
      isActive: true
    })
    .populate('members.user', 'username displayName firstName lastName membershipTier profileImages isOnline')
    .sort({ lastActivity: -1 })
    .lean();

    // ‡∏î‡∏∂‡∏á private chats ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ string format ‡∏à‡∏≤‡∏Å Message collection
    const privateChatMessages = await Message.find({
      chatRoom: { $regex: /^private_.*_/ }, // ‡∏´‡∏≤ private chat IDs
      $or: [
        { sender: userId }, // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á
        { chatRoom: { $regex: new RegExp(`private_.*_${userId}_.*`) } }, // private chat ‡∏ó‡∏µ‡πà‡∏°‡∏µ userId
        { chatRoom: { $regex: new RegExp(`private_${userId}_.*_.*`) } } // private chat ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ userId
      ]
    })
    .populate('sender', 'username displayName firstName lastName membership membershipTier profileImages isOnline')
    .sort({ createdAt: -1 })
    .lean();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique private chat IDs
    const privateChatIds = new Set();
    console.log('üîç Found private chat messages:', privateChatMessages.length);
    privateChatMessages.forEach(msg => {
      if (msg.chatRoom && msg.chatRoom.startsWith('private_')) {
        privateChatIds.add(msg.chatRoom);
        console.log('üìù Private chat ID:', msg.chatRoom);
      }
    });
    console.log('üìä Unique private chat IDs:', Array.from(privateChatIds));

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å ChatRoom
    const chatRoomChats = await Promise.all(
      privateChatRooms.map(async (room) => {
        // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏î‡πâ‡∏ß‡∏¢ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
        const otherMember = room.members.find(member => 
          member.user && member.user._id.toString() !== userId
        );
        
        if (!otherMember || !otherMember.user) {
          return null; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
        }

        const otherUser = otherMember.user;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const lastMessage = await Message.findOne({
          chatRoom: room._id,
          isDeleted: false
        })
        .populate('sender', 'username displayName')
        .sort({ createdAt: -1 })
        .lean();

        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ readBy array)
        const unreadCount = await Message.countDocuments({
          chatRoom: room._id,
          sender: { $ne: userId },
          readBy: { $ne: userId },
          isDeleted: false
        });

        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å url ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
        let profileImageUrl = '';
        if (Array.isArray(otherUser.profileImages) && otherUser.profileImages.length > 0) {
          const mainIdx = typeof otherUser.mainProfileImageIndex === 'number' ? otherUser.mainProfileImageIndex : 0;
          profileImageUrl = otherUser.profileImages[mainIdx] || otherUser.profileImages[0];
        } else {
          profileImageUrl = '/uploads/profiles/default-avatar.png'; // path ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö default ‡∏à‡∏£‡∏¥‡∏á
        }
        return {
          id: room._id,
          roomId: room._id,
          otherUser: {
            _id: otherUser._id,
            id: otherUser._id,
            username: otherUser.username || 'Unknown',
            displayName: otherUser.displayName || otherUser.username || 'Unknown',
            firstName: otherUser.firstName || '',
            lastName: otherUser.lastName || '',
            membershipTier: otherUser.membershipTier || 'member',
            profileImages: otherUser.profileImages || [],
            profileImageUrl,
            isOnline: otherUser.isOnline || false
          },
          lastMessage: lastMessage ? {
            _id: lastMessage._id,
            content: lastMessage.content || '',
            messageType: lastMessage.messageType || 'text',
            senderId: lastMessage.sender._id,
            senderName: lastMessage.sender.displayName || lastMessage.sender.username || 'Unknown',
            timestamp: lastMessage.createdAt,
            isRead: lastMessage.isRead || false
          } : null,
          unreadCount: unreadCount || 0,
          lastActivity: room.lastActivity || room.createdAt,
          createdAt: room.createdAt
        };
      })
    );

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å string format
    console.log('üîÑ Processing string format chats:', Array.from(privateChatIds).length);
    const stringFormatChats = await Promise.all(
      Array.from(privateChatIds).map(async (chatId) => {
        console.log('üîç Processing chat ID:', chatId);
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö private chat ‡∏ô‡∏µ‡πâ
        const lastMessage = await Message.findOne({
          chatRoom: chatId,
          isDeleted: false
        })
        .populate('sender', 'username displayName firstName lastName membership membershipTier profileImages isOnline')
        .sort({ createdAt: -1 })
        .lean();

        if (!lastMessage) return null;

        // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏î‡πâ‡∏ß‡∏¢ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
        const otherUserId = chatId.split('_').find(id => id !== userId && id !== 'private');
        if (!otherUserId) return null;

        const otherUser = await User.findById(otherUserId)
          .select('username displayName firstName lastName membershipTier profileImages isOnline')
          .lean();

        if (!otherUser) return null;

        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ readBy array)
        const unreadCount = await Message.countDocuments({
          chatRoom: chatId,
          sender: { $ne: userId },
          readBy: { $ne: userId },
          isDeleted: false
        });

        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å url ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
        let profileImageUrl = '';
        if (Array.isArray(otherUser.profileImages) && otherUser.profileImages.length > 0) {
          const mainIdx = typeof otherUser.mainProfileImageIndex === 'number' ? otherUser.mainProfileImageIndex : 0;
          profileImageUrl = otherUser.profileImages[mainIdx] || otherUser.profileImages[0];
        } else {
          profileImageUrl = '/uploads/profiles/default-avatar.png';
        }
        return {
          id: chatId,
          roomId: chatId,
          otherUser: {
            _id: otherUser._id,
            id: otherUser._id,
            username: otherUser.username || 'Unknown',
            displayName: otherUser.displayName || otherUser.username || 'Unknown',
            firstName: otherUser.firstName || '',
            lastName: otherUser.lastName || '',
            membershipTier: otherUser.membershipTier || 'member',
            profileImages: otherUser.profileImages || [],
            profileImageUrl,
            isOnline: otherUser.isOnline || false
          },
          lastMessage: lastMessage ? {
            _id: lastMessage._id,
            content: lastMessage.content || '',
            messageType: lastMessage.messageType || 'text',
            senderId: lastMessage.sender._id,
            senderName: lastMessage.sender.displayName || lastMessage.sender.username || 'Unknown',
            timestamp: lastMessage.createdAt,
            isRead: lastMessage.isRead || false
          } : null,
          unreadCount: unreadCount || 0,
          lastActivity: lastMessage.createdAt,
          createdAt: lastMessage.createdAt
        };
      })
    );

    // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á
    const chatRoomValidChats = chatRoomChats.filter(chat => chat !== null);
    const stringFormatValidChats = stringFormatChats.filter(chat => chat !== null);
    
    console.log('üìä ChatRoom chats:', chatRoomValidChats.length);
    console.log('üìä String format chats:', stringFormatValidChats.length);
    
    const allChats = [
      ...chatRoomValidChats,
      ...stringFormatValidChats
    ];

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° lastActivity
    allChats.sort((a, b) => new Date(b.lastActivity) - new Date(a.lastActivity));

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
    const validChats = allChats;
    
    console.log('üìä Total valid chats:', validChats.length);

    res.json({
      success: true,
      data: {
        privateChats: validChats,
        total: validChats.length
      }
    });

  } catch (error) {
    console.error('Error fetching private chats:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error.message
    });
  }
});

// POST /api/messages/create-private-chat - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà
router.post('/create-private-chat', async (req, res) => {
  try {
    const { userId1, userId2 } = req.body;
    
    if (!userId1 || !userId2) {
      return res.status(400).json({
        success: false,
        message: 'Both user IDs are required'
      });
    }

    if (userId1 === userId2) {
      return res.status(400).json({
        success: false,
        message: 'Cannot create chat with yourself'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const [user1, user2] = await Promise.all([
      User.findById(userId1),
      User.findById(userId2)
    ]);

    if (!user1 || !user2) {
      return res.status(404).json({
        success: false,
        message: 'One or both users not found'
      });
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö private chat ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô ChatRoom ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á ChatRoom
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á private chat ID ‡∏ó‡∏µ‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏á‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á private chat ID ‡∏ó‡∏µ‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö user ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ ID ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠)
    const sortedUserIds = [userId1, userId2].sort();
    const privateChatId = `private_${sortedUserIds[0]}_${sortedUserIds[1]}`;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô private chat ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingMessages = await Message.find({
      chatRoom: privateChatId
    }).limit(1);

    const isNew = existingMessages.length === 0;

    res.status(201).json({
      success: true,
      message: 'Private chat created successfully',
      data: {
        chatId: privateChatId,
        isNew: true,
        chatRoom: {
          id: privateChatId,
          name: `Private Chat: ${user1.displayName || user1.username} & ${user2.displayName || user2.username}`,
          type: 'private',
          members: [
            {
              id: user1._id,
              username: user1.username,
              displayName: user1.displayName,
              firstName: user1.firstName,
              lastName: user1.lastName,
              membershipTier: user1.membershipTier,
              profileImages: user1.profileImages,
              isOnline: user1.isOnline,
              role: 'owner'
            },
            {
              id: user2._id,
              username: user2.username,
              displayName: user2.displayName,
              firstName: user2.firstName,
              lastName: user2.lastName,
              membershipTier: user2.membershipTier,
              profileImages: user2.profileImages,
              isOnline: user2.isOnline,
              role: 'member'
            }
          ]
        }
      }
    });

  } catch (error) {
    console.error('Error creating private chat:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error.message
    });
  }
});

// POST /api/messages/update-recipient-chat-list - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
router.post('/update-recipient-chat-list', async (req, res) => {
  try {
    const { chatId, message, senderId, recipientId } = req.body;
    
    if (!chatId || !message || !senderId || !recipientId) {
      return res.status(400).json({
        success: false,
        message: 'Missing required fields'
      });
    }

    console.log('üîÑ Updating recipient chat list:', { chatId, senderId, recipientId });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const [sender, recipient] = await Promise.all([
      User.findById(senderId),
      User.findById(recipientId)
    ]);

    if (!sender || !recipient) {
      return res.status(404).json({
        success: false,
        message: 'Sender or recipient not found'
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á private chat ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö user IDs)
    const sortedUserIds = [senderId, recipientId].sort();
    const recipientChatId = `private_${sortedUserIds[0]}_${sortedUserIds[1]}`;

    console.log('üìã Recipient chat ID:', recipientChatId);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô private chat ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingMessages = await Message.find({
      chatRoom: recipientChatId
    }).limit(1);

    if (existingMessages.length === 0) {
      console.log('üìù Creating new private chat for recipient');
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡πÉ‡∏ô private chat ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
      const firstMessage = new Message({
        content: message.content || '',
        sender: senderId,
        chatRoom: recipientChatId,
        messageType: message.messageType || 'text',
        attachments: message.attachments || [],
        replyTo: message.replyTo || null
      });

      await firstMessage.save();
      console.log('‚úÖ First message created for recipient');
    }

    res.status(200).json({
      success: true,
      message: 'Recipient chat list updated successfully',
      data: {
        chatId: recipientChatId,
        message: message
      }
    });

  } catch (error) {
    console.error('Error updating recipient chat list:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error.message
    });
  }
});

// DELETE /api/messages/private-chat/:chatId - ‡∏•‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (Soft Delete)
router.delete('/private-chat/:chatId', auth, async (req, res) => {
  try {
    const { chatId } = req.params;
    const userId = req.user.id;

    console.log('üóëÔ∏è Soft deleting private chat:', chatId, 'for user:', userId);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ chatId ‡πÄ‡∏õ‡πá‡∏ô private chat ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!chatId.includes('private_')) {
      return res.status(400).json({
        success: false,
        message: 'Invalid private chat ID'
      });
    }

    // ‡πÅ‡∏¢‡∏Å chat ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ user IDs
    const parts = chatId.replace('private_', '').split('_');
    if (parts.length !== 2) {
      return res.status(400).json({
        success: false,
        message: 'Invalid private chat ID format'
      });
    }

    const [user1Id, user2Id] = parts;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (user1Id !== userId && user2Id !== userId) {
      return res.status(403).json({
        success: false,
        message: 'You are not authorized to delete this chat'
      });
    }

    // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á
    const deleterId = userId;
    const otherUserId = user1Id === userId ? user2Id : user1Id;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á chat ID ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏ö (‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö user IDs)
    const newChatId = `private_${deleterId}_${otherUserId}`;

    console.log('üîÑ Creating new chat ID for deleter:', newChatId);
    console.log('üìã Old chat ID remains for other user:', chatId);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï privateChats ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ chat ID ‡πÉ‡∏´‡∏°‡πà
    await User.findByIdAndUpdate(
      deleterId,
      { 
        $pull: { privateChats: { chatId: chatId } },
        $push: { 
          privateChats: { 
            chatId: newChatId,
            otherUserId: otherUserId,
            lastMessage: null,
            lastMessageTime: null,
            isDeleted: true // ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô chat ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å soft delete
          }
        }
      }
    );

    // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ chat ID ‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∞‡πÑ‡∏£)

    console.log('‚úÖ Private chat soft deleted successfully');
    console.log('üìù User', deleterId, 'now uses chat ID:', newChatId);
    console.log('üìù User', otherUserId, 'still uses chat ID:', chatId);

    res.json({
      success: true,
      message: 'Private chat deleted successfully (soft delete)',
      data: {
        oldChatId: chatId,
        newChatId: newChatId,
        deleterId: deleterId,
        otherUserId: otherUserId,
        messagesPreserved: true
      }
    });

  } catch (error) {
    console.error('Error soft deleting private chat:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error.message
    });
  }
});

// POST /api/messages/mark-as-read - ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
router.post('/mark-as-read', auth, async (req, res) => {
  try {
    const { chatRoomId, userId } = req.body;
    const currentUserId = req.user.id;

    if (!chatRoomId || !userId) {
      return res.status(400).json({
        success: false,
        message: 'Chat room ID and user ID are required'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ
    let hasAccess = false;
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö private chat
    if (chatRoomId.startsWith('private_')) {
      const userParts = chatRoomId.split('_');
      if (userParts.length >= 3) {
        const userId1 = userParts[1];
        const userId2 = userParts[2];
        hasAccess = currentUserId === userId1 || currentUserId === userId2;
      }
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ChatRoom ‡∏õ‡∏Å‡∏ï‡∏¥
      const chatRoom = await ChatRoom.findById(chatRoomId);
      if (chatRoom) {
        hasAccess = chatRoom.members.some(member => 
          member.user.toString() === currentUserId
        );
      }
    }

    if (!hasAccess) {
      return res.status(403).json({
        success: false,
        message: 'Access denied to this chat room'
      });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    const result = await Message.updateMany(
      {
        chatRoom: chatRoomId,
        sender: { $ne: currentUserId }, // ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏™‡πà‡∏á
        readBy: { $ne: currentUserId } // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      },
      {
        $addToSet: { readBy: currentUserId }
      }
    );

    console.log(`‚úÖ Marked ${result.modifiedCount} messages as read for user ${currentUserId} in chat ${chatRoomId}`);

    res.json({
      success: true,
      message: 'Messages marked as read successfully',
      data: {
        modifiedCount: result.modifiedCount
      }
    });

  } catch (error) {
    console.error('Error marking messages as read:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error.message
    });
  }
});

// GET /api/messages/unread-count/:userId - ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
router.get('/unread-count/:userId', auth, async (req, res) => {
  try {
    const { userId } = req.params;
    const currentUserId = req.user.id;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (currentUserId !== userId) {
      return res.status(403).json({
        success: false,
        message: 'Access denied'
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö private chats
    const privateChatUnreadCount = await Message.aggregate([
      {
        $match: {
          chatRoom: { $regex: /^private_.*_/ },
          sender: { $ne: new mongoose.Types.ObjectId(userId) },
          readBy: { $ne: new mongoose.Types.ObjectId(userId) },
          isDeleted: false
        }
      },
      {
        $group: {
          _id: '$chatRoom',
          count: { $sum: 1 },
          lastMessage: { $last: '$$ROOT' }
        }
      },
      {
        $project: {
          chatRoom: '$_id',
          unreadCount: '$count',
          lastMessage: 1,
          _id: 0
        }
      }
    ]);

    // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ChatRoom ‡∏õ‡∏Å‡∏ï‡∏¥
    const chatRoomUnreadCount = await Message.aggregate([
      {
        $lookup: {
          from: 'chatrooms',
          localField: 'chatRoom',
          foreignField: '_id',
          as: 'room'
        }
      },
      {
        $match: {
          'room.members.user': new mongoose.Types.ObjectId(userId),
          sender: { $ne: new mongoose.Types.ObjectId(userId) },
          readBy: { $ne: new mongoose.Types.ObjectId(userId) },
          isDeleted: false
        }
      },
      {
        $group: {
          _id: '$chatRoom',
          count: { $sum: 1 },
          lastMessage: { $last: '$$ROOT' }
        }
      },
      {
        $project: {
          chatRoom: '$_id',
          unreadCount: '$count',
          lastMessage: 1,
          _id: 0
        }
      }
    ]);

    // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const allUnreadCounts = [...privateChatUnreadCount, ...chatRoomUnreadCount];
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°
    const totalUnreadCount = allUnreadCounts.reduce((sum, item) => sum + item.unreadCount, 0);

    res.json({
      success: true,
      data: {
        totalUnreadCount,
        chatUnreadCounts: allUnreadCounts
      }
    });

  } catch (error) {
    console.error('Error getting unread count:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error.message
    });
  }
});

// GET /api/messages/private-chats-unread/:userId - ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
router.get('/private-chats-unread/:userId', auth, async (req, res) => {
  try {
    const { userId } = req.params;
    const currentUserId = req.user.id;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (currentUserId !== userId) {
      return res.status(403).json({
        success: false,
        message: 'Access denied'
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö private chats ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const privateChatUnreadCount = await Message.aggregate([
      {
        $match: {
          chatRoom: { $regex: /^private_.*_/ },
          sender: { $ne: new mongoose.Types.ObjectId(userId) },
          readBy: { $ne: new mongoose.Types.ObjectId(userId) },
          isDeleted: false
        }
      },
      {
        $group: {
          _id: '$chatRoom',
          count: { $sum: 1 },
          lastMessage: { $last: '$$ROOT' }
        }
      },
      {
        $project: {
          chatRoom: '$_id',
          unreadCount: '$count',
          lastMessage: 1,
          _id: 0
        }
      }
    ]);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°
    const totalUnreadCount = privateChatUnreadCount.reduce((sum, item) => sum + item.unreadCount, 0);

    res.json({
      success: true,
      data: {
        totalUnreadCount,
        chatUnreadCounts: privateChatUnreadCount
      }
    });

  } catch (error) {
    console.error('Error getting private chat unread count:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error.message
    });
  }
});

module.exports = router;
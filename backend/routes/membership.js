const express = require('express');
const router = express.Router();
const User = require('../models/User');
const MembershipPlan = require('../models/MembershipPlan');

// GET /api/membership/plans - ‡∏î‡∏∂‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/plans', async (req, res) => {
  try {
    const plans = await MembershipPlan.find({ isActive: true }).sort({ order: 1 });
    res.json({
      success: true,
      data: plans
    });
  } catch (error) {
    console.error('Error fetching membership plans:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch membership plans',
      error: error.message
    });
  }
});

// GET /api/membership/user/:userId - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
router.get('/user/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    const user = await User.findById(userId).select(
      'membership coins votePoints dailyUsage isVerified'
    );
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    const wasExpired = await user.checkAndHandleExpiration();
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    user.resetDailyUsage();
    await user.save();
    
         // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ debug)
     // console.log('üîç Debug Membership Check:', { userId: user._id, tier: user.membership.tier, endDate: user.membership.endDate?.toISOString(), isActive: user.isMembershipActive, wasExpired });

    const limits = user.getMembershipLimits();
    let isActive = user.isMembershipActive;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• features ‡∏à‡∏≤‡∏Å MembershipPlan
    let features = null;
    if (user.membership.planId) {
      try {
        const MembershipPlan = require('../models/MembershipPlan');
        const plan = await MembershipPlan.findById(user.membership.planId);
        features = plan ? plan.features : null;
        console.log(`üìã Loaded features for user ${userId}, tier: ${user.membership.tier}, blurredImages: ${features?.blurredImages || 0}`);
      } catch (error) {
        console.error('Error loading membership plan features:', error);
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ daily bonus ‡πÅ‡∏•‡∏∞ spin wheel
    const canClaimDailyBonus = user.canClaimDailyBonus();
    const canSpinWheel = user.canSpinWheel();
    const timeUntilNextDailyBonus = user.getTimeUntilNextDailyBonus();
    const timeUntilNextSpinWheel = user.getTimeUntilNextSpinWheel();

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏à‡∏≤‡∏Å‡∏ß‡∏á‡∏•‡πâ‡∏≠
    const VoteTransaction = require('../models/VoteTransaction');
    const spinWheelVotePoints = await VoteTransaction.aggregate([
      {
        $match: {
          candidate: user._id,
          source: 'spin_wheel',
          status: 'active'
        }
      },
      {
        $group: {
          _id: null,
          totalSpinWheelVotePoints: { $sum: '$votePoints' }
        }
      }
    ]);
    
    const totalSpinWheelVotePoints = spinWheelVotePoints.length > 0 ? spinWheelVotePoints[0].totalSpinWheelVotePoints : 0;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ endDate
    let membershipExpiry = user.membership.endDate;
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô premium member ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ endDate ‡∏´‡∏£‡∏∑‡∏≠ endDate ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö tier ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (user.membership.tier !== 'member') {
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏° tier ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå membership
      let durationDays = 30; // default
      
      switch (user.membership.tier) {
        case 'silver':
          durationDays = 7;
          break;
        case 'gold':
          durationDays = 15;
          break;
        case 'vip':
        case 'vip1':
        case 'vip2':
        case 'diamond':
        case 'platinum':
          durationDays = 30;
          break;
        case 'test':
          durationDays = 1;
          break;
        default:
          durationDays = 30;
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á endDate ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      let needNewEndDate = false;
      
      if (!user.membership.endDate) {
        console.log(`‚ö†Ô∏è  ‡∏û‡∏ö Premium Member (${user.membership.tier}) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ endDate - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà`);
        needNewEndDate = true;
      } else {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ endDate ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const startDate = user.membership.startDate;
        const endDate = user.membership.endDate;
        
        if (startDate && endDate) {
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å startDate ‡∏ñ‡∏∂‡∏á endDate
          const actualDuration = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));
          
          // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          if (actualDuration !== durationDays) {
            console.log(`‚ö†Ô∏è  ‡∏û‡∏ö Premium Member (${user.membership.tier}) ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (${actualDuration} ‡∏ß‡∏±‡∏ô vs ${durationDays} ‡∏ß‡∏±‡∏ô) - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà`);
            needNewEndDate = true;
          }
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ startDate ‡∏´‡∏£‡∏∑‡∏≠ endDate ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          console.log(`‚ö†Ô∏è  ‡∏û‡∏ö Premium Member (${user.membership.tier}) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ startDate ‡∏´‡∏£‡∏∑‡∏≠ endDate - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà`);
          needNewEndDate = true;
        }
      }
      
      if (needNewEndDate) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á endDate ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å startDate ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const startDate = user.membership.startDate || new Date();
        const newEndDate = new Date(startDate.getTime() + (durationDays * 24 * 60 * 60 * 1000));
        
        user.membership.endDate = newEndDate;
        await user.save();
        
        membershipExpiry = newEndDate;
        isActive = true;
        
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á endDate ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å startDate: ${startDate.toISOString()} -> ${newEndDate.toISOString()} (${durationDays} ‡∏ß‡∏±‡∏ô)`);
      }
    }
    
         // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• role ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ
     // console.log('üîç Backend Debug - User Role:', user.role);
     // console.log('üîç Backend Debug - User ID:', user._id);
    
    res.json({
      success: true,
      data: {
        membershipTier: user.membership.tier,
        membershipExpiry: membershipExpiry,
        membershipStartDate: user.membership.startDate,
        isActive,
        coins: user.coins,
        votePoints: user.votePoints,
        dailyUsage: user.dailyUsage,
        limits,
        features, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• features ‡∏à‡∏≤‡∏Å MembershipPlan
        isVerified: user.isVerified,
        canClaimDailyBonus,
        canSpinWheel,
        timeUntilNextDailyBonus,
        timeUntilNextSpinWheel,
        totalSpinWheelVotePoints, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏à‡∏≤‡∏Å‡∏ß‡∏á‡∏•‡πâ‡∏≠
        role: user.role // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• role
      }
    });
  } catch (error) {
    console.error('Error fetching user membership:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch user membership',
      error: error.message
    });
  }
});

// POST /api/membership/upgrade - ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
router.post('/upgrade', async (req, res) => {
  try {
    const { userId, tier, paymentMethod, transactionId } = req.body;

    if (!userId || !tier) {
      return res.status(400).json({
        success: false,
        message: 'User ID and tier are required'
      });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    const plan = await MembershipPlan.findOne({ tier, isActive: true });
    if (!plan) {
      return res.status(404).json({
        success: false,
        message: 'Membership plan not found'
      });
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const startDate = new Date();
    const expiryDate = new Date(startDate.getTime() + (plan.duration.days * 24 * 60 * 60 * 1000));

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    user.membership.tier = tier;
    user.membership.startDate = startDate;
    user.membership.endDate = tier === 'member' ? null : expiryDate;
    user.membership.planId = plan._id;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÇ‡∏ö‡∏ô‡∏±‡∏™ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Diamond ‡πÅ‡∏•‡∏∞ Platinum)
    if (plan.features.bonusCoins > 0) {
      user.coins += plan.features.bonusCoins;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï
    if (plan.features.votePoints > 0) {
      user.votePoints += plan.features.votePoints;
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï verification badge
    if (['gold', 'vip', 'vip1', 'vip2', 'diamond', 'platinum'].includes(tier)) {
      user.isVerified = true;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    user.paymentHistory.push({
      tier,
      amount: plan.price.amount,
      currency: plan.price.currency,
      paymentMethod: paymentMethod || 'unknown',
      transactionId: transactionId || `tx_${Date.now()}`,
      status: 'completed',
      purchaseDate: startDate,
      expiryDate
    });

    await user.save();

    // ‡∏™‡πà‡∏á Socket.IO event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó membership ‡πÅ‡∏ö‡∏ö real-time
    const io = req.app.get('io');
    if (io) {
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤
      const Message = require('../models/Message');
      await Message.updateMany(
        { 'sender': userId },
        { $set: { 'sender.membershipTier': tier } }
      );

      // ‡∏™‡πà‡∏á event ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
      io.emit('membership-updated', {
        userId,
        newTier: tier,
        user: {
          _id: user._id,
          username: user.username,
          displayName: user.displayName,
          membershipTier: tier,
          profileImages: user.profileImages
        }
      });
      
      console.log(`üîÑ Emitted membership update for user ${userId} to ${tier}`);
    }

    res.json({
      success: true,
      message: `Successfully upgraded to ${plan.name}`,
      data: {
        membershipTier: user.membership.tier,
        membershipExpiry: user.membership.endDate,
        coins: user.coins,
        votePoints: user.votePoints,
        bonusCoinsAdded: plan.features.bonusCoins || 0
      }
    });

  } catch (error) {
    console.error('Error upgrading membership:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to upgrade membership',
      error: error.message
    });
  }
});

// POST /api/membership/daily-bonus - ‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
router.post('/daily-bonus', async (req, res) => {
  try {
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'User ID is required'
      });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!user.canClaimDailyBonus()) {
      const timeRemaining = user.getTimeUntilNextDailyBonus();
      const nextAvailableTime = new Date(Date.now() + timeRemaining);
      
      return res.status(400).json({
        success: false,
        message: 'Daily bonus not available yet',
        nextAvailableTime: nextAvailableTime,
        timeRemaining: timeRemaining
      });
    }

    const limits = user.getMembershipLimits();
    const bonusAmount = limits.dailyBonus;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    user.coins += bonusAmount;
    user.dailyUsage.lastDailyBonusClaim = new Date();

    await user.save();

    res.json({
      success: true,
      message: `Received daily bonus of ${bonusAmount} coins`,
      data: {
        bonusAmount,
        totalCoins: user.coins,
        nextBonusAvailable: new Date(Date.now() + 24 * 60 * 60 * 1000)
      }
    });

  } catch (error) {
    console.error('Error claiming daily bonus:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to claim daily bonus',
      error: error.message
    });
  }
});

// POST /api/membership/spin-wheel - ‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç
router.post('/spin-wheel', async (req, res) => {
  try {
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'User ID is required'
      });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!user.canSpinWheel()) {
      const timeRemaining = user.getTimeUntilNextSpinWheel();
      const nextAvailableTime = new Date(Date.now() + timeRemaining);
      
      return res.status(400).json({
        success: false,
        message: 'Spin wheel not available yet',
        nextAvailableTime: nextAvailableTime,
        timeRemaining: timeRemaining
      });
    }

    // ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• - ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°
    const prizes = [
      { type: 'coins', amount: 50, weight: 60 },
      { type: 'coins', amount: 100, weight: 50 },
      { type: 'coins', amount: 200, weight: 30 },
      { type: 'coins', amount: 500, weight: 10 },
      { type: 'votePoints', amount: 50, weight: 20 },
      { type: 'votePoints', amount: 100, weight: 10 },
      { type: 'votePoints', amount: 300, weight: 5 },
      { type: 'grand', coins: 500, votePoints: 500, weight: 3 }
    ];

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°
    const totalWeight = prizes.reduce((sum, prize) => sum + prize.weight, 0);
    
    // ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0 ‡∏ñ‡∏∂‡∏á totalWeight
    const random = Math.random() * totalWeight;
    let cumulativeWeight = 0;
    let selectedPrize = prizes[0];

    for (const prize of prizes) {
      cumulativeWeight += prize.weight;
      if (random <= cumulativeWeight) {
        selectedPrize = prize;
        break;
      }
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (selectedPrize.type === 'coins') {
      user.coins += selectedPrize.amount;
    } else if (selectedPrize.type === 'votePoints') {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á VoteTransaction ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏à‡∏≤‡∏Å‡∏ß‡∏á‡∏•‡πâ‡∏≠
      const VoteTransaction = require('../models/VoteTransaction');
      const voteTransaction = new VoteTransaction({
        voter: userId, // ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠
        candidate: userId, // ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
        voteType: 'popularity_combined',
        votePoints: selectedPrize.amount,
        message: `‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏à‡∏≤‡∏Å‡∏ß‡∏á‡∏•‡πâ‡∏≠‡∏´‡∏°‡∏∏‡∏ô: ${selectedPrize.amount} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`,
        status: 'active',
        source: 'spin_wheel'
      });
      await voteTransaction.save();
    } else if (selectedPrize.type === 'grand') {
      // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡∏ç‡πà - ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏ß‡∏ï
      user.coins += selectedPrize.coins;
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á VoteTransaction ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÇ‡∏´‡∏ß‡∏ï‡∏à‡∏≤‡∏Å‡∏ß‡∏á‡∏•‡πâ‡∏≠
      const VoteTransaction = require('../models/VoteTransaction');
      const voteTransaction = new VoteTransaction({
        voter: userId, // ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠
        candidate: userId, // ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
        voteType: 'popularity_combined',
        votePoints: selectedPrize.votePoints,
        message: `‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏≤‡∏Å‡∏ß‡∏á‡∏•‡πâ‡∏≠‡∏´‡∏°‡∏∏‡∏ô: ${selectedPrize.votePoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`,
        status: 'active',
        source: 'spin_wheel'
      });
      await voteTransaction.save();
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏∏‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    user.dailyUsage.lastSpinWheelTime = new Date();

    await user.save();

    const limits = user.getMembershipLimits();
    const nextSpinTime = new Date(Date.now() + limits.spinInterval);

    res.json({
      success: true,
      message: 'Spin wheel successful',
      data: {
        prize: selectedPrize,
        totalCoins: user.coins,
        totalVotePoints: user.votePoints,
        nextSpinTime
      }
    });

  } catch (error) {
    console.error('Error spinning wheel:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to spin wheel',
      error: error.message
    });
  }
});

// POST /api/membership/transfer-coins - ‡πÇ‡∏≠‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å Diamond ‡πÅ‡∏•‡∏∞ Platinum)
router.post('/transfer-coins', async (req, res) => {
  try {
    const { fromUserId, toUserId, amount } = req.body;

    if (!fromUserId || !toUserId || !amount || amount <= 0) {
      return res.status(400).json({
        success: false,
        message: 'Valid user IDs and amount are required'
      });
    }

    const [fromUser, toUser] = await Promise.all([
      User.findById(fromUserId),
      User.findById(toUserId)
    ]);

    if (!fromUser || !toUser) {
      return res.status(404).json({
        success: false,
        message: 'One or both users not found'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
    const limits = fromUser.getMembershipLimits();
    if (!limits.canTransferCoins) {
      return res.status(403).json({
        success: false,
        message: 'Coin transfer not available for your membership tier'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
    if (fromUser.coins < amount) {
      return res.status(400).json({
        success: false,
        message: 'Insufficient coins'
      });
    }

    // ‡πÇ‡∏≠‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
    fromUser.coins -= amount;
    toUser.coins += amount;

    await Promise.all([fromUser.save(), toUser.save()]);

    res.json({
      success: true,
      message: `Successfully transferred ${amount} coins`,
      data: {
        fromUserCoins: fromUser.coins,
        toUserCoins: toUser.coins,
        transferAmount: amount
      }
    });

  } catch (error) {
    console.error('Error transferring coins:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to transfer coins',
      error: error.message
    });
  }
});

// GET /api/membership/check-action/:userId/:action - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ action ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
router.get('/check-action/:userId/:action', async (req, res) => {
  try {
    const { userId, action } = req.params;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    user.resetDailyUsage();
    const canPerform = user.canPerformAction(action);
    const limits = user.getMembershipLimits();

    let usage = 0;
    let limit = 0;

    switch (action) {
      case 'chat':
        usage = user.dailyUsage.chatCount;
        limit = limits.dailyChats;
        break;
      case 'uploadImage':
        usage = user.dailyUsage.imageUploadCount;
        limit = limits.dailyImages;
        break;
      case 'uploadVideo':
        usage = user.dailyUsage.videoUploadCount;
        limit = limits.dailyVideos;
        break;
    }

    res.json({
      success: true,
      data: {
        canPerform,
        usage,
        limit: limit === -1 ? 'unlimited' : limit,
        remaining: limit === -1 ? 'unlimited' : Math.max(0, limit - usage)
      }
    });

  } catch (error) {
    console.error('Error checking action:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to check action',
      error: error.message
    });
  }
});

// POST /api/membership/upgrade - ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
router.post('/upgrade', async (req, res) => {
  try {
    const { userId, tier, paymentMethod, transactionId, amount, currency } = req.body;
    
    if (!userId || !tier || !transactionId) {
      return res.status(400).json({
        success: false,
        message: 'Missing required fields'
      });
    }

    // ‡∏´‡∏≤ user
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // ‡∏´‡∏≤ membership plan
    const plan = await MembershipPlan.findOne({ tier, isActive: true });
    if (!plan) {
      return res.status(404).json({
        success: false,
        message: 'Membership plan not found'
      });
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const startDate = new Date();
    const endDate = new Date(startDate);
    endDate.setDate(endDate.getDate() + plan.duration.days);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï membership ‡∏Ç‡∏≠‡∏á user
    user.membership = {
      tier: plan.tier,
      startDate: startDate,
      endDate: tier === 'member' ? null : endDate, // Member ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      autoRenew: false,
      planId: plan._id
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÇ‡∏ö‡∏ô‡∏±‡∏™ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (plan.features.bonusCoins > 0) {
      user.coins = (user.coins || 0) + plan.features.bonusCoins;
    }

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï daily usage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ limit ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (!user.dailyUsage) {
      user.dailyUsage = {
        chatCount: 0,
        imageUploadCount: 0,
        videoUploadCount: 0,
        lastReset: new Date()
      };
    } else {
      user.dailyUsage.chatCount = 0;
      user.dailyUsage.imageUploadCount = 0;
      user.dailyUsage.videoUploadCount = 0;
      user.dailyUsage.lastReset = new Date();
    }

    // ‡πÉ‡∏ä‡πâ findByIdAndUpdate ‡πÅ‡∏ó‡∏ô save() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á pre-save hooks
    const updateData = {
      membership: user.membership,
      coins: user.coins,
      dailyUsage: user.dailyUsage
    };

    await User.findByIdAndUpdate(userId, { $set: updateData }, { new: true });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transaction log (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
    // await TransactionLog.create({
    //   userId,
    //   type: 'membership_upgrade',
    //   tier,
    //   amount,
    //   currency,
    //   paymentMethod,
    //   transactionId,
    //   status: 'completed'
    // });

    res.json({
      success: true,
      message: 'Membership upgraded successfully',
      data: {
        tier: user.membership.tier,
        startDate: user.membership.startDate,
        endDate: user.membership.endDate,
        bonusCoinsAdded: plan.features.bonusCoins,
        newCoinBalance: user.coins,
        transactionId
      }
    });

  } catch (error) {
    console.error('Error upgrading membership:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to upgrade membership',
      error: error.message
    });
  }
});

module.exports = router;

const express = require('express');
const router = express.Router();
const User = require('../models/User');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const path = require('path');
const mongoose = require('mongoose');
const { auth } = require('../middleware/auth');

// JWT Secret - use the actual secret from environment
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-for-development-2024';

// Middleware to verify JWT token
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô'
    });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({
        success: false,
        message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }
    req.user = user;
    next();
  });
};

// Configure multer for profile image uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° user ID
    const userUploadPath = path.join(__dirname, '..', 'uploads', 'users', req.user.id);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!fs.existsSync(userUploadPath)) {
      fs.mkdirSync(userUploadPath, { recursive: true });
      console.log('üìÅ Created user upload directory:', userUploadPath);
    }
    
    cb(null, userUploadPath);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, 'profile-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: function (req, file, cb) {
    const allowedTypes = /jpeg|jpg|png|gif/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);

    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPEG, JPG, PNG, GIF)'));
    }
  }
});

// Multer error handling middleware
const handleMulterError = (err, req, res, next) => {
  console.error('‚ùå Multer Error:', err);
  
  if (err instanceof multer.MulterError) {
    if (err.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5MB)'
      });
    }
    if (err.code === 'LIMIT_UNEXPECTED_FILE') {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
      });
    }
  }
  
  if (err.message === '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPEG, JPG, PNG, GIF)') {
    return res.status(400).json({
      success: false,
      message: err.message
    });
  }
  
  next(err);
};

// Ensure upload directory exists
const fs = require('fs');
const uploadPath = path.join(__dirname, '..', 'uploads', 'profiles');
if (!fs.existsSync(uploadPath)) {
  fs.mkdirSync(uploadPath, { recursive: true });
  console.log('üìÅ Created upload directory:', uploadPath);
}

// GET /api/profile/me/coins - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
router.get('/me/coins', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('coins votePoints membership');
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    res.json({
      success: true,
      data: {
        coins: user.coins || 0,
        votePoints: user.votePoints || 0,
        membership: user.membership
      }
    });

  } catch (error) {
    console.error('Error fetching user coins:', error);
    res.status(500).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏î‡πâ',
      error: error.message
    });
  }
});

// GET /api/profile/search - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô :userId)
router.get('/search', async (req, res) => {
  try {
    const {
      ageMin = 18,
      ageMax = 100,
      gender,
      province,
      location,
      lookingFor,
      distanceKm,
      lat,
      lng,
      interests,
      relationship,
      lifestyle,
      page = 1,
      limit = 20
    } = req.query;

    const query = {
      isActive: true,
      isBanned: false
    };

    if (gender) {
      query.gender = gender;
    }
    // province/location filter (supports either 'province' or 'location')
    const loc = province || location;
    if (loc) {
      query.location = { $regex: loc, $options: 'i' };
    }
    if (lookingFor) {
      query.lookingFor = lookingFor;
    }
    if (relationship) {
      // store relationship in bio/interests later; for now accept as passthrough filter key
      query['preferences.relationship'] = relationship;
    }
    if (interests) {
      const interestArray = interests.split(',');
      query['interests.category'] = { $in: interestArray };
    }
    if (lifestyle) {
      const lifestyleFilters = JSON.parse(lifestyle);
      Object.keys(lifestyleFilters).forEach(key => {
        query[`lifestyle.${key}`] = lifestyleFilters[key];
      });
    }

    const skip = (page - 1) * limit;

    // Distance filter using GeoJSON point & sphere (if lat/lng and distanceKm provided)
    let geoFilter = null;
    const latNum = lat !== undefined ? Number(lat) : undefined;
    const lngNum = lng !== undefined ? Number(lng) : undefined;
    const distNum = distanceKm !== undefined ? Number(distanceKm) : undefined;
    if (
      typeof latNum === 'number' && !Number.isNaN(latNum) &&
      typeof lngNum === 'number' && !Number.isNaN(lngNum) &&
      typeof distNum === 'number' && !Number.isNaN(distNum) && distNum > 0
    ) {
      geoFilter = {
        coordinates: {
          $geoWithin: {
            $centerSphere: [[lngNum, latNum], distNum / 6378.1] // Earth radius in km
          }
        }
      };
    }

    const finalMatch = geoFilter ? { ...query, ...geoFilter } : query;

    const users = await User.find(finalMatch)
      .select('firstName lastName username nickname age gender location profileImages bio interests lifestyle membership coordinates')
      .skip(skip)
      .limit(parseInt(limit))
      .sort({ lastActive: -1 });

    const filteredUsers = users.filter(user => {
      const userAge = user.age;
      return userAge >= ageMin && userAge <= ageMax;
    });

    const total = await User.countDocuments(finalMatch);

    res.json({
      success: true,
      data: {
        users: filteredUsers,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total,
          pages: Math.ceil(total / limit)
        }
      }
    });

  } catch (error) {
    console.error('Error searching profiles:', error);
    res.status(500).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ',
      error: error.message
    });
  }
});

// GET /api/profile/premium - ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö Premium ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö tier
router.get('/premium', async (req, res) => {
  try {
    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Platinum ‡πÅ‡∏•‡∏∞ Diamond ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const tiers = ['platinum', 'diamond']
    const limit = parseInt(req.query.limit || '20')
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
    let currentUserId = null;
    const authHeader = req.headers['authorization'];
    console.log('üîç Premium API - Auth header:', authHeader ? 'Present' : 'Not present');
    
    if (authHeader) {
      try {
        const token = authHeader.split(' ')[1];
        const decoded = jwt.verify(token, JWT_SECRET);
        currentUserId = decoded.id;
        console.log('‚úÖ Premium API - Current user ID:', currentUserId);
      } catch (error) {
        // Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ
        console.log('‚ùå Premium API - Invalid token, but allowing profile view');
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á match query
    const matchQuery = {
      isActive: true,
      isBanned: false,
      'membership.tier': { $in: tiers },
      role: { $nin: ['admin', 'superadmin'] } // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á admin ‡πÅ‡∏•‡∏∞ superadmin
    };
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ currentUserId ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (currentUserId) {
      matchQuery._id = { $ne: new mongoose.Types.ObjectId(currentUserId) };
      console.log('üö´ Premium API - Excluding current user:', currentUserId);
    }

    console.log('üîç Premium API - Match query:', JSON.stringify(matchQuery, null, 2));

    const users = await User.aggregate([
      {
        $match: matchQuery
      },
      {
        $addFields: {
          tierRank: { $indexOfArray: [ tiers, '$membership.tier' ] }
        }
      },
      { $sort: { tierRank: 1, lastActive: -1 } },
      { $limit: limit },
      {
        $project: {
          username: 1,
          firstName: 1,
          lastName: 1,
          displayName: 1,
          nickname: 1,
          location: 1,
          profileImages: 1,
          membership: 1,
          membershipTier: '$membership.tier',
          lastActive: 1,
          gender: 1,
          dateOfBirth: 1
        }
      }
    ])

    res.json({ success: true, data: { users } })
  } catch (error) {
    console.error('Error fetching premium profiles:', error)
    res.status(500).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡πÑ‡∏î‡πâ', error: error.message })
  }
})

// GET /api/profile/discover - ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Discover Amazing People (VIP, Gold, Silver, Member)
router.get('/discover', async (req, res) => {
  try {
    // ‡πÅ‡∏™‡∏î‡∏á VIP, Gold, Silver, Member ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Discover Amazing People
    const tiers = ['vip2', 'vip1', 'vip', 'gold', 'silver', 'member']
    const limit = parseInt(req.query.limit || '20')
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
    let currentUserId = null;
    const authHeader = req.headers['authorization'];
    console.log('üîç Discover API - Auth header:', authHeader ? 'Present' : 'Not present');
    
    if (authHeader) {
      try {
        const token = authHeader.split(' ')[1];
        const decoded = jwt.verify(token, JWT_SECRET);
        currentUserId = decoded.id;
        console.log('‚úÖ Discover API - Current user ID:', currentUserId);
        console.log('üîç Discover API - Decoded token:', JSON.stringify(decoded, null, 2));
      } catch (error) {
        // Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ
        console.log('‚ùå Discover API - Invalid token, but allowing profile view');
        console.log('‚ùå Discover API - Token error:', error.message);
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á match query - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö user ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ membership tier
    const matchQuery = {
      isActive: true,
      isBanned: false,
      $or: [
        { 'membership.tier': { $in: tiers } },
        { 'membership.tier': { $exists: false } },
        { 'membership.tier': null },
        { 'membership': { $exists: false } }
      ],
      role: { $nin: ['admin', 'superadmin'] } // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á admin ‡πÅ‡∏•‡∏∞ superadmin
    };
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ currentUserId ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (currentUserId) {
      matchQuery._id = { $ne: new mongoose.Types.ObjectId(currentUserId) };
      console.log('üö´ Discover API - Excluding current user:', currentUserId);
      console.log('üîç Discover API - Match query after exclusion:', JSON.stringify(matchQuery, null, 2));
    }

    console.log('üîç Discover API - Match query:', JSON.stringify(matchQuery, null, 2));

    const users = await User.aggregate([
      {
        $match: matchQuery
      },
      {
        $addFields: {
          tierRank: {
            $cond: {
              if: { $and: [{ $ne: ['$membership.tier', null] }, { $ne: ['$membership', null] }] },
              then: { $indexOfArray: [ tiers, '$membership.tier' ] },
              else: tiers.length // ‡πÉ‡∏´‡πâ user ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ membership tier ‡∏≠‡∏¢‡∏π‡πà‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            }
          },
          membershipTier: {
            $cond: {
              if: { $and: [{ $ne: ['$membership.tier', null] }, { $ne: ['$membership', null] }] },
              then: '$membership.tier',
              else: 'member' // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î default ‡πÄ‡∏õ‡πá‡∏ô member
            }
          }
        }
      },
      { $sort: { tierRank: 1, lastActive: -1 } },
      { $limit: limit },
      {
        $project: {
          username: 1,
          firstName: 1,
          lastName: 1,
          displayName: 1,
          nickname: 1,
          location: 1,
          profileImages: 1,
          membership: 1,
          membershipTier: 1,
          lastActive: 1,
          gender: 1,
          dateOfBirth: 1
        }
      }
    ]);

    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (currentUserId) {
      const currentUserInResults = users.find(user => user._id.toString() === currentUserId);
      if (currentUserInResults) {
        console.log('‚ö†Ô∏è Discover API - Current user found in results:', currentUserInResults.username);
      } else {
        console.log('‚úÖ Discover API - Current user successfully excluded from results');
      }
    }

    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô user ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ tier
    const tierCounts = {};
    users.forEach(user => {
      const tier = user.membershipTier || 'no-tier';
      tierCounts[tier] = (tierCounts[tier] || 0) + 1;
    });
    console.log('üìä Discover API - User counts by tier:', tierCounts);
    console.log('üìä Discover API - Total users found:', users.length);

    res.json({ success: true, data: { users } })
  } catch (error) {
    console.error('Error fetching discover profiles:', error)
    res.status(500).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Discover ‡πÑ‡∏î‡πâ', error: error.message })
  }
})

// GET /api/profile/members - ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å role member ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Discover (‡∏™‡∏∏‡πà‡∏° 20 ‡∏Ñ‡∏ô)
router.get('/members', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit || '20')
    const page = parseInt(req.query.page || '1')
    const skip = (page - 1) * limit

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
    let currentUserId = null;
    const authHeader = req.headers['authorization'];
    console.log('üîç Members API - Auth header:', authHeader ? 'Present' : 'Not present');
    
    if (authHeader) {
      try {
        const token = authHeader.split(' ')[1];
        const decoded = jwt.verify(token, JWT_SECRET);
        currentUserId = decoded.id;
        console.log('‚úÖ Members API - Current user ID:', currentUserId);
      } catch (error) {
        // Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ
        console.log('‚ùå Members API - Invalid token, but allowing profile view');
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á match query - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ membership tier member ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const matchQuery = {
      isActive: true,
      isBanned: false,
      'membership.tier': 'member'
    };
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ currentUserId ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (currentUserId) {
      matchQuery._id = { $ne: new mongoose.Types.ObjectId(currentUserId) };
      console.log('üö´ Members API - Excluding current user:', currentUserId);
    }

    console.log('üîç Members API - Match query:', JSON.stringify(matchQuery, null, 2));

    // ‡∏î‡∏∂‡∏á user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const allMatchingUsers = await User.aggregate([
      {
        $match: matchQuery
      },
      {
        $project: {
          username: 1,
          firstName: 1,
          lastName: 1,
          displayName: 1,
          nickname: 1,
          location: 1,
          profileImages: 1,
          membership: 1,
          lastActive: 1,
          gender: 1,
          dateOfBirth: 1,
          age: 1,
          bio: 1,
          interests: 1,
          lifestyle: 1,
          isOnline: 1,
          isVerified: 1
        }
      }
    ])

    // ‡∏™‡∏∏‡πà‡∏° user ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const shuffledUsers = allMatchingUsers.sort(() => Math.random() - 0.5)
    
    // ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏° pagination
    const users = shuffledUsers.slice(skip, skip + limit)

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalUsers = allMatchingUsers.length

    res.json({ 
      success: true, 
      data: { 
        users,
        pagination: {
          page,
          limit,
          total: totalUsers,
          pages: Math.ceil(totalUsers / limit)
        }
      } 
    })
  } catch (error) {
    console.error('Error fetching member profiles:', error)
    res.status(500).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ', error: error.message })
  }
})

// GET /api/profile/members-with-likes - ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå
router.get('/members-with-likes', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit || '20')
    const page = parseInt(req.query.page || '1')
    const skip = (page - 1) * limit

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
    let currentUserId = null;
    const authHeader = req.headers['authorization'];
    console.log('üîç Members with likes API - Auth header:', authHeader ? 'Present' : 'Not present');
    
    if (authHeader) {
      try {
        const token = authHeader.split(' ')[1];
        const decoded = jwt.verify(token, JWT_SECRET);
        currentUserId = decoded.id;
        console.log('‚úÖ Members with likes API - Current user ID:', currentUserId);
      } catch (error) {
        // Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ
        console.log('‚ùå Members with likes API - Invalid token, but allowing profile view');
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á match query - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ membership tier member ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const matchQuery = {
      isActive: true,
      isBanned: false,
      'membership.tier': 'member'
    };
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ currentUserId ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (currentUserId) {
      matchQuery._id = { $ne: new mongoose.Types.ObjectId(currentUserId) };
      console.log('üö´ Members with likes API - Excluding current user:', currentUserId);
    }

    console.log('üîç Members with likes API - Match query:', JSON.stringify(matchQuery, null, 2));

    // ‡∏î‡∏∂‡∏á user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const allMatchingUsers = await User.aggregate([
      {
        $match: matchQuery
      },
      {
        $lookup: {
          from: 'users',
          let: { userId: '$_id' },
          pipeline: [
            {
              $match: {
                $expr: {
                  $in: ['$$userId', { $ifNull: ['$likes', []] }]
                }
              }
            }
          ],
          as: 'likedByUsers'
        }
      },
      {
        $project: {
          username: 1,
          firstName: 1,
          lastName: 1,
          displayName: 1,
          nickname: 1,
          location: 1,
          profileImages: 1,
          membership: 1,
          lastActive: 1,
          gender: 1,
          dateOfBirth: 1,
          age: 1,
          bio: 1,
          interests: 1,
          lifestyle: 1,
          isOnline: 1,
          isVerified: 1,
          likeCount: { $size: '$likedByUsers' }
        }
      }
    ])

    // ‡∏™‡∏∏‡πà‡∏° user ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const shuffledUsers = allMatchingUsers.sort(() => Math.random() - 0.5)
    
    // ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏° pagination
    const users = shuffledUsers.slice(skip, skip + limit)

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalUsers = allMatchingUsers.length

    res.json({ 
      success: true, 
      data: { 
        users,
        pagination: {
          page,
          limit,
          total: totalUsers,
          pages: Math.ceil(totalUsers / limit)
        }
      } 
    })
  } catch (error) {
    console.error('Error fetching member profiles with likes:', error)
    res.status(500).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ', error: error.message })
  }
})

// GET /api/profile/all - ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Discover (‡∏™‡∏∏‡πà‡∏° 20 ‡∏Ñ‡∏ô)
router.get('/all', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit || '20') // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 100 ‡πÄ‡∏õ‡πá‡∏ô 20
    const page = parseInt(req.query.page || '1')
    const skip = (page - 1) * limit

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
    let currentUserId = null;
    const authHeader = req.headers['authorization'];
    console.log('üîç All API - Auth header:', authHeader ? 'Present' : 'Not present');
    
    if (authHeader) {
      try {
        const token = authHeader.split(' ')[1];
        const decoded = jwt.verify(token, JWT_SECRET);
        currentUserId = decoded.id;
        console.log('‚úÖ All API - Current user ID:', currentUserId);
      } catch (error) {
        // Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ
        console.log('‚ùå All API - Invalid token, but allowing profile view');
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á match query - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ membership tier member ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const matchQuery = {
      isActive: true,
      isBanned: false,
      'membership.tier': 'member'
    };
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ currentUserId ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (currentUserId) {
      matchQuery._id = { $ne: new mongoose.Types.ObjectId(currentUserId) };
      console.log('üö´ All API - Excluding current user:', currentUserId);
    }

    console.log('üîç All API - Match query:', JSON.stringify(matchQuery, null, 2));

    // ‡∏î‡∏∂‡∏á user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const allMatchingUsers = await User.aggregate([
      {
        $match: matchQuery
      },
      {
        $project: {
          username: 1,
          firstName: 1,
          lastName: 1,
          displayName: 1,
          nickname: 1,
          location: 1,
          profileImages: 1,
          membership: 1,
          lastActive: 1,
          gender: 1,
          dateOfBirth: 1,
          age: 1,
          bio: 1,
          interests: 1,
          lifestyle: 1,
          isOnline: 1,
          isVerified: 1
        }
      }
    ])

    // ‡∏™‡∏∏‡πà‡∏° user ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const shuffledUsers = allMatchingUsers.sort(() => Math.random() - 0.5)
    
    // ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏° pagination
    const users = shuffledUsers.slice(skip, skip + limit)

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalUsers = allMatchingUsers.length

    res.json({ 
      success: true, 
      data: { 
        users,
        pagination: {
          page,
          limit,
          total: totalUsers,
          pages: Math.ceil(totalUsers / limit)
        }
      } 
    })
  } catch (error) {
    console.error('Error fetching all profiles:', error)
    res.status(500).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ', error: error.message })
  }
})

// GET /api/profile/:userId - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
router.get('/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
    let currentUser = null;
    const authHeader = req.headers['authorization'];
    if (authHeader) {
      try {
        const token = authHeader.split(' ')[1];
        const decoded = jwt.verify(token, JWT_SECRET);
        currentUser = decoded;
      } catch (error) {
        // Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ
        console.log('Invalid token, but allowing profile view');
      }
    }
    
    const user = await User.findById(userId).select('-password -phoneVerificationCode -phoneVerificationExpires -loginHistory');
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    const isOwnProfile = currentUser && currentUser.id === userId;
    const isAdmin = currentUser && ['admin', 'superadmin'].includes(currentUser.role);

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin ‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    let profileData = user.toObject();
    if (!isOwnProfile && !isAdmin) {
      delete profileData.email;
      delete profileData.phone;
      delete profileData.preferences;
      delete profileData.dailyUsage;
      delete profileData.coins;
      delete profileData.votePoints;
    }

    console.log('üì§ Backend sending profile data:', {
      userId,
      isOwnProfile,
      isAdmin,
      hasProfileData: !!profileData,
      profileDataKeys: Object.keys(profileData),
      profileImagesCount: profileData.profileImages?.length || 0
    });

    res.json({
      success: true,
      data: {
        profile: profileData,
        isOwnProfile,
        age: user.age
      }
    });

  } catch (error) {
    console.error('Error fetching profile:', error);
    res.status(500).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ',
      error: error.message
    });
  }
});

// PUT /api/profile/:userId - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
router.put('/:userId', authenticateToken, async (req, res) => {
  try {
    const { userId } = req.params;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (req.user.id !== userId && !['admin', 'superadmin'].includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ'
      });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    const {
      nickname,
      bio,
      location,
      occupation,
      education,
      physicalAttributes,
      religion,
      languages,
      pets,
      lifestyle,
      interests,
      promptAnswers
    } = req.body;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    const updateData = {};
    
    if (nickname !== undefined) updateData.nickname = nickname;
    if (bio !== undefined) updateData.bio = bio;
    if (location !== undefined) updateData.location = location;
    if (occupation !== undefined) updateData.occupation = occupation;
    if (education !== undefined) updateData.education = education;
    if (physicalAttributes !== undefined) updateData.physicalAttributes = physicalAttributes;
    if (religion !== undefined) {
      if (religion === '') {
        // Don't set religion if it's empty string
      } else {
        updateData.religion = religion;
      }
    }
    if (languages !== undefined) updateData.languages = languages;
    if (pets !== undefined) updateData.pets = pets;
    if (lifestyle !== undefined) updateData.lifestyle = lifestyle;
    if (interests !== undefined) updateData.interests = interests;
    if (promptAnswers !== undefined) updateData.promptAnswers = promptAnswers;

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    if (updateData.physicalAttributes) {
      // ‡πÅ‡∏õ‡∏•‡∏á height ‡πÅ‡∏•‡∏∞ weight ‡πÄ‡∏õ‡πá‡∏ô Number
      if (updateData.physicalAttributes.height !== undefined && updateData.physicalAttributes.height !== '') {
        updateData.physicalAttributes.height = Number(updateData.physicalAttributes.height);
      }
      if (updateData.physicalAttributes.weight !== undefined && updateData.physicalAttributes.weight !== '') {
        updateData.physicalAttributes.weight = Number(updateData.physicalAttributes.weight);
      }
    }

    // ‡πÅ‡∏õ‡∏•‡∏á religion enum values
    if (updateData.religion) {
      const religionMapping = {
        'buddhism': 'buddhist',
        'christianity': 'christian',
        'islam': 'muslim',
        'hinduism': 'hindu',
        'other': 'other',
        'none': 'none'
      };
      if (religionMapping[updateData.religion]) {
        updateData.religion = religionMapping[updateData.religion];
      }
    }

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå (‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤)
    // ‡∏ñ‡πâ‡∏≤ languages ‡πÄ‡∏õ‡πá‡∏ô array ‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

    // ‡πÅ‡∏õ‡∏•‡∏á education level enum values
    if (updateData.education && updateData.education.level && updateData.education.level !== '') {
      const educationMapping = {
        'high_school': 'high_school',
        'bachelor': 'bachelor',
        'master': 'master',
        'phd': 'doctorate',
        'vocational': 'diploma',
        'other': 'other'
      };
      if (educationMapping[updateData.education.level]) {
        updateData.education.level = educationMapping[updateData.education.level];
      }
    } else if (updateData.education && updateData.education.level === '') {
      // ‡∏•‡∏ö education level ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
      delete updateData.education.level;
    }

    // ‡πÅ‡∏õ‡∏•‡∏á lifestyle enum values
    if (updateData.lifestyle) {
      if (updateData.lifestyle.smoking && updateData.lifestyle.smoking !== '') {
        const smokingMapping = {
          'no': 'never',
          'yes': 'regularly',
          'occasionally': 'occasionally',
          'quit': 'trying_to_quit'
        };
        if (smokingMapping[updateData.lifestyle.smoking]) {
          updateData.lifestyle.smoking = smokingMapping[updateData.lifestyle.smoking];
        }
      } else if (updateData.lifestyle.smoking === '') {
        delete updateData.lifestyle.smoking;
      }

      if (updateData.lifestyle.drinking && updateData.lifestyle.drinking !== '') {
        const drinkingMapping = {
          'no': 'never',
          'yes': 'regularly',
          'socially': 'socially',
          'occasionally': 'occasionally',
          'quit': 'never'
        };
        if (drinkingMapping[updateData.lifestyle.drinking]) {
          updateData.lifestyle.drinking = drinkingMapping[updateData.lifestyle.drinking];
        }
      } else if (updateData.lifestyle.drinking === '') {
        delete updateData.lifestyle.drinking;
      }

      if (updateData.lifestyle.exercise && updateData.lifestyle.exercise !== '') {
        const exerciseMapping = {
          'never': 'never',
          'rarely': 'rarely',
          'sometimes': 'sometimes',
          'regularly': 'regularly',
          'daily': 'daily',
          // map legacy UI values
          'weekly': 'regularly',
          'monthly': 'sometimes'
        };
        if (exerciseMapping[updateData.lifestyle.exercise]) {
          updateData.lifestyle.exercise = exerciseMapping[updateData.lifestyle.exercise];
        }
      } else if (updateData.lifestyle.exercise === '') {
        delete updateData.lifestyle.exercise;
      }

      if (updateData.lifestyle.diet && updateData.lifestyle.diet !== '') {
        const dietMapping = {
          'regular': 'omnivore',
          'vegetarian': 'vegetarian',
          'vegan': 'vegan',
          'halal': 'other',
          'other': 'other'
        };
        if (dietMapping[updateData.lifestyle.diet]) {
          updateData.lifestyle.diet = dietMapping[updateData.lifestyle.diet];
        }
      } else if (updateData.lifestyle.diet === '') {
        delete updateData.lifestyle.diet;
      }
    }

    console.log('Updating user profile with data:', updateData);

    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { $set: updateData },
      { new: true, runValidators: true }
    ).select('-password -phoneVerificationCode -phoneVerificationExpires -loginHistory');

    if (!updatedUser) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï'
      });
    }

    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        profile: updatedUser
      }
    });

  } catch (error) {
    console.error('Error updating profile:', error);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ validation errors
    if (error.name === 'ValidationError') {
      const validationErrors = Object.keys(error.errors).map(key => ({
        field: key,
        message: error.errors[key].message
      }));
      
      return res.status(400).json({
        success: false,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        errors: validationErrors
      });
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ cast errors (‡πÄ‡∏ä‡πà‡∏ô invalid ObjectId)
    if (error.name === 'CastError') {
      return res.status(400).json({
        success: false,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        error: error.message
      });
    }
    
    res.status(500).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ',
      error: error.message
    });
  }
});

// POST /api/profile/:userId/upload-image - ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
router.post('/:userId/upload-image', authenticateToken, (req, res, next) => {
  console.log('üì§ Upload request received for user:', req.params.userId);
  console.log('üì§ Auth user:', req.user?.id);
  console.log('üì§ Content-Type:', req.headers['content-type']);
  next();
}, upload.single('profileImage'), handleMulterError, async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üì§ Processing upload for user:', userId);
    console.log('üì§ File received:', req.file ? 'Yes' : 'No');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (req.user.id !== userId && !['admin', 'superadmin'].includes(req.user.role)) {
      console.log('‚ùå Permission denied for user:', req.user.id, 'trying to upload for:', userId);
      return res.status(403).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ'
      });
    }

    if (!req.file) {
      console.log('‚ùå No file received in request');
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
      });
    }

    console.log('üì§ File details:', {
      filename: req.file.filename,
      originalname: req.file.originalname,
      size: req.file.size,
      mimetype: req.file.mimetype
    });

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô profileImages array
    const imagePath = req.file.filename;
    const userImagePath = `users/${userId}/${imagePath}`; // path ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° user ID
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏£‡∏¥‡∏á
    // ‡πÉ‡∏ä‡πâ environment variable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production
    const baseUrl = process.env.NODE_ENV === 'production' 
      ? process.env.BACKEND_URL || `${req.protocol}://${req.get('host')}`
      : `${req.protocol}://${req.get('host')}`;
    const imageUrl = `${baseUrl}/uploads/${userImagePath}`;
    
    console.log('üì§ Generated image URL:', imageUrl);
    console.log('üì§ Base URL:', baseUrl);
    console.log('üì§ Image path:', imagePath);
    console.log('üì§ User image path:', userImagePath);
    console.log('üì§ Environment:', process.env.NODE_ENV);
    
    user.profileImages.push(userImagePath); // ‡πÄ‡∏Å‡πá‡∏ö path ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° user ID

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const limits = user.getMembershipLimits();
    const maxImages = limits.dailyImages === -1 ? 10 : Math.min(limits.dailyImages, 10);
    
    if (user.profileImages.length > maxImages) {
      user.profileImages = user.profileImages.slice(-maxImages);
    }

    await user.save();

    console.log('‚úÖ Image uploaded successfully:', {
      userId,
      imagePath,
      imageUrl,
      totalImages: user.profileImages.length
    });

    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        imagePath: userImagePath, // ‡∏™‡πà‡∏á path ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° user ID
        imageUrl: imageUrl, // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏™‡πà‡∏á full URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility
        profileImages: user.profileImages // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô path array ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° user ID
      }
    });

  } catch (error) {
    console.error('Error uploading profile image:', error);
    res.status(500).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ',
      error: error.message
    });
  }
});

// DELETE /api/profile/:userId/image/:imageIndex - ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
router.delete('/:userId/image/:imageIndex', authenticateToken, async (req, res) => {
  try {
    const { userId, imageIndex } = req.params;
    const { DEFAULT_AVATAR_BASE64 } = require('../config/defaultAvatar');
    
    console.log('üóëÔ∏è Delete image request:', { userId, imageIndex, authUserId: req.user.id });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (req.user.id !== userId && !['admin', 'superadmin'].includes(req.user.role)) {
      console.log('‚ùå Permission denied for user:', req.user.id, 'trying to delete for:', userId);
      return res.status(403).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ'
      });
    }

    const user = await User.findById(userId);
    if (!user) {
      console.log('‚ùå User not found:', userId);
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    const index = parseInt(imageIndex);
    console.log('üóëÔ∏è Parsed index:', index, 'Profile images length:', user.profileImages.length);
    console.log('üóëÔ∏è Profile images:', user.profileImages);
    
    if (isNaN(index) || index < 0 || index >= user.profileImages.length) {
      console.log('‚ùå Invalid image index:', index);
      return res.status(400).json({
        success: false,
        message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö (index: ${index}, total: ${user.profileImages.length})`
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ default avatar ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const imageToDelete = user.profileImages[index];
    if (imageToDelete && imageToDelete.startsWith('data:image/svg+xml')) {
      console.log('‚ùå Cannot delete default avatar');
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏π‡∏õ default avatar ‡πÑ‡∏î‡πâ'
      });
    }

    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå
    if (imageToDelete && !imageToDelete.startsWith('data:image/svg+xml')) {
      const fullImagePath = path.join(__dirname, '..', 'uploads', imageToDelete);
      if (fs.existsSync(fullImagePath)) {
        fs.unlinkSync(fullImagePath);
        console.log('üóëÔ∏è Deleted file from filesystem:', fullImagePath);
      } else {
        console.log('‚ö†Ô∏è File not found on filesystem:', fullImagePath);
      }
    }

    // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array
    user.profileImages.splice(index, 1);
    
    console.log('üóëÔ∏è Deleted image:', imageToDelete);
    console.log('üóëÔ∏è Remaining images:', user.profileImages.length);
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ default
    if (user.profileImages.length === 0) {
      user.profileImages = [DEFAULT_AVATAR_BASE64];
      console.log('üóëÔ∏è Added default avatar');
    }
    
    await user.save();

    res.json({
      success: true,
      message: '‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        profileImages: user.profileImages,
        deletedIndex: index
      }
    });

  } catch (error) {
    console.error('‚ùå Error deleting profile image:', error);
    res.status(500).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ',
      error: error.message
    });
  }
});

// PUT /api/profile/:userId/main-image/:imageIndex - ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
router.put('/:userId/main-image/:imageIndex', authenticateToken, async (req, res) => {
  try {
    const { userId, imageIndex } = req.params;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (req.user.id !== userId && !['admin', 'superadmin'].includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ'
      });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    const index = parseInt(imageIndex);
    if (index < 0 || index >= user.profileImages.length) {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å'
      });
    }

    // ‡∏¢‡πâ‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å (‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å)
    const selectedImage = user.profileImages[index];
    user.profileImages.splice(index, 1); // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
    user.profileImages.unshift(selectedImage); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏£‡∏Å
    await user.save();

    res.json({
      success: true,
      message: '‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        profileImages: user.profileImages
      }
    });

  } catch (error) {
    console.error('Error setting main profile image:', error);
    res.status(500).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ',
      error: error.message
    });
  }
});

// GET /api/profile/:userId/compatibility/:targetUserId - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
router.get('/:userId/compatibility/:targetUserId', authenticateToken, async (req, res) => {
  try {
    const { userId, targetUserId } = req.params;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (req.user.id !== userId && !['admin', 'superadmin'].includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ'
      });
    }

    const [user, targetUser] = await Promise.all([
      User.findById(userId),
      User.findById(targetUserId)
    ]);

    if (!user || !targetUser) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
    let compatibilityScore = 0;
    const factors = [];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏¢‡∏∏
    const ageDiff = Math.abs(user.age - targetUser.age);
    if (ageDiff <= 5) {
      compatibilityScore += 20;
      factors.push({ factor: '‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô', score: 20 });
    } else if (ageDiff <= 10) {
      compatibilityScore += 10;
      factors.push({ factor: '‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á', score: 10 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏≤‡∏ô‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå
    if (user.lifestyle && targetUser.lifestyle) {
      if (user.lifestyle.smoking === targetUser.lifestyle.smoking) {
        compatibilityScore += 15;
        factors.push({ factor: '‡∏ó‡∏±‡∏®‡∏ô‡∏Ñ‡∏ï‡∏¥‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô', score: 15 });
      }
      
      if (user.lifestyle.drinking === targetUser.lifestyle.drinking) {
        compatibilityScore += 15;
        factors.push({ factor: '‡∏ó‡∏±‡∏®‡∏ô‡∏Ñ‡∏ï‡∏¥‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏™‡∏∏‡∏£‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô', score: 15 });
      }

      if (user.lifestyle.exercise === targetUser.lifestyle.exercise) {
        compatibilityScore += 10;
        factors.push({ factor: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô', score: 10 });
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
    if (user.interests && targetUser.interests && user.interests.length > 0 && targetUser.interests.length > 0) {
      const userInterestCategories = user.interests.map(i => i.category);
      const targetInterestCategories = targetUser.interests.map(i => i.category);
      const commonInterests = userInterestCategories.filter(cat => targetInterestCategories.includes(cat));
      
      const interestScore = Math.min(commonInterests.length * 5, 25);
      compatibilityScore += interestScore;
      if (interestScore > 0) {
        factors.push({ factor: `‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô ${commonInterests.length} ‡∏î‡πâ‡∏≤‡∏ô`, score: interestScore });
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏®‡∏≤‡∏™‡∏ô‡∏≤
    if (user.religion && targetUser.religion && user.religion === targetUser.religion) {
      compatibilityScore += 15;
      factors.push({ factor: '‡∏®‡∏≤‡∏™‡∏ô‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô', score: 15 });
    }

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà 100
    compatibilityScore = Math.min(compatibilityScore, 100);

    res.json({
      success: true,
      data: {
        compatibilityScore,
        factors,
        level: compatibilityScore >= 80 ? 'excellent' : 
               compatibilityScore >= 60 ? 'good' : 
               compatibilityScore >= 40 ? 'fair' : 'low'
      }
    });

  } catch (error) {
    console.error('Error calculating compatibility:', error);
    res.status(500).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ',
      error: error.message
    });
  }
});

// Set main profile image
router.put('/:userId/main-image/:imageIndex', authenticateToken, async (req, res) => {
  try {
    const { userId, imageIndex } = req.params;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (req.user.id !== userId) {
      return res.status(403).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ'
      });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    const index = parseInt(imageIndex);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ index ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (index < 0 || index >= user.profileImages.length) {
      return res.status(400).json({
        success: false,
        message: '‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï mainProfileImageIndex
    user.mainProfileImageIndex = index;
    await user.save();

    res.json({
      success: true,
      message: '‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        mainProfileImageIndex: user.mainProfileImageIndex,
        profileImages: user.profileImages
      }
    });

  } catch (error) {
    console.error('Set main profile image error:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å',
      error: error.message
    });
  }
});

// (moved to top to avoid route conflict with :userId)

module.exports = router;
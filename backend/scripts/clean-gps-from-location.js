const mongoose = require('mongoose');
const User = require('../models/User');

// MongoDB Connection
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/sodeclick';

async function cleanGPSFromLocation() {
  try {
    console.log('üîå Connecting to MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ location ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î GPS (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: "13.123,100.456" ‡∏´‡∏£‡∏∑‡∏≠ "13.123456789,100.123456789")
    const coordinatePattern = /^\d+\.?\d*,\s*\d+\.?\d*$/;
    
    const users = await User.find({});
    console.log(`üìä Found ${users.length} total users`);

    let cleanedCount = 0;
    let skippedCount = 0;

    for (const user of users) {
      if (user.location && coordinatePattern.test(user.location)) {
        console.log(`üßπ Cleaning GPS coordinates for user ${user._id} (${user.firstName} ${user.lastName}): "${user.location}"`);
        
        // ‡∏•‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î GPS ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å location (‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
        user.location = '';
        await user.save();
        
        cleanedCount++;
      } else {
        skippedCount++;
      }
    }

    console.log('\nüìä Summary:');
    console.log(`‚úÖ Cleaned: ${cleanedCount} users`);
    console.log(`‚è≠Ô∏è  Skipped: ${skippedCount} users (already clean)`);
    console.log(`üìà Total: ${users.length} users processed`);

    console.log('\n‚úÖ GPS coordinates cleaned successfully!');

  } catch (error) {
    console.error('‚ùå Error cleaning GPS coordinates:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå MongoDB connection closed');
  }
}

// Run the script
cleanGPSFromLocation();


const mongoose = require('mongoose');
const User = require('../models/User');
const path = require('path');

// Load environment variables - try .env.production first, then env.production
const envPath = path.resolve(__dirname, '../.env.production');
const envPath2 = path.resolve(__dirname, '../env.production');
const fs = require('fs');

if (fs.existsSync(envPath)) {
  require('dotenv').config({ path: envPath });
} else if (fs.existsSync(envPath2)) {
  require('dotenv').config({ path: envPath2 });
} else {
  console.warn('‚ö†Ô∏è No production environment file found, using default .env');
  require('dotenv').config();
}

/**
 * Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå ghost users
 * Ghost users ‡∏Ñ‡∏∑‡∏≠ users ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î online status ‡πÅ‡∏ï‡πà‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
 * ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î browser ‡∏Å‡∏∞‡∏ó‡∏±‡∏ô‡∏´‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠ socket disconnect ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */

async function clearGhostUsers() {
  try {
    console.log('üîå Connecting to MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ Connected to MongoDB');

    // ‡∏´‡∏≤ ghost users: users ‡∏ó‡∏µ‡πà isOnline = true ‡πÅ‡∏ï‡πà lastActive ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ô‡∏≤‡∏ó‡∏µ
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
    
    console.log('üîç Searching for ghost users...');
    console.log(`üîç Criteria: isOnline = true AND lastActive < ${tenMinutesAgo.toISOString()}`);
    
    const ghostUsers = await User.find({
      isOnline: true,
      lastActive: { $lt: tenMinutesAgo }
    }).select('_id username displayName email isOnline lastActive');

    if (ghostUsers.length === 0) {
      console.log('‚úÖ No ghost users found!');
      await mongoose.disconnect();
      return;
    }

    console.log(`\nüëª Found ${ghostUsers.length} ghost users:`);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    ghostUsers.forEach((user, index) => {
      const timeDiff = Math.floor((Date.now() - user.lastActive.getTime()) / 1000 / 60);
      console.log(`${index + 1}. ${user.displayName || user.username} (${user.email})`);
      console.log(`   Last Active: ${user.lastActive.toISOString()} (${timeDiff} minutes ago)`);
      console.log(`   Status: ${user.isOnline ? 'üü¢ Online' : 'üî¥ Offline'}`);
    });
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

    // ‡∏ñ‡∏≤‡∏° confirmation
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    });

    const answer = await new Promise((resolve) => {
      readline.question('‚ùì Do you want to clear these ghost users? (yes/no): ', resolve);
    });
    readline.close();

    if (answer.toLowerCase() !== 'yes' && answer.toLowerCase() !== 'y') {
      console.log('‚ùå Operation cancelled');
      await mongoose.disconnect();
      return;
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ghost users ‡πÄ‡∏õ‡πá‡∏ô offline
    console.log('\nüîÑ Clearing ghost users...');
    const result = await User.updateMany(
      {
        isOnline: true,
        lastActive: { $lt: tenMinutesAgo }
      },
      {
        $set: {
          isOnline: false,
          lastActive: new Date()
        }
      }
    );

    console.log(`‚úÖ Successfully cleared ${result.modifiedCount} ghost users`);
    console.log(`üìä Matched: ${result.matchedCount}, Modified: ${result.modifiedCount}`);

    // ‡πÅ‡∏™‡∏î‡∏á summary ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
    const stillOnline = await User.countDocuments({ isOnline: true });
    console.log(`\nüìä Current online users: ${stillOnline}`);

    await mongoose.disconnect();
    console.log('‚úÖ Disconnected from MongoDB');

  } catch (error) {
    console.error('‚ùå Error clearing ghost users:', error);
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
    }
    process.exit(1);
  }
}

// Run the script
clearGhostUsers();

